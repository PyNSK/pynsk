{"pages":[{"tags":"Python","title":"Заполнить страницу","url":"http://pynsk.ru/pages/my-super-post.html","text":"This is the content of my super blog post."},{"tags":"Таинство стандартной библиотеки","title":"Таинство стандартной библиотеки: collections","url":"http://pynsk.ru/posts/2015/авг./09/tainstvo-standartnoi-biblioteki-collections/","text":"Модуль collections - предоставляет специализированные типы данных, на основе словарей, кортежей, множеств, списков. Этот модуль хорошо себя показывает при частой работе со словарями и списками. Например, данный модуль предоставляет возможность посчитать n наиболее часто встречающихся элементов, в порядке убывания встречаемости. Есть в этом модуле и словарь, который помнит порядок ключей. А еще есть структура, которая позволяет создать объект ведущий себя как кортеж, с тем дополнением, что каждому элементу присваивается имя, по которому можно в дальнейшем получать доступ. Заинтересовал? Вот ссылки для дальнейшего погружения в тему: https://docs.python.org/3.5/library/collections.html http://pythonworld.ru/moduli/modul-collections.html"},{"tags":"Таинство стандартной библиотеки","title":"Таинство стандартной библиотеки: datetime и calendar","url":"http://pynsk.ru/posts/2015/авг./09/tainstvo-standartnoi-biblioteki-datetime-i-calendar/","text":"Стандартная поставка Python содержит множество инструментов для решения задач. Например, для работы с датами отлично себя показывают datetime и calendar Модуль datetime предоставляет классы для обработки времени и даты разными способами. Поддерживается и стандартный способ представления времени, однако больший упор сделан на простоту манипулирования датой, временем и их частями. Модуль calendar позволяет напечатать себе календарик (а также содержит некоторые другие полезные функции для работы с календарями). Возможности этих модулей обширны. Стоит их рассмотреть внимательно. Для этого приведем ссылки: datetime: https://docs.python.org/2/library/datetime.html http://pythonworld.ru/moduli/modul-datetime.html http://pymotw.com/2/datetime/ calendar: https://docs.python.org/2/library/calendar.html http://pymotw.com/2/calendar/"},{"tags":"Пишем web-проекты","title":"Python и real-time web приложение","url":"http://pynsk.ru/posts/2015/авг./08/python-i-real-time-web-prilozhenie/","text":"Далеко не всегда требуется тащить мощный Django или другой фреймворк. Бывает достаточно небольшого количества чистого Python кода и базы данных. Посмотрим, как имея всего эти 2 элемента написать приложение. !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document);"},{"tags":"Полезные библиотеки","title":"Python + GUI == PyQt","url":"http://pynsk.ru/posts/2015/авг./08/python-gui-pyqt/","text":"Qt - это инструментарий для разработки на C++, который предоставляет огромный спектр возможностей: от рисования GUI, до написания низкоуровневых серверов. Часто Qt применяют для создания GUI, в том числе в интерактивном режиме - можно перемещать виджеты на формы. Qt имеет отличную докумементацию, а также имеет привязку для Python - PyQt и PySide. (вторая еще с Qt5 не умеет работать) Используя PyQt можно нарисовать формочку в редакторе, а затем буквально одной строчкой начать писать логику. https://wiki.python.org/moin/PyQt http://wiki.python.su/Документации/ВведениеВСредуPyQt4"},{"tags":"Python на службе народа","title":"Python как средство для определения \"хорошо/плохо\"","url":"http://pynsk.ru/posts/2015/авг./07/python-kak-sredstvo-dlia-opredeleniia-khoroshoplokho/","text":"Информации очень много. Хорошо бы уметь ее фильтровать. Хочется упомянуть такое средство фильтрации как анализ тональности. Это даже не фильтрация, но можно применять как фильтр. Sentiment analysis (по-русски, анализ тональности) — это область компьютерной лингвистики, которая занимается изучением мнений и эмоций в текстовых документах. С помощью анализа тональности можно определить, что текст N интересный, а текст M неинтересный - причем это сделает компьютер за вас. Для погружения в эту тему стоит почитать эти ссылки: - http://habrahabr.ru/post/149605/ - http://habrahabr.ru/post/263171/ - http://habrahabr.ru/post/197890/"},{"tags":"Полезные инструменты","title":"Утилиты написанные на Python: youtube-dl","url":"http://pynsk.ru/posts/2015/авг./07/utility-napisannye-na-python-youtube-dl/","text":"youtube-dl (https://github.com/rg3/youtube-dl/) - это очень популярный скрипт для выгрузки видео с сервиса Youtube (, Vimeo и других). Данная утилита позволяет очень легко выдернуть видео со страницы ютьюб. Множество настроек позволяют в том числе выдернуть субтитры, узнать длительность видео и многие другие параметры. Данную утилиту можно применить следующим образом: если у вас есть ряд каналов, которые вы смотрите регулярно, то часто задаетесь вопросом \"Вышло новое видео или нет?\". Чтобы не тыкаться по 10 раз на дню на сайт (плюс к этому, \"котики\" могут отвлечь на несколько часов), вы можете соединить несколько сервисов вместе и новые видео будут автоматически попадать к вам на компьютер."},{"tags":"Разное","title":"Что такое PEP?","url":"http://pynsk.ru/posts/2015/авг./06/chto-takoe-pep/","text":"Развитие языка Python происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP. PEP - Python Enhancement Proposal - это предложения по развитию питона https://www.python.org/dev/peps/ Процесс PEP является основным механизмом для предложения новых возможностей и для документирования проектных решений, которые прошли в Python. Самым известным PEP является PEP8 - это свод рекомендаций в оформлению кода. Рекомендации написаны кровью из глаз программистов. https://www.python.org/dev/peps/pep-0008/"},{"tags":"Разное","title":"Python и базы данных: много баз - много модулей или один?","url":"http://pynsk.ru/posts/2015/авг./06/python-i-bazy-dannykh-mnogo-baz-mnogo-modulei-ili-odin/","text":"Без баз данных (БД) в современной разработке редко обходится. Питон не обделен и имеет множество модулей для работы с базами данных. Есть и специализированные, например, pymongo - модуль для MongoDB, есть и более обширные - sqlalchemy, PonyORB. sqlalchemy - это ORM для различных БД. Если просто, то это инструмент, написать структуру данных и работать с ней, а \"алхимия\" будет самостоятельно сохранять/подгружать из БД данные. sqlalchemy умеет работать со всеми популярными реляционными БД."},{"tags":"Извлечение информации","title":"Python и интересный парсинг сайтов","url":"http://pynsk.ru/posts/2015/авг./05/python-i-interesnyi-parsing-saitov/","text":"Излечение информации со страниц может быть интересным. Рекомендуем к просмотру видео !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document);"},{"tags":"Пишем web-проекты","title":"Bottle с Python","url":"http://pynsk.ru/posts/2015/авг./05/bottle-s-python/","text":"bottle - это веб-фреймворк для Python. Отличительной особенностью этого фреймворка является простота - исходный код занимает один файл. Несмотря на свою минималистичность, Bottle предоставляет довольно широкие возможности, которых на 100% хватает для мелких и средних проектов. Чтобы стартануть изучение достаточно написать: from bottle import route , run , template @route ( '/hello/<name>' ) def index ( name ): return template ( '<b>Hello {{name}}</b>!' , name = name ) run ( host = 'localhost' , port = 8080 ) Это запустит web-приложение на 8080 порту, а по ссылке http://127.0.0.1/hello/Alexander вы увидите Hello Alexander. Очень просто. Дальнейшее изучение можно продолжить по ссылкам: http://bottlepy.org/docs/dev/index.html http://habrahabr.ru/post/221659/ http://habrahabr.ru/post/250831/"},{"tags":"Тесты тесты тесты","title":"Тесты тесты тесты: модуль тестирования py.test","url":"http://pynsk.ru/posts/2015/авг./04/testy-testy-testy-modul-testirovaniia-pytest/","text":"Наряду с входящими в стандартную поставку питона средствами для тестирования, существуют и альтернативные инструменты, например, py.test. http://pytest.org/ py.test имеет множество расширений, которые значительно упрощают написание тестов. py.test имеет плагины для всех популярных web-фреймворков, с помощью плагинов позволяет кэшеировать результаты (успешных тестов), формировать отчеты в самых различных форматах. А также имеет очень простую систему расширения и вы можете буквально за день написать свой плагин. !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document);"},{"tags":"Тесты тесты тесты","title":"Тесты тесты тесты: создание читаемых отчетов","url":"http://pynsk.ru/posts/2015/авг./04/testy-testy-testy-sozdanie-chitaemykh-otchetov/","text":"Тесты тесты тесты: создание читаемых отчетов Когда в вашей программе очень много тестов, то возникают проблемы с чтением отчетов (что сломалось, что корректно отработало). Для создания читаемых отчетов можно порекомендовать allure-framework. О этом фреймворке можно узнать в видео: !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document); https://github.com/allure-framework"},{"tags":"Синтаксис Python","title":"Синтаксис Python: конструкция switch","url":"http://pynsk.ru/posts/2015/авг./03/sintaksis-python-konstruktsiia-switch/","text":"Стоит упомянуть про конструкцию switch в Python. Такой конструкции в языке нет, однако, выкрутится можно. Часто рекомендуют писать множественные elif'ы, но можно сделать так: def switch_case ( case ): return \"You entered \" + { '1' : \"one\" , '2' : \"two\" , '3' : \"three\" } . get ( case , \"an out of range number\" ) num = raw_input ( \"Input a number between 1 and 3: \" ) print switch_case ( num ) В этом примере мы создаем словарь, а затем получаем значение по нужному нам ключу. Вот только этот подход не работает, когда значение switch'а вычисляется в динамике. (Например, если мы приветствуем/прощаемся какого-то пользователя). result = { 'a' : lambda x : x * 5 , 'b' : lambda x : x + 7 , 'c' : lambda x : x - 2 }[ value ]( x ) В этом случае мы все также создаем словарь, но в качестве значений словаря прописываем функцию (в примере - lamdba функции). Затем получаем эту функцию словаря и вычисляем с аргументом. Еще способы реализации switch-case в Python: Recipe 410692: Readable switch construction without lambdas or dictionaries Recipe 410695: Exception-based Switch-Case Recipe 181064: Using a Dictionary in place of a 'switch' statement"},{"tags":"Синтаксис Python","title":"Синтаксис Python: трехместное выражение if/else","url":"http://pynsk.ru/posts/2015/авг./03/sintaksis-python-trekhmestnoe-vyrazhenie-ifelse/","text":"Сегодня хочется упомянуть о непонятной на первый взгляд конструкции - тернарная условная операция, или по-русски - трехместное выражение if/else . Представим, есть такой код: if X : A = Y else : A = Z довольно короткая, но, тем не менее, занимает целых 4 строки. Специально для таких случаев и было придумано выражение if/else : A = Y if X else Z В данной инструкции интерпретатор выполнит выражение Y, если X истинно, в противном случае выполнится выражение Z. >>> >>> A = 't' if 'spam' else 'f' >>> A 't' Синтаксис конструкции if-elif-else описан по ссылкам https://docs.python.org/3/tutorial/controlflow.html http://pythonworld.ru/osnovy/instrukciya-if-elif-else-proverka-istinnosti-trexmestnoe-vyrazhenie-ifelse.html"},{"tags":"Полезные модули","title":"Рисование svg графиков","url":"http://pynsk.ru/posts/2015/авг./02/risovanie-svg-grafikov/","text":"Для рисования векторных графиков (svg) подойдет библиотека pygal - http://pygal.org/ Данный модуль предоставляет широкий спектр возможностей, в частности можно нарисовать: Столбчатые диаграммы Линейные диаграммы XY диаграммы Круговые диаграммы Лепестковые диаграммы и другие"},{"tags":"Таинство стандартной библиотеки","title":"Статистический модуль в стандартной библиотеке","url":"http://pynsk.ru/posts/2015/авг./02/statisticheskii-modul-v-standartnoi-biblioteke/","text":"Статистический модуль теперь есть в стандартной библиотеке. Начиная с версии 3.4 в стандартной поставке Python появилось более продвинутое средство для работы с данными. Теперь нет необходимости писать руками методы average, median (вычисление среднего и медианы) и других. Ознакомьтесь с возможностями стандартного модуля: https://docs.python.org/3/library/statistics.html"},{"tags":"Полезные библиотеки","title":"Python + winapi","url":"http://pynsk.ru/posts/2015/авг./01/python-winapi/","text":"Пишите под windows, да еще и с Win API? Python здесь тоже может помочь, ведь для него есть библиотека pywin32 (http://sourceforge.net/projects/pywin32/). Данная библиотека предоставляет все базовые примитивы для работы с WinAPI."},{"tags":"Полезные модули","title":"click","url":"http://pynsk.ru/posts/2015/авг./01/click/","text":"Библиотека click ( http://click.pocoo.org/4/ ) позволяет с минимальными усилиями создать интерфейс командной строки. Создаете функцию, добавляете пару декораторов и готово. import click @click.command () @click.option ( '--count' , default = 1 , help = 'Number of greetings.' ) @click.option ( '--name' , prompt = 'Your name' , help = 'The person to greet.' ) def hello ( count , name ): ... А как вы создаете командные интерфейсы?"},{"tags":"Полезные библиотеки","title":"JSON DSL - JSL","url":"http://pynsk.ru/posts/2015/июля/31/json-dsl-jsl/","text":"Если вы широко используете JSON в своем проекте, то вам будет интересен DSL - JSL. JSL позволяет описывать модели, почти в какой-нибудь ORM, создавать объекты по этим моделям и как-то с ними работать. Интересный проект. https://github.com/aromanovich/jsl"},{"tags":"Разное","title":"Python - язык общего назначения","url":"http://pynsk.ru/posts/2015/июля/31/python-iazyk-obshchego-naznacheniia/","text":"Python - язык общего назначения, может применяться где угодно. Не верите? На странице https://www.python.org/about/success/ представлены сферы и названия компаний, которые применяют этот язык. Впечатляет."},{"tags":"Hardcore Python","title":"Python и real-time?","url":"http://pynsk.ru/posts/2015/июля/30/python-i-real-time/","text":"Возможно! Рассказ \"Управление памятью в real-time приложениях Python\" Антона Патрушева покажет как можно писать Python приложения с максимально быстрым откликом. https://events.yandex.ru/lib/talks/2075/"},{"tags":"Разное","title":"Сравнение R и Python","url":"http://pynsk.ru/posts/2015/июля/30/sravnenie-r-i-python/","text":"В последнее время любят сравнивать Python и R. Так давайте же почитаем сравнение этих двух языков. http://blog.dominodatalab.com/comparing-python-and-r-for-data-science/"},{"tags":"Извлечение информации","title":"Парсинг с помощью asyncio","url":"http://pynsk.ru/posts/2015/июля/29/parsing-s-pomoshchiu-asyncio/","text":"Парсинг сайтов это вечная задача. Сайтов много, данных много и все они разные. Для задач парсинга существует великое разнообразие инструментов. В Python 3-ей версии появился стандартный модуль для создания асинхронных программ. И грех не воспользоваться данной возможностью. Примером парсинга на asyncio может послужить эта статья http://olegwock.net/blog/python/byistryiy-parsing-na-python-s-pomoshhyu-asyncio/"},{"tags":"Пишем web-проекты","title":"Django REST API","url":"http://pynsk.ru/posts/2015/июля/29/django-rest-api/","text":"Пишите web приложения? Тогда для вас не является новостью, что без API далеко не уедешь. Для фреймворка django существует несколько способов создать API за пару минут, да еще и с документацией. https://github.com/tomchristie/django-rest-framework https://github.com/marcgibbons/django-rest-swagger"},{"tags":"Синтаксис Python","title":"Классы и функции","url":"http://pynsk.ru/posts/2015/июля/28/klassy-i-funktsii/","text":"До сих путаетесь между функциями, методами, классами и объектами? Пора разобраться в этом. Данная статья расскажет, что такое Bound и UnBound методы, как можно в динамике добавлять поля в объект, как перегружать методы. http://0agr.ru/blog/2011/05/03/advanced-python-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B-%D0%B8-%D0%B8%D1%85-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B/"},{"tags":"Тесты тесты тесты","title":"Имитация файловой системы с помощью mock","url":"http://pynsk.ru/posts/2015/июля/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/","text":"Вы пишите тесты? Тогда вам знаком модуль mock (в Python3 находится в unittest). Это модуль, который позволяет сделать имитацию объекта. Это необходимо, когда пишите тесты на свой код, а этот код использует множество долгих приготовлений: сходить в БД, разобрать данные еще что-то. Вот в этом случае вы можете провести имитацию всех этих долгих приготовлений и сконцентрироваться на написании тестов для своего кода. В случае с файловой системой немного сложней. Вот надо какие-то файлы создавать,в них что-то писать. Засорять свою домашнюю директорию папками \"temp\"? Не обязательно, можно имитировать файловую систему с помощью mockfs. https://github.com/mockfs/mockfs"},{"tags":"Таинство стандартной библиотеки","title":"Регулярные выражения","url":"http://pynsk.ru/posts/2015/июля/27/reguliarnye-vyrazheniia/","text":"Предположим, у нас есть задача - выдрать из крупного текстового файла (файла с логами) все IPv4 (адреса клиентов, например). Как это можно сделать? Хорошим инструментом для решения этой задачи являются регулярные выражения. Регулярное выражение — это последовательность символов, используемая для поиска и замены текста в строке или файле. Возможно, вы уже встречались с записями типа: <([a-z]+)[&#94;>]*(?<!/)> Большая вероятность, что это было регулярное выражение. Регулярные выражения - это мощный инструмент, который стоит изучить и осознать. Не надо запоминать все конструкции, достаточно понять принцип. Для погружения в эту тему, рекомендуем эти материалы: http://tproger.ru/translations/regular-expression-python/ http://qntm.org/files/re/re.html http://habrahabr.ru/post/115825/ http://pep8.ru/doc/dive-into-python-3/7.html"},{"tags":"Таинство стандартной библиотеки","title":"Встроенные функции Python","url":"http://pynsk.ru/posts/2015/июля/27/vstroennye-funktsii-python/","text":"Стандартная библиотека Python отличается хорошей документацией и широким ассортиментом готовых решений. Python предоставляет без малого 68 встроенных функций: это получение модуля числа, бинарное и hex представления числа, различные преобразование типов, сложение, возведение в степень и многие другие. https://docs.python.org/3.5/library/functions.html А вы знали, что в Python всё является объектом? Даже число >>> dir ( 5 ) [ '__abs__' , '__add__' , '__and__' , .... , 'denominator' , 'imag' , 'numerator' , 'real' ]"},{"tags":"Таинство стандартной библиотеки","title":"PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir.","url":"http://pynsk.ru/posts/2015/июля/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/","text":"PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir. Функция scandir возвращает генератор, который содержит директории по пути. Польза scandir состоит в производительности. Теперь os.listdir и os.walk будут работать в 2-20 раз быстрее. Пример: функция, которая возвращает генератор с директориями начинающиеся с точки: def subdirs ( path ): \"\"\"Yield directory names not starting with '.' under given path.\"\"\" for entry in os . scandir ( path ): if entry . name . startswith ( '.' ) and entry . is_dir (): yield entry . name"},{"tags":"Полезные библиотеки","title":"Tkinter","url":"http://pynsk.ru/posts/2015/июля/25/tkinter/","text":"Родным модулем для построения GUI интерфейсов для Python программ является Tkinter. Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы. Данный курс - http://younglinux.info/tkinter.php - \"Создание GUI на Python с помощью библиотеки Tkinter\" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.)."},{"tags":"Python проекты","title":"Интерпретатор brainfuck на Python","url":"http://pynsk.ru/posts/2015/июля/25/interpretator-brainfuck-na-python/","text":"Язык brainfuck для хранения данных использует ячейки (по-хорошему бесконечное число ячеек) и состоит всего из восьми команд, поэтому выучить его будет легко. В этой статье показан интерпретатор brainfuck на Python http://pythonworld.ru/primery-programm/interpretator-brainfuck.html"},{"tags":"Полезные библиотеки","title":"Набор GUI библиотек для Python","url":"http://pynsk.ru/posts/2015/июля/25/nabor-gui-bibliotek-dlia-python/","text":"На странице Python-wiki представлен огромный список пакетов для создания GUI на Python https://wiki.python.org/moin/GuiProgramming"},{"tags":"Python проекты","title":"Disqus - самое крупное django приложением в web.","url":"http://pynsk.ru/posts/2015/июля/24/disqus-samoe-krupnoe-django-prilozheniem-v-web/","text":"Disqus — веб-сервис, который предоставляет возможность добавить форму для интернет-обсуждений и комментариев на сайт пользователя использует Python. Сервис использует Python (Django). По заверениям Disqus - они являются самым крупным django приложением в web. https://disqus.com/"},{"tags":"Разное","title":"TIOBE за июль 2015: Python находится на 5-ом месте","url":"http://pynsk.ru/posts/2015/июля/24/tiobe-za-iiul-2015-python-nakhoditsia-na-5-om-meste/","text":"По рейтингу TIOBE за июль 2015 Python находится на 5-ом месте, год назад был на 8-ом. http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"},{"tags":"Внутренности Python","title":"Интересно как работает Python?","url":"http://pynsk.ru/posts/2015/июля/23/interesno-kak-rabotaet-python/","text":"Интересно как работает Python? Рекомендуем изучить материалы: Интерпретатор Python: о чём думает змея? (часть I-III) - http://habrahabr.ru/post/206420/ Python изнутри. Введение - habrahabr.ru/company/buruki/blog/189972/ Python изнутри. Объекты. Голова - habrahabr.ru/company/buruki/blog/189986/ Python изнутри. Объекты. Хвост - habrahabr.ru/company/buruki/blog/190336/ Python изнутри. Структуры процесса - habrahabr.ru/company/buruki/blog/191032/"},{"tags":"Внутренности Python","title":"Как работает Python?","url":"http://pynsk.ru/posts/2015/июля/23/kak-rabotaet-python/","text":"Как работает Python, что такое интерпретатор, как работает компилятор и что такое байт-код, далее расскажу о виртуальной машине (PVM) и о производительности Python. Также о альтернативных реализациях интерпретатора. http://adw0rd.com/2009/08/22/python-howto-work/"},{"tags":"Полезные модули","title":"Django DB Mailer - батарейка для отправки email","url":"http://pynsk.ru/posts/2015/июля/22/django-db-mailer-batareika-dlia-otpravki-email/","text":"В подавляющем большинстве проектов используется отправка сообщений на почтовые адреса клиентов/админов/отделов. На сколько утомительно каждый раз создавать шаблоны на файловой системе, задавать сигналы, использовать часто дублирующийся код для рендеринга и отправки. В конечном итоге встают задачи о фоновой отправке, об изменениях отправителя, приоритизации, повторной отправке сообщения в случае неудачи, частом редактировании по просьбе клиента/маркетологов, прикреплению к письму стандартных файлов в виде каких-то инструкций по применению продукта, или же стандартных документов, отчетов по клиентам, переводам и тд и тп. В больших проектах часто необходимо визуально разделять шаблоны на категории, для фильтрации, дабы не тратить время на редактирование менее важных шаблонов при рефакторинге, и во избежание путаницы с новым контентом, или при работе со старым. Для подобных решений существует простая батарейка, призванная решить большинство подобных проблем, и избавить Вас от лишнего кода, сопровождения и нервотрепки. http://habrahabr.ru/post/253445/"},{"tags":"Полезные модули","title":"requests","url":"http://pynsk.ru/posts/2015/июля/22/requests/","text":"requests - http://docs.python-requests.org/en/latest/ - универсальный (для python2, python3) модуль для создание HTTP запросов. Данный модуль позволяет очень просто послать запрос, получить данные. >>> r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' )) >>> r . status_code 200 >>> r . headers [ 'content-type' ] 'application/json; charset=utf8' >>> r . encoding 'utf-8' >>> r . text u'{\"type\":\"User\"...' >>> r . json () { u'private_gists' : 419 , u'total_private_repos' : 77 , ... }"},{"tags":"Тесты тесты тесты","title":"unittest - основной инструмент тестирования","url":"http://pynsk.ru/posts/2015/июля/21/unittest-osnovnoi-instrument-testirovaniia/","text":"Одним из основных инструментов для тестирования в Python - unittest Это стандартный модуль для реализации юнит-тестов на Python. Unittest это порт JUnit с Java, иными словами ООП стиль, что весьма удобно для тестирования и процедур, и классов. Возможностей в данном модуле довольно много: проверки (assert*), декораторы, позволяющие пропустить отдельный тест (@skip, @skipIf) или обозначить сломанные тесты (@expectedFailure) При написании тестов надо исходит из следующих принципов: Работа теста не должна зависеть от результатов работы других тестов. - Тест должен использовать данные, специально для него подготовленные, и никакие другие. - Тест не должен требовать ввода от пользователя - Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично перекрывающие тесты. - Нашли баг -> напиши тест - Тесты надо поддерживать в рабочем состоянии - Модульные тесты не должны проверять производительность сущности (класса, функции) - Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет себя адекватно при некорректных данных."},{"tags":"Тесты тесты тесты","title":"unittest","url":"http://pynsk.ru/posts/2015/июля/21/unittest/","text":"unittest - https://docs.python.org/3.5/library/unittest.html - фреймворк для написания юнит-тестов. unittest является частью стандартной поставки."},{"tags":"Синтаксис Python","title":"Генераторы списков","url":"http://pynsk.ru/posts/2015/июля/20/generatory-spiskov/","text":"Если вы использовали Python достаточно долго, вы должны были хотя бы слышать о понятии «list comprehensions». Это способ уместить цикл for, блок if и присваивание в одну строку. Генератор списков - яркий пример «синтаксического сахара». То есть конструкции, без которой легко можно обойтись, но с ней намного лучше :) Генераторы списков, как это не странно, предназначены для удобной обработки списков, к которой можно отнести и создание новых списков, и модификацию существующих. Допустим, нам необходимо получить список нечетных чисел, не превышающих 25. В принципе, только познакомившись с работой команды xrange решить эту проблему несложно. >>> res = [] >>> for x in xrange ( 1 , 25 , 2 ): ... res . append ( x ) ... >>> print res В общем-то, полученный результат — целиком нас устраивает всем, кроме длинной записи. тут-то на помощь и придет наш «сахарок». В самом простом виде, он обычно >>> res = [ x for x in xrange ( 1 , 25 , 2 )] >>> print res [ 1 , 3 , 5 , 7 , 9 , 11 , 13 , 15 , 17 , 19 , 21 , 23 ] В общем виде эта конструкция такова: python [stmt for var in iterable if predicate] По-мимо генератора списка есть синтаксический сахар - генератор словарей."},{"tags":"Разное","title":"Почему Python клёвый?","url":"http://pynsk.ru/posts/2015/июля/20/pochemu-python-kliovyi/","text":"Видео с конференции PyCon В видео докладчик рассказал о плюсах Python. О тех самых преимуществах, которые не надо обходить стороной. !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document);"}]}