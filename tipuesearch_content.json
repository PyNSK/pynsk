{"pages":[{"text":"This is the content of my super blog post.","url":"http://pynsk.ru/pages/my-super-post.html","title":"Заполнить страницу","tags":"Python"},{"text":"Для рисования векторных графиков (svg) подойдет библиотека pygal - http://pygal.org/ Данный модуль предоставляет широкий спектр возможностей, в частности можно нарисовать: Столбчатые диаграммы Линейные диаграммы XY диаграммы Круговые диаграммы Лепестковые диаграммы и другие","url":"http://pynsk.ru/posts/2015/авг./02/risovanie-svg-grafikov/","title":"Рисование svg графиков","tags":"Полезные модули"},{"text":"Статистический модуль теперь есть в стандартной библиотеке. Начиная с версии 3.4 в стандартной поставке Python появилось более продвинутое средство для работы с данными. Теперь нет необходимости писать руками методы average, median (вычисление среднего и медианы) и других. Ознакомьтесь с возможностями стандартного модуля: https://docs.python.org/3/library/statistics.html","url":"http://pynsk.ru/posts/2015/авг./02/statisticheskii-modul-v-standartnoi-biblioteke/","title":"Статистический модуль в стандартной библиотеке","tags":"Таинство стандартной библиотеки"},{"text":"Пишите под windows, да еще и с Win API? Python здесь тоже может помочь, ведь для него есть библиотека pywin32 (http://sourceforge.net/projects/pywin32/). Данная библиотека предоставляет все базовые примитивы для работы с WinAPI.","url":"http://pynsk.ru/posts/2015/авг./01/python-winapi/","title":"Python + winapi","tags":"Полезные библиотеки"},{"text":"Библиотека click ( http://click.pocoo.org/4/ ) позволяет с минимальными усилиями создать интерфейс командной строки. Создаете функцию, добавляете пару декораторов и готово. import click @click.command () @click.option ( '--count' , default = 1 , help = 'Number of greetings.' ) @click.option ( '--name' , prompt = 'Your name' , help = 'The person to greet.' ) def hello ( count , name ): ... А как вы создаете командные интерфейсы?","url":"http://pynsk.ru/posts/2015/авг./01/click/","title":"click","tags":"Полезные модули"},{"text":"Если вы широко используете JSON в своем проекте, то вам будет интересен DSL - JSL. JSL позволяет описывать модели, почти в какой-нибудь ORM, создавать объекты по этим моделям и как-то с ними работать. Интересный проект. https://github.com/aromanovich/jsl","url":"http://pynsk.ru/posts/2015/июля/31/json-dsl-jsl/","title":"JSON DSL - JSL","tags":"Полезные библиотеки"},{"text":"Python - язык общего назначения, может применяться где угодно. Не верите? На странице https://www.python.org/about/success/ представлены сферы и названия компаний, которые применяют этот язык. Впечатляет.","url":"http://pynsk.ru/posts/2015/июля/31/python-iazyk-obshchego-naznacheniia/","title":"Python - язык общего назначения","tags":"Разное"},{"text":"Возможно! Рассказ \"Управление памятью в real-time приложениях Python\" Антона Патрушева покажет как можно писать Python приложения с максимально быстрым откликом. https://events.yandex.ru/lib/talks/2075/","url":"http://pynsk.ru/posts/2015/июля/30/python-i-real-time/","title":"Python и real-time?","tags":"Hardcore Python"},{"text":"В последнее время любят сравнивать Python и R. Так давайте же почитаем сравнение этих двух языков. http://blog.dominodatalab.com/comparing-python-and-r-for-data-science/","url":"http://pynsk.ru/posts/2015/июля/30/sravnenie-r-i-python/","title":"Сравнение R и Python","tags":"Разное"},{"text":"Парсинг сайтов это вечная задача. Сайтов много, данных много и все они разные. Для задач парсинга существует великое разнообразие инструментов. В Python 3-ей версии появился стандартный модуль для создания асинхронных программ. И грех не воспользоваться данной возможностью. Примером парсинга на asyncio может послужить эта статья http://olegwock.net/blog/python/byistryiy-parsing-na-python-s-pomoshhyu-asyncio/","url":"http://pynsk.ru/posts/2015/июля/29/parsing-s-pomoshchiu-asyncio/","title":"Парсинг с помощью asyncio","tags":"Извлечение информации"},{"text":"Пишите web приложения? Тогда для вас не является новостью, что без API далеко не уедешь. Для фреймворка django существует несколько способов создать API за пару минут, да еще и с документацией. https://github.com/tomchristie/django-rest-framework https://github.com/marcgibbons/django-rest-swagger","url":"http://pynsk.ru/posts/2015/июля/29/django-rest-api/","title":"Django REST API","tags":"Пишем web-проекты"},{"text":"До сих путаетесь между функциями, методами, классами и объектами? Пора разобраться в этом. Данная статья расскажет, что такое Bound и UnBound методы, как можно в динамике добавлять поля в объект, как перегружать методы. http://0agr.ru/blog/2011/05/03/advanced-python-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B-%D0%B8-%D0%B8%D1%85-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B/","url":"http://pynsk.ru/posts/2015/июля/28/klassy-i-funktsii/","title":"Классы и функции","tags":"Синтаксис Python"},{"text":"Вы пишите тесты? Тогда вам знаком модуль mock (в Python3 находится в unittest). Это модуль, который позволяет сделать имитацию объекта. Это необходимо, когда пишите тесты на свой код, а этот код использует множество долгих приготовлений: сходить в БД, разобрать данные еще что-то. Вот в этом случае вы можете провести имитацию всех этих долгих приготовлений и сконцентрироваться на написании тестов для своего кода. В случае с файловой системой немного сложней. Вот надо какие-то файлы создавать,в них что-то писать. Засорять свою домашнюю директорию папками \"temp\"? Не обязательно, можно имитировать файловую систему с помощью mockfs. https://github.com/mockfs/mockfs","url":"http://pynsk.ru/posts/2015/июля/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/","title":"Имитация файловой системы с помощью mock","tags":"Тесты тесты тесты"},{"text":"Предположим, у нас есть задача - выдрать из крупного текстового файла (файла с логами) все IPv4 (адреса клиентов, например). Как это можно сделать? Хорошим инструментом для решения этой задачи являются регулярные выражения. Регулярное выражение — это последовательность символов, используемая для поиска и замены текста в строке или файле. Возможно, вы уже встречались с записями типа: <([a-z]+)[&#94;>]*(?<!/)> Большая вероятность, что это было регулярное выражение. Регулярные выражения - это мощный инструмент, который стоит изучить и осознать. Не надо запоминать все конструкции, достаточно понять принцип. Для погружения в эту тему, рекомендуем эти материалы: http://tproger.ru/translations/regular-expression-python/ http://qntm.org/files/re/re.html http://habrahabr.ru/post/115825/ http://pep8.ru/doc/dive-into-python-3/7.html","url":"http://pynsk.ru/posts/2015/июля/27/reguliarnye-vyrazheniia/","title":"Регулярные выражения","tags":"Таинство стандартной библиотеки"},{"text":"Стандартная библиотека Python отличается хорошей документацией и широким ассортиментом готовых решений. Python предоставляет без малого 68 встроенных функций: это получение модуля числа, бинарное и hex представления числа, различные преобразование типов, сложение, возведение в степень и многие другие. https://docs.python.org/3.5/library/functions.html А вы знали, что в Python всё является объектом? Даже число >>> dir ( 5 ) [ '__abs__' , '__add__' , '__and__' , .... , 'denominator' , 'imag' , 'numerator' , 'real' ]","url":"http://pynsk.ru/posts/2015/июля/27/vstroennye-funktsii-python/","title":"Встроенные функции Python","tags":"Таинство стандартной библиотеки"},{"text":"PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir. Функция scandir возвращает генератор, который содержит директории по пути. Польза scandir состоит в производительности. Теперь os.listdir и os.walk будут работать в 2-20 раз быстрее. Пример: функция, которая возвращает генератор с директориями начинающиеся с точки: def subdirs ( path ): \"\"\"Yield directory names not starting with '.' under given path.\"\"\" for entry in os . scandir ( path ): if entry . name . startswith ( '.' ) and entry . is_dir (): yield entry . name","url":"http://pynsk.ru/posts/2015/июля/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/","title":"PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir.","tags":"Таинство стандартной библиотеки"},{"text":"Родным модулем для построения GUI интерфейсов для Python программ является Tkinter. Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы. Данный курс - http://younglinux.info/tkinter.php - \"Создание GUI на Python с помощью библиотеки Tkinter\" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.).","url":"http://pynsk.ru/posts/2015/июля/25/tkinter/","title":"Tkinter","tags":"Полезные библиотеки"},{"text":"Язык brainfuck для хранения данных использует ячейки (по-хорошему бесконечное число ячеек) и состоит всего из восьми команд, поэтому выучить его будет легко. В этой статье показан интерпретатор brainfuck на Python http://pythonworld.ru/primery-programm/interpretator-brainfuck.html","url":"http://pynsk.ru/posts/2015/июля/25/interpretator-brainfuck-na-python/","title":"Интерпретатор brainfuck на Python","tags":"Python проекты"},{"text":"На странице Python-wiki представлен огромный список пакетов для создания GUI на Python https://wiki.python.org/moin/GuiProgramming","url":"http://pynsk.ru/posts/2015/июля/25/nabor-gui-bibliotek-dlia-python/","title":"Набор GUI библиотек для Python","tags":"Полезные библиотеки"},{"text":"Disqus — веб-сервис, который предоставляет возможность добавить форму для интернет-обсуждений и комментариев на сайт пользователя использует Python. Сервис использует Python (Django). По заверениям Disqus - они являются самым крупным django приложением в web. https://disqus.com/","url":"http://pynsk.ru/posts/2015/июля/24/disqus-samoe-krupnoe-django-prilozheniem-v-web/","title":"Disqus - самое крупное django приложением в web.","tags":"Python проекты"},{"text":"По рейтингу TIOBE за июль 2015 Python находится на 5-ом месте, год назад был на 8-ом. http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html","url":"http://pynsk.ru/posts/2015/июля/24/tiobe-za-iiul-2015-python-nakhoditsia-na-5-om-meste/","title":"TIOBE за июль 2015: Python находится на 5-ом месте","tags":"Разное"},{"text":"Интересно как работает Python? Рекомендуем изучить материалы: Интерпретатор Python: о чём думает змея? (часть I-III) - http://habrahabr.ru/post/206420/ Python изнутри. Введение - habrahabr.ru/company/buruki/blog/189972/ Python изнутри. Объекты. Голова - habrahabr.ru/company/buruki/blog/189986/ Python изнутри. Объекты. Хвост - habrahabr.ru/company/buruki/blog/190336/ Python изнутри. Структуры процесса - habrahabr.ru/company/buruki/blog/191032/","url":"http://pynsk.ru/posts/2015/июля/23/interesno-kak-rabotaet-python/","title":"Интересно как работает Python?","tags":"Внутренности Python"},{"text":"Как работает Python, что такое интерпретатор, как работает компилятор и что такое байт-код, далее расскажу о виртуальной машине (PVM) и о производительности Python. Также о альтернативных реализациях интерпретатора. http://adw0rd.com/2009/08/22/python-howto-work/","url":"http://pynsk.ru/posts/2015/июля/23/kak-rabotaet-python/","title":"Как работает Python?","tags":"Внутренности Python"},{"text":"В подавляющем большинстве проектов используется отправка сообщений на почтовые адреса клиентов/админов/отделов. На сколько утомительно каждый раз создавать шаблоны на файловой системе, задавать сигналы, использовать часто дублирующийся код для рендеринга и отправки. В конечном итоге встают задачи о фоновой отправке, об изменениях отправителя, приоритизации, повторной отправке сообщения в случае неудачи, частом редактировании по просьбе клиента/маркетологов, прикреплению к письму стандартных файлов в виде каких-то инструкций по применению продукта, или же стандартных документов, отчетов по клиентам, переводам и тд и тп. В больших проектах часто необходимо визуально разделять шаблоны на категории, для фильтрации, дабы не тратить время на редактирование менее важных шаблонов при рефакторинге, и во избежание путаницы с новым контентом, или при работе со старым. Для подобных решений существует простая батарейка, призванная решить большинство подобных проблем, и избавить Вас от лишнего кода, сопровождения и нервотрепки. http://habrahabr.ru/post/253445/","url":"http://pynsk.ru/posts/2015/июля/22/django-db-mailer-batareika-dlia-otpravki-email/","title":"Django DB Mailer - батарейка для отправки email","tags":"Полезные модули"},{"text":"requests - http://docs.python-requests.org/en/latest/ - универсальный (для python2, python3) модуль для создание HTTP запросов. Данный модуль позволяет очень просто послать запрос, получить данные. >>> r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' )) >>> r . status_code 200 >>> r . headers [ 'content-type' ] 'application/json; charset=utf8' >>> r . encoding 'utf-8' >>> r . text u'{\"type\":\"User\"...' >>> r . json () { u'private_gists' : 419 , u'total_private_repos' : 77 , ... }","url":"http://pynsk.ru/posts/2015/июля/22/requests/","title":"requests","tags":"Полезные модули"},{"text":"Одним из основных инструментов для тестирования в Python - unittest Это стандартный модуль для реализации юнит-тестов на Python. Unittest это порт JUnit с Java, иными словами ООП стиль, что весьма удобно для тестирования и процедур, и классов. Возможностей в данном модуле довольно много: проверки (assert*), декораторы, позволяющие пропустить отдельный тест (@skip, @skipIf) или обозначить сломанные тесты (@expectedFailure) При написании тестов надо исходит из следующих принципов: Работа теста не должна зависеть от результатов работы других тестов. - Тест должен использовать данные, специально для него подготовленные, и никакие другие. - Тест не должен требовать ввода от пользователя - Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично перекрывающие тесты. - Нашли баг -> напиши тест - Тесты надо поддерживать в рабочем состоянии - Модульные тесты не должны проверять производительность сущности (класса, функции) - Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет себя адекватно при некорректных данных.","url":"http://pynsk.ru/posts/2015/июля/21/unittest-osnovnoi-instrument-testirovaniia/","title":"unittest - основной инструмент тестирования","tags":"Тесты тесты тесты"},{"text":"unittest - https://docs.python.org/3.5/library/unittest.html - фреймворк для написания юнит-тестов. unittest является частью стандартной поставки.","url":"http://pynsk.ru/posts/2015/июля/21/unittest/","title":"unittest","tags":"Тесты тесты тесты"},{"text":"Если вы использовали Python достаточно долго, вы должны были хотя бы слышать о понятии «list comprehensions». Это способ уместить цикл for, блок if и присваивание в одну строку. Генератор списков - яркий пример «синтаксического сахара». То есть конструкции, без которой легко можно обойтись, но с ней намного лучше :) Генераторы списков, как это не странно, предназначены для удобной обработки списков, к которой можно отнести и создание новых списков, и модификацию существующих. Допустим, нам необходимо получить список нечетных чисел, не превышающих 25. В принципе, только познакомившись с работой команды xrange решить эту проблему несложно. >>> res = [] >>> for x in xrange ( 1 , 25 , 2 ): ... res . append ( x ) ... >>> print res В общем-то, полученный результат — целиком нас устраивает всем, кроме длинной записи. тут-то на помощь и придет наш «сахарок». В самом простом виде, он обычно >>> res = [ x for x in xrange ( 1 , 25 , 2 )] >>> print res [ 1 , 3 , 5 , 7 , 9 , 11 , 13 , 15 , 17 , 19 , 21 , 23 ] В общем виде эта конструкция такова: python [stmt for var in iterable if predicate] По-мимо генератора списка есть синтаксический сахар - генератор словарей.","url":"http://pynsk.ru/posts/2015/июля/20/generatory-spiskov/","title":"Генераторы списков","tags":"Синтаксис Python"},{"text":"Видео с конференции PyCon В видео докладчик рассказал о плюсах Python. О тех самых преимуществах, которые не надо обходить стороной. !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document);","url":"http://pynsk.ru/posts/2015/июля/20/pochemu-python-kliovyi/","title":"Почему Python клёвый?","tags":"Разное"}]}