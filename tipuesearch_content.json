{"pages":[{"text":"This is the content of my super blog post.","tags":"Python","title":"Заполнить страницу","url":"http://pynsk.ru/pages/my-super-post.html"},{"text":"PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir. Функция scandir возвращает генератор, который содержит директории по пути. Польза scandir состоит в производительности. Теперь os.listdir и os.walk будут работать в 2-20 раз быстрее. Пример: функция, которая возвращает генератор с директориями начинающиеся с точки: def subdirs ( path ): \"\"\"Yield directory names not starting with '.' under given path.\"\"\" for entry in os . scandir ( path ): if entry . name . startswith ( '.' ) and entry . is_dir (): yield entry . name","tags":"Таинство стандартной библиотеки","title":"PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir.","url":"http://pynsk.ru/posts/2015/июля/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/"},{"text":"Родным модулем для построения GUI интерфейсов для Python программ является Tkinter. Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы. Данный курс - http://younglinux.info/tkinter.php - \"Создание GUI на Python с помощью библиотеки Tkinter\" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.).","tags":"Полезные библиотеки","title":"Tkinter","url":"http://pynsk.ru/posts/2015/июля/25/tkinter/"},{"text":"Язык brainfuck для хранения данных использует ячейки (по-хорошему бесконечное число ячеек) и состоит всего из восьми команд, поэтому выучить его будет легко. В этой статье показан интерпретатор brainfuck на Python http://pythonworld.ru/primery-programm/interpretator-brainfuck.html","tags":"Python проекты","title":"Интерпретатор brainfuck на Python","url":"http://pynsk.ru/posts/2015/июля/25/interpretator-brainfuck-na-python/"},{"text":"На странице Python-wiki представлен огромный список пакетов для создания GUI на Python https://wiki.python.org/moin/GuiProgramming","tags":"Полезные библиотеки","title":"Набор GUI библиотек для Python","url":"http://pynsk.ru/posts/2015/июля/25/nabor-gui-bibliotek-dlia-python/"},{"text":"Disqus — веб-сервис, который предоставляет возможность добавить форму для интернет-обсуждений и комментариев на сайт пользователя использует Python. Сервис использует Python (Django). По заверениям Disqus - они являются самым крупным django приложением в web. https://disqus.com/","tags":"Python проекты","title":"Disqus - самое крупное django приложением в web.","url":"http://pynsk.ru/posts/2015/июля/24/disqus-samoe-krupnoe-django-prilozheniem-v-web/"},{"text":"По рейтингу TIOBE за июль 2015 Python находится на 5-ом месте, год назад был на 8-ом. http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html","tags":"Разное","title":"TIOBE за июль 2015: Python находится на 5-ом месте","url":"http://pynsk.ru/posts/2015/июля/24/tiobe-za-iiul-2015-python-nakhoditsia-na-5-om-meste/"},{"text":"Интересно как работает Python? Рекомендуем изучить материалы: Интерпретатор Python: о чём думает змея? (часть I-III) - http://habrahabr.ru/post/206420/ Python изнутри. Введение - habrahabr.ru/company/buruki/blog/189972/ Python изнутри. Объекты. Голова - habrahabr.ru/company/buruki/blog/189986/ Python изнутри. Объекты. Хвост - habrahabr.ru/company/buruki/blog/190336/ Python изнутри. Структуры процесса - habrahabr.ru/company/buruki/blog/191032/","tags":"Внутренности Python","title":"Интересно как работает Python?","url":"http://pynsk.ru/posts/2015/июля/23/interesno-kak-rabotaet-python/"},{"text":"Как работает Python, что такое интерпретатор, как работает компилятор и что такое байт-код, далее расскажу о виртуальной машине (PVM) и о производительности Python. Также о альтернативных реализациях интерпретатора. http://adw0rd.com/2009/08/22/python-howto-work/","tags":"Внутренности Python","title":"Как работает Python?","url":"http://pynsk.ru/posts/2015/июля/23/kak-rabotaet-python/"},{"text":"В подавляющем большинстве проектов используется отправка сообщений на почтовые адреса клиентов/админов/отделов. На сколько утомительно каждый раз создавать шаблоны на файловой системе, задавать сигналы, использовать часто дублирующийся код для рендеринга и отправки. В конечном итоге встают задачи о фоновой отправке, об изменениях отправителя, приоритизации, повторной отправке сообщения в случае неудачи, частом редактировании по просьбе клиента/маркетологов, прикреплению к письму стандартных файлов в виде каких-то инструкций по применению продукта, или же стандартных документов, отчетов по клиентам, переводам и тд и тп. В больших проектах часто необходимо визуально разделять шаблоны на категории, для фильтрации, дабы не тратить время на редактирование менее важных шаблонов при рефакторинге, и во избежание путаницы с новым контентом, или при работе со старым. Для подобных решений существует простая батарейка, призванная решить большинство подобных проблем, и избавить Вас от лишнего кода, сопровождения и нервотрепки. http://habrahabr.ru/post/253445/","tags":"Полезные модули","title":"Django DB Mailer - батарейка для отправки email","url":"http://pynsk.ru/posts/2015/июля/22/django-db-mailer-batareika-dlia-otpravki-email/"},{"text":"requests - http://docs.python-requests.org/en/latest/ - универсальный (для python2, python3) модуль для создание HTTP запросов. Данный модуль позволяет очень просто послать запрос, получить данные. >>> r = requests . get ( 'https://api.github.com/user' , auth = ( 'user' , 'pass' )) >>> r . status_code 200 >>> r . headers [ 'content-type' ] 'application/json; charset=utf8' >>> r . encoding 'utf-8' >>> r . text u'{\"type\":\"User\"...' >>> r . json () { u'private_gists' : 419 , u'total_private_repos' : 77 , ... }","tags":"Полезные модули","title":"requests","url":"http://pynsk.ru/posts/2015/июля/22/requests/"},{"text":"Одним из основных инструментов для тестирования в Python - unittest Это стандартный модуль для реализации юнит-тестов на Python. Unittest это порт JUnit с Java, иными словами ООП стиль, что весьма удобно для тестирования и процедур, и классов. Возможностей в данном модуле довольно много: проверки (assert*), декораторы, позволяющие пропустить отдельный тест (@skip, @skipIf) или обозначить сломанные тесты (@expectedFailure) При написании тестов надо исходит из следующих принципов: Работа теста не должна зависеть от результатов работы других тестов. - Тест должен использовать данные, специально для него подготовленные, и никакие другие. - Тест не должен требовать ввода от пользователя - Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично перекрывающие тесты. - Нашли баг -> напиши тест - Тесты надо поддерживать в рабочем состоянии - Модульные тесты не должны проверять производительность сущности (класса, функции) - Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет себя адекватно при некорректных данных.","tags":"Тесты тесты тесты","title":"unittest - основной инструмент тестирования","url":"http://pynsk.ru/posts/2015/июля/21/unittest-osnovnoi-instrument-testirovaniia/"},{"text":"unittest - https://docs.python.org/3.5/library/unittest.html - фреймворк для написания юнит-тестов. unittest является частью стандартной поставки.","tags":"Тесты тесты тесты","title":"unittest","url":"http://pynsk.ru/posts/2015/июля/21/unittest/"},{"text":"Если вы использовали Python достаточно долго, вы должны были хотя бы слышать о понятии «list comprehensions». Это способ уместить цикл for, блок if и присваивание в одну строку. Генератор списков - яркий пример «синтаксического сахара». То есть конструкции, без которой легко можно обойтись, но с ней намного лучше :) Генераторы списков, как это не странно, предназначены для удобной обработки списков, к которой можно отнести и создание новых списков, и модификацию существующих. Допустим, нам необходимо получить список нечетных чисел, не превышающих 25. В принципе, только познакомившись с работой команды xrange решить эту проблему несложно. >>> res = [] >>> for x in xrange ( 1 , 25 , 2 ): ... res . append ( x ) ... >>> print res В общем-то, полученный результат — целиком нас устраивает всем, кроме длинной записи. тут-то на помощь и придет наш «сахарок». В самом простом виде, он обычно >>> res = [ x for x in xrange ( 1 , 25 , 2 )] >>> print res [ 1 , 3 , 5 , 7 , 9 , 11 , 13 , 15 , 17 , 19 , 21 , 23 ] В общем виде эта конструкция такова: python [stmt for var in iterable if predicate] По-мимо генератора списка есть синтаксический сахар - генератор словарей.","tags":"Синтаксис Python","title":"Генераторы списков","url":"http://pynsk.ru/posts/2015/июля/20/generatory-spiskov/"},{"text":"Видео с конференции PyCon В видео докладчик рассказал о плюсах Python. О тех самых преимуществах, которые не надо обходить стороной. !function(a){ var b=\"embedly-platform\",c=\"script\"; if(!a.getElementById(b)){ var d=a.createElement(c); d.id=b; d.src=(\"https:\"===document.location.protocol?\"https\":\"http\")+\"://cdn.embedly.com/widgets/platform.js\"; var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)} }(document);","tags":"Видео","title":"Почему Python клёвый?","url":"http://pynsk.ru/posts/2015/июля/20/pochemu-python-kliovyi/"}]}