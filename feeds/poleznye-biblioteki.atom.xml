<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/poleznye-biblioteki.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-08-26T08:00:00+06:00</updated><entry><title>Полезные библиотеки: генерация html с помощью Yattag</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./26/poleznye-biblioteki-generatsiia-html-s-pomoshchiu-yattag/" rel="alternate"></link><updated>2015-08-26T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-26:posts/2015/авг./26/poleznye-biblioteki-generatsiia-html-s-pomoshchiu-yattag/</id><summary type="html">&lt;p&gt;В PyPi репозитории не один шаблонизатор HTML. Но далеко не всегда хочется тащить его за собой.
В этом случае нам поможет модуль Yattag - это библиотека (DSL по сути), которая позволяет в Python-way формате писать HTML/XML файлы&lt;/p&gt;
&lt;p&gt;Ознакомьтесь с туториалом:
&lt;a href="http://www.yattag.org/#tutorial"&gt;http://www.yattag.org/#tutorial&lt;/a&gt;&lt;/p&gt;</summary><category term="html"></category><category term="yattag"></category></entry><entry><title>Полезные библиотеки: plot.ly (plotly)</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./22/poleznye-biblioteki-plotly-plotly/" rel="alternate"></link><updated>2015-08-22T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-22:posts/2015/авг./22/poleznye-biblioteki-plotly-plotly/</id><summary type="html">&lt;p&gt;Понятное представление информации - это вечная задача. Причем она свойственна всем.&lt;/p&gt;
&lt;p&gt;Хочется упомянуть графики. Вот собрали мы данные, задача была не простая, а теперь надо их представить. Графики бывают разных типов, их очень много. Даже если какой-то график сделали, а как поделиться? Можно скинуть картинку, да только придется потом с "линейкой" вычислять значения, а можно пойти по другому пути - https://plot.ly/python/. &lt;/p&gt;
&lt;p&gt;ploy.ly предоставляет возможно создать динамический график, например, &lt;a href="https://plot.ly/python/dashboard/"&gt;https://plot.ly/python/dashboard/&lt;/a&gt;&lt;br /&gt;
plot.ly позволяет создавать самые разные графики, которые будут выглядеть как живые - можно будет методом тыка узнать значение графика в точке, покрутить, повертеть график.&lt;/p&gt;</summary><category term="график"></category><category term="plotly"></category></entry><entry><title>Полезные библиотеки: numpy</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./22/poleznye-biblioteki-numpy/" rel="alternate"></link><updated>2015-08-22T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-22:posts/2015/авг./22/poleznye-biblioteki-numpy/</id><summary type="html">&lt;p&gt;NumPy — это библиотека языка Python, добавляющая поддержку больших многомерных массивов и матриц, вместе с большой библиотекой высокоуровневых (и очень быстрых) математических функций для операций с этими массивами.&lt;/p&gt;
&lt;p&gt;В чем же "фишка" NumPy вы можете спросить. &lt;/p&gt;
&lt;p&gt;Основным объектом NumPy является однородный многомерный массив (в numpy называется numpy.ndarray). Это многомерный массив элементов (обычно чисел), одного типа.&lt;/p&gt;
&lt;p&gt;Здесь можно подчеркнуть &lt;em&gt;одного типа&lt;/em&gt;. Эта существенная деталь позволяет заметно ускорить работу с такими объектами. Зная, что данный объект имеет только, скажем, целые числа, то не будут производится проверки типов. Плюс к этому - уменьшается общий объем памяти для хранения таких объектов.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonworld.ru/numpy/1.html"&gt;http://pythonworld.ru/numpy/1.html&lt;/a&gt;
&lt;a href="http://www.numpy.org/"&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="numpy"></category></entry><entry><title>Python и асинхронные задачи</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./16/python-i-asinkhronnye-zadachi/" rel="alternate"></link><updated>2015-08-16T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-16:posts/2015/авг./16/python-i-asinkhronnye-zadachi/</id><summary type="html">&lt;p&gt;Celery — распределенная очередь заданий
И так, что же умеет Celery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Выполнять задания асинхронно или синхронно&lt;/li&gt;
&lt;li&gt;Выполнять периодические задания(умная замена crond)&lt;/li&gt;
&lt;li&gt;Выполнять отложенные задания&lt;/li&gt;
&lt;li&gt;Распределенное выполнение (может быть запущен на N серверах)&lt;/li&gt;
&lt;li&gt;В пределах одного worker'а возможно конкурентное выполнение нескольких задач(одновременно)&lt;/li&gt;
&lt;li&gt;Выполнять задание повторно, если вылез exception&lt;/li&gt;
&lt;li&gt;Ограничивать количество заданий в единицу времени(rate limit, для задания или глобально)&lt;/li&gt;
&lt;li&gt;Routing заданий(какому worker'у что делать)&lt;/li&gt;
&lt;li&gt;Несложно мониторить выполнение заданий&lt;/li&gt;
&lt;li&gt;Выполнять подзадания&lt;/li&gt;
&lt;li&gt;Присылать отчеты об exception'ах на email&lt;/li&gt;
&lt;li&gt;Проверять выполнилось ли задание(удобно для построения Ajax приложений, где юзер ждет факта завершения)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Применение очередей задач широкое - если у вас есть задачи, которые можно выполнить не прям сейчас, а чуть позже - то стоит использовать. Примеры таких задач - парсинг RSS, отправка Email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="celery"></category></entry><entry><title>Рисование графиков на Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./15/risovanie-grafikov-na-python/" rel="alternate"></link><updated>2015-08-15T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-15:posts/2015/авг./15/risovanie-grafikov-na-python/</id><summary type="html">&lt;p&gt;Графики бывают совсем разные. Де-факто стандартом в питоне для построения графиков является matplotlib. Это такой комбайн, который умеет очень много, даже 3Д графики. &lt;/p&gt;
&lt;p&gt;Matplotlib написан и поддерживался в основном Джоном Хантером (англ. John Hunter) и распространяется на условиях BSD-подобной лицензии. Генерируемые в различных форматах изображения могут быть использованы в интерактивной графике, в научных публикациях, графическом интерфейсе пользователя, веб-приложениях, где требуется построение диаграмм.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://matplotlib.org/"&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="график"></category><category term="matplotlib"></category></entry><entry><title>Python + GUI == PyQt</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./08/python-gui-pyqt/" rel="alternate"></link><updated>2015-08-08T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-08:posts/2015/авг./08/python-gui-pyqt/</id><summary type="html">&lt;p&gt;Qt - это инструментарий для разработки на C++, который предоставляет огромный спектр возможностей: от рисования GUI, до написания низкоуровневых серверов. 
Часто Qt применяют для создания GUI, в том числе в интерактивном режиме - можно перемещать виджеты на формы.
Qt имеет отличную докумементацию, а также имеет привязку для Python - PyQt и PySide. (вторая еще с Qt5 не умеет работать)&lt;/p&gt;
&lt;p&gt;Используя PyQt можно нарисовать формочку в редакторе, а затем буквально одной строчкой начать писать логику.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PyQt"&gt;https://wiki.python.org/moin/PyQt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.su/Документации/ВведениеВСредуPyQt4"&gt;http://wiki.python.su/Документации/ВведениеВСредуPyQt4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Python + winapi</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./01/python-winapi/" rel="alternate"></link><updated>2015-08-01T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-01:posts/2015/авг./01/python-winapi/</id><summary type="html">&lt;p&gt;Пишите под windows, да еще и с Win API? Python здесь тоже может помочь, ведь для него есть библиотека pywin32 (http://sourceforge.net/projects/pywin32/). Данная библиотека предоставляет все базовые примитивы для работы с WinAPI.&lt;/p&gt;</summary><category term="winapi"></category></entry><entry><title>JSON DSL - JSL</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/31/json-dsl-jsl/" rel="alternate"></link><updated>2015-07-31T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-31:posts/2015/июля/31/json-dsl-jsl/</id><summary type="html">&lt;p&gt;Если вы широко используете JSON в своем проекте, то вам будет интересен DSL - JSL.
JSL позволяет описывать модели, почти в какой-нибудь ORM, создавать объекты по этим моделям и как-то с ними работать.
Интересный проект.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aromanovich/jsl"&gt;https://github.com/aromanovich/jsl&lt;/a&gt;&lt;/p&gt;</summary><category term="dsl"></category><category term="json"></category></entry><entry><title>Tkinter</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/tkinter/" rel="alternate"></link><updated>2015-07-25T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/tkinter/</id><summary type="html">&lt;p&gt;Родным модулем для построения GUI интерфейсов для Python программ является Tkinter.
Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы.&lt;/p&gt;
&lt;p&gt;Данный курс - &lt;a href="http://younglinux.info/tkinter.php"&gt;http://younglinux.info/tkinter.php&lt;/a&gt; - "Создание GUI на Python с помощью библиотеки Tkinter" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.).&lt;/p&gt;</summary><category term="GUI"></category><category term="интерфейс"></category><category term="tkinter"></category></entry><entry><title>Набор GUI библиотек для Python</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/nabor-gui-bibliotek-dlia-python/" rel="alternate"></link><updated>2015-07-25T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/nabor-gui-bibliotek-dlia-python/</id><summary type="html">&lt;p&gt;На странице Python-wiki представлен огромный список пакетов для создания GUI на Python
&lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;https://wiki.python.org/moin/GuiProgramming&lt;/a&gt;&lt;/p&gt;</summary><category term="GUI"></category><category term="интерфейс"></category></entry></feed>