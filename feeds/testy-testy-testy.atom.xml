<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/testy-testy-testy.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-07-28T08:00:00+06:00</updated><entry><title>Имитация файловой системы с помощью mock</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/" rel="alternate"></link><updated>2015-07-28T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-28:posts/2015/июля/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/</id><summary type="html">&lt;p&gt;Вы пишите тесты? Тогда вам знаком модуль mock (в Python3 находится в unittest). Это модуль, который позволяет сделать имитацию объекта.&lt;/p&gt;
&lt;p&gt;Это необходимо, когда пишите тесты на свой код, а этот код использует множество долгих приготовлений: сходить в БД, разобрать данные еще что-то. Вот в этом случае вы можете провести имитацию всех этих долгих приготовлений и сконцентрироваться на написании тестов для своего кода.&lt;/p&gt;
&lt;p&gt;В случае с файловой системой немного сложней. Вот надо какие-то файлы создавать,в них что-то писать. Засорять свою домашнюю директорию папками "temp"? Не обязательно, можно имитировать файловую систему с помощью mockfs.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mockfs/mockfs"&gt;https://github.com/mockfs/mockfs&lt;/a&gt;&lt;/p&gt;</summary><category term="тест"></category><category term="mock"></category><category term="test"></category></entry><entry><title>unittest - основной инструмент тестирования</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/21/unittest-osnovnoi-instrument-testirovaniia/" rel="alternate"></link><updated>2015-07-21T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-21:posts/2015/июля/21/unittest-osnovnoi-instrument-testirovaniia/</id><summary type="html">&lt;p&gt;Одним из основных инструментов для тестирования в Python - unittest&lt;/p&gt;
&lt;p&gt;Это стандартный модуль для реализации юнит-тестов на Python.
Unittest это порт JUnit с Java, иными словами ООП стиль, что весьма удобно для тестирования и процедур, и классов.&lt;/p&gt;
&lt;p&gt;Возможностей в данном модуле довольно много: проверки (assert*), декораторы, позволяющие пропустить отдельный тест (@skip, @skipIf) или обозначить сломанные тесты (@expectedFailure)&lt;/p&gt;
&lt;p&gt;При написании тестов надо исходит из следующих принципов:&lt;/p&gt;
&lt;p&gt;Работа теста не должна зависеть от результатов работы других тестов.
- Тест должен использовать данные, специально для него подготовленные, и никакие другие.
- Тест не должен требовать ввода от пользователя
- Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично перекрывающие тесты.
- Нашли баг -&amp;gt; напиши тест
- Тесты надо поддерживать в рабочем состоянии
- Модульные тесты не должны проверять производительность сущности (класса, функции)
- Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет себя адекватно при некорректных данных.&lt;/p&gt;</summary><category term="тесты"></category><category term="test"></category><category term="unittest"></category></entry><entry><title>unittest</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/21/unittest/" rel="alternate"></link><updated>2015-07-21T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-21:posts/2015/июля/21/unittest/</id><summary type="html">&lt;p&gt;unittest - https://docs.python.org/3.5/library/unittest.html - фреймворк для написания юнит-тестов.
unittest является частью стандартной поставки.&lt;/p&gt;</summary><category term="тесты"></category><category term="test"></category><category term="unittest"></category></entry></feed>