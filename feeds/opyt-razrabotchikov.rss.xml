<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/opyt-razrabotchikov.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 27 Nov 2015 18:00:00 +0600</lastBuildDate><item><title>Опыт разработчиков: сборники ссылок</title><link>http://pynsk.ru/posts/2015/Nov/27/opyt-razrabotchikov-sborniki-ssylok/</link><description>&lt;p&gt;Наверняка вы встречались с awesome-LANGUAGE списками. Это набор ссылок на интересные библиотеки/статьи/книги/видео по языкам программирования.&lt;/p&gt;
&lt;p&gt;Таких списков настолько много, что даже сделали список - awesome-awesomeness (&lt;a href="https://github.com/bayandin/awesome-awesomeness"&gt;https://github.com/bayandin/awesome-awesomeness&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Но даже в нем не все есть про Python, приведу список интересных списков:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vinta/awesome-python"&gt;https://github.com/vinta/awesome-python&lt;/a&gt; - самый крупный awesome-список про Python (http://awesome-python.com/)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Friz-zy/awesome-europython2015"&gt;https://github.com/Friz-zy/awesome-europython2015&lt;/a&gt; - конспект с EuroPython 2015. Множество ссылок на доклады, компании, статьи.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/metaperl/python-oop"&gt;https://github.com/metaperl/python-oop&lt;/a&gt; - ссылки на расширения Python. Эти расширения упрощают написание ООП программ на Python&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awesome-django.com/"&gt;http://awesome-django.com/&lt;/a&gt; набор интересных модулей для Django - на все случаи жизни&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/s16h/py-must-watch"&gt;https://github.com/s16h/py-must-watch&lt;/a&gt; - набор докладов, которые необходимо посмотреть всем&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JanVanRyswyck/awesome-talks"&gt;https://github.com/JanVanRyswyck/awesome-talks&lt;/a&gt; - набор докладов по Python&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 27 Nov 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-11-27:posts/2015/Nov/27/opyt-razrabotchikov-sborniki-ssylok/</guid><category>awesome</category><category>список</category><category>python</category><category>ссылка</category></item><item><title>Опыт разработчиков: использование переменной _</title><link>http://pynsk.ru/posts/2015/Oct/16/opyt-razrabotchikov-ispolzovanie-peremennoi-_/</link><description>&lt;p&gt;Хорошие имена переменных - это признак хорошего кода. 
Для циклов часто используют одно-буквенные переменные, для временных переменных тоже короткие, для глобальных - ЗАГЛАВНЫЕ. Есть и другие рекомендации. Все они написаны кровью из глаз разработчиков.&lt;/p&gt;
&lt;p&gt;Перейдем к заголовку и сразу пример:
Пускай есть функция, которая возвращает 3 значения.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Функция возвращает три значения, а нам в данном кусе кода необходимо только 2, а может одно? Пускай среднее. Куда "потерять" первую и третью переменную?&lt;/p&gt;
&lt;p&gt;В этом случае может однобуквенная переменная &lt;code&gt;_&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Что произошло? Мы сохранили среднее значение в переменную value, а два других в _.&lt;br /&gt;
Переменная с названием _ это такая же как и value, ничем не примечательна кроме названия. Оно как бы пустое, очень короткое, мало внимания привлекает. Рекомендуем использовать для значений, которые используются единожды в коде.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 16 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-16:posts/2015/Oct/16/opyt-razrabotchikov-ispolzovanie-peremennoi-_/</guid><category>опыт</category></item><item><title>Опыт разработчиков: замыкания (closure). Зачем и почему.</title><link>http://pynsk.ru/posts/2015/Oct/08/opyt-razrabotchikov-zamykaniia-closure-zachem-i-pochemu/</link><description>&lt;p&gt;В синтаксисе Python один и тот же символ или конструкция часто используется для разных целей
Возможно вы встречались с подобным кодом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# inner_func замкнуло в себе х&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner_func&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Похож на декоратор. Это называется замыканием. Это более общий случай декоратора.
Смысл замыкания состоит в том, что определение функции "замораживает" окружающий её контекст на момент определения. Это может делаться различными способами, например, за счёт параметризации создания функции&lt;/p&gt;
&lt;p&gt;Такой подход позволяет:
Устранить жестко кодированные константы
Убрать глобальные переменные из кода
Увеличить производительность
Если первые два пункта весьма понятны, то третий поясню. В Python загрузка переменных в SCOPE (локальную область) долгий процесс (сравнительно), поэтому чем реже это делается - тем быстрее код. 
Пример: функция, которая делает insert в базу данных. Можно объявить коннект в замыкании и использовать.&lt;/p&gt;
&lt;p&gt;Есть один нюанс. В Питоне замкнутые переменные доступны только для чтения. Чтобы обойти такое ограничение, нужно замыкать переменные в изменяемые переменные, например, в список. Сами замкнутые переменные нельзя будет перезаписывать, а вот содержимое контейнера - пожалуйста.&lt;/p&gt;
&lt;p&gt;Замкнемся на ссылки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jetfix.ru/post/zamykaniya-v-python-chto-eto-i-s-chem-ih-edyat"&gt;http://blog.jetfix.ru/post/zamykaniya-v-python-chto-eto-i-s-chem-ih-edyat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/ru/library/l-python_details_03/"&gt;https://www.ibm.com/developerworks/ru/library/l-python_details_03/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 08 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-08:posts/2015/Oct/08/opyt-razrabotchikov-zamykaniia-closure-zachem-i-pochemu/</guid><category>замыкание</category><category>closure</category></item><item><title>Опыт разработчиков: основы декларативной магии</title><link>http://pynsk.ru/posts/2015/Sep/25/opyt-razrabotchikov-osnovy-deklarativnoi-magii/</link><description>&lt;p&gt;&lt;img alt="embed" src="http://www.youtube.com/watch?v=luhyEER7_KM" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 25 Sep 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-25:posts/2015/Sep/25/opyt-razrabotchikov-osnovy-deklarativnoi-magii/</guid><category>опыт</category><category>видео</category><category>декларативный язык</category><category>магия</category></item><item><title>Опыт разработчиков: соглашения о кодировании</title><link>http://pynsk.ru/posts/2015/Sep/25/opyt-razrabotchikov-soglasheniia-o-kodirovanii/</link><description>&lt;p&gt;В обществе существуют различные соглашения. Соглашения рождаются не просто так, а для того чтобы о чем-то условится и начать создавать.&lt;/p&gt;
&lt;p&gt;Для разработчика важным является соглашение о кодировании. Это своего рода свод "законов", которые принимает новый разработчик, когда погружается в проект. Чаще всего такие законы очевидны и естественны.&lt;/p&gt;
&lt;p&gt;Возьмем пример - длина строки не более 79 символов. В свое время дисплеи содержали лишь 80 столбцов, поэтому было удобно, когда код помещался на экран.
Подобные рекомендации или "законы" присущи любому популярному языку. Приглашаю с ними ознакомится по ссылке  &lt;a href="https://github.com/SalGnt/cscs"&gt;https://github.com/SalGnt/cscs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P.S. PEP8&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="http://i.imgur.com/66ON9pI.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 25 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-25:posts/2015/Sep/25/opyt-razrabotchikov-soglasheniia-o-kodirovanii/</guid></item><item><title>Опыт разработчиков: Работа с ошибками. Как ловить исключения и что потом с ними делать</title><link>http://pynsk.ru/posts/2015/Sep/15/opyt-razrabotchikov-rabota-s-oshibkami-kak-lovit-iskliucheniia-i-chto-potom-s-nimi-delat/</link><description>&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/hzVECcMI8ys?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 15 Sep 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-15:posts/2015/Sep/15/opyt-razrabotchikov-rabota-s-oshibkami-kak-lovit-iskliucheniia-i-chto-potom-s-nimi-delat/</guid><category>исключение</category><category>ошибка</category></item><item><title>Опыт разработчиков: assert как средство для валидации</title><link>http://pynsk.ru/posts/2015/Sep/15/opyt-razrabotchikov-assert-kak-sredstvo-dlia-validatsii/</link><description>&lt;p&gt;Опыт разработчиков: assert как средство для валидации&lt;/p&gt;
&lt;p&gt;Хочется сегодня осветить такой элемент синтаксиса как assert. 
assert - это специальная конструкция, позволяющая проверять предположения о значениях произвольных данных в произвольном месте программы.&lt;/p&gt;
&lt;p&gt;Какая же польза от этой проверки?
Представим что мы что-то пишем код, который получает данные из Базы Данных, производит обработку данных и загружает результат обратно. По замыслу этого кода мы должны положить в базу столько же данных сколько и получили. 
Но так как мы написали код с ошибками (случайно), то количество данных не совпадает. И что же случится?&lt;/p&gt;
&lt;p&gt;В этом случае очень хорошо себя показывает assert. Эта конструкция проверят данные и в случае не соответствия ожиданиям - бросает AssertException.&lt;/p&gt;
&lt;p&gt;Примеры кода:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not found command&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not valid command&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 15 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-15:posts/2015/Sep/15/opyt-razrabotchikov-assert-kak-sredstvo-dlia-validatsii/</guid><category>assert</category><category>тест</category></item><item><title>Опыт разработчиков: файл requirements.txt в каждый проект</title><link>http://pynsk.ru/posts/2015/Sep/04/opyt-razrabotchikov-fail-requirementstxt-v-kazhdyi-proekt/</link><description>&lt;p&gt;Первой проблемой при поддержке старых проектов является понять, как запустить его. 
Чтобы немного упростить эту задачу разработчики используют pip и файл requirements.txt. В этом файле записываются все необходимые для работы библиотеки и, что самое главное, указывают версии этих библиотек. &lt;/p&gt;
&lt;p&gt;Имея такой файл настройка окружения для старта проекта может состоять из одной команды:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 04 Sep 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-04:posts/2015/Sep/04/opyt-razrabotchikov-fail-requirementstxt-v-kazhdyi-proekt/</guid><category>pip</category><category>requirements.txt</category><category>requirements</category></item><item><title>Опыт разработчиков: пишем совместимый код (Python 2 и 3)</title><link>http://pynsk.ru/posts/2015/Aug/25/opyt-razrabotchikov-pishem-sovmestimyi-kod-python-2-i-3/</link><description>&lt;p&gt;Python 3 вышел в 2008 году, однако, до сих пор не все перешли на новую версию. Раньше основными аргументами, чтобы не начинать новые проекты на Python были - библиотеки не готовы к использованию, нет особых фич.&lt;/p&gt;
&lt;p&gt;Первое уже вполне решено - &lt;a href="https://python3wos.appspot.com/"&gt;https://python3wos.appspot.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А второе, начиная с Python 3.3 уже слабо актуально - много новых фич введено.&lt;/p&gt;
&lt;p&gt;Поэтому теперь актуально писать совместимый код. Для наиболее легкого написания кода одинаково работающего как в Python 2.6+ так и в Python 3.* рекомендуется использовать библиотеку six.&lt;/p&gt;
&lt;p&gt;В ней собрано большее количество инструментов позволяющих писать кросверсионный код для Python 2.x-3.x. Для нахождения мест подлежащих изменению рекомендуется воспользоваться утилитами 2to3 или python-modernize.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythonhosted.org/six/"&gt;https://pythonhosted.org/six/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/2.7/library/2to3.html"&gt;http://docs.python.org/2.7/library/2to3.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/python-modernize"&gt;https://github.com/mitsuhiko/python-modernize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 25 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-25:posts/2015/Aug/25/opyt-razrabotchikov-pishem-sovmestimyi-kod-python-2-i-3/</guid><category>python2</category><category>python3</category></item><item><title>Опыт разработчиков: "Перестаньте писать классы"</title><link>http://pynsk.ru/posts/2015/Aug/13/opyt-razrabotchikov-perestante-pisat-klassy/</link><description>&lt;p&gt;Признак того, что объект не должен быть классом — если в нём всего 2 метода, и один из них — инициализация, &lt;code&gt;__init__&lt;/code&gt;. Каждый раз видя это, подумайте: «наверное, мне нужна просто одна функция».&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/140581/"&gt;http://habrahabr.ru/post/140581/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/143620/"&gt;http://habrahabr.ru/post/143620/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 13 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-13:posts/2015/Aug/13/opyt-razrabotchikov-perestante-pisat-klassy/</guid></item></channel></rss>