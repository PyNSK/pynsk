<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/testy-testy-testy.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 08 Sep 2015 10:00:00 +0600</lastBuildDate><item><title>Тесты тесты тесты: coverage - узнаем сколько процентов кода покрыто тестами</title><link>http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./08/testy-testy-testy-coverage-uznaem-skolko-protsentov-koda-pokryto-testami/</link><description>&lt;p&gt;Тесты тесты тесты: coverage - узнаем сколько процентов кода покрыто тестами&lt;/p&gt;
&lt;p&gt;Юнит-тесты хороши, когда покрывают весь ключевой код. Однако если проект чуть больше, чем "Hello, world!", то оценить степень покрытия весьма проблематично. Существуют инструменты, которые помогают это делать. Например - coverage.py - модуль Неда Бачелдера.&lt;/p&gt;
&lt;p&gt;coverage.py - написан на основе стандартной библлиотеки, может использоваться как из командной строки, так и из кода (как библиотека). Плюс к этому, он может выдавать как суммарный результат (в процентах), так и анотированный (т.е. копия исходного файла, в котором протестированная строка помечается &amp;gt;, не протестированная - !).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nedbat/coveragepy"&gt;https://github.com/nedbat/coveragepy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 08 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-08:posts/2015/сент./08/testy-testy-testy-coverage-uznaem-skolko-protsentov-koda-pokryto-testami/</guid><category>тест</category><category>coverage</category></item><item><title>Тесты тесты тесты: doctest</title><link>http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./01/testy-testy-testy-doctest/</link><description>&lt;p&gt;Тесты можно писать прям в коде, а точнее в docstring.&lt;/p&gt;
&lt;p&gt;Модуль doctest ищет куски текста, которые выглядят как интерактивные сессии Python и затем выполняет эти сессии, чтобы проверить, что они работают точно так же, как показано. &lt;/p&gt;
&lt;p&gt;Есть несколько стандартных причин, чтобы использовать doctest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Для того, чтобы проверить актуальность строк документации, убедившись, что все интерактивные примеры работают именно так, как задокументировано.&lt;/li&gt;
&lt;li&gt;Чтобы организовать регрессионное тестирование, проверяя, что интерактивные примеры из тестового файла или тестового объекта работают как ожидается.&lt;/li&gt;
&lt;li&gt;Чтобы написать руководство для пакета, иллюстрированное примерами ввода-вывода. В зависимости от того, на что обращается внимание - на примеры или на пояснительный текст, это можно назвать либо “литературным тестированием”, либо “исполняемой документацией”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Существует отличная статья про doctest - &lt;a href="http://python-lab.ru/documentation/27/stdlib/doctest.html"&gt;http://python-lab.ru/documentation/27/stdlib/doctest.html&lt;/a&gt;, поэтому здесь повторяться не буду.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 01 Sep 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-01:posts/2015/сент./01/testy-testy-testy-doctest/</guid><category>test</category><category>тест</category><category>doctest</category></item><item><title>Тесты тесты тесты: nose</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./18/testy-testy-testy-nose/</link><description>&lt;p&gt;nose — это инструмент для прогона тестов посредством unittest (и doctest, с ключом --with-doctest). Имеет также собственное API, использовать которое необязательно. 
nose автоматически собирает тесты из файлов вида test_*, достаточно умен, чтобы заглянуть в папочку tests при наличии таковой, умеет измерять покрытие кода (code coverage) при помощи coverage.py (--with-coverage). Также можно запустить только тесты, которые отвалились в последний прогон (--failed).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nose.readthedocs.org/en/latest/"&gt;https://nose.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 18 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-18:posts/2015/авг./18/testy-testy-testy-nose/</guid><category>тест</category><category>nose</category></item><item><title>Тесты тесты тесты: что такое фикстура (fixture)?</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./11/testy-testy-testy-chto-takoe-fikstura-fixture/</link><description>&lt;p&gt;При написании тестов не редка ситуация, когда надо иметь фиксированное воспроизводимое много раз состояние программы. Например, такая-то кнопочка нажата, такой-то класс содержит такие-то значения.&lt;/p&gt;
&lt;p&gt;Чтобы не приходилось каждый раз вручную создавать подобное состояние программы используются fixture (фикстуры). 
Фикстуры позволяют сохранить состояние системы в файл, а потом его от туда загрузить. &lt;/p&gt;
&lt;p&gt;По-мимо тестов, фикстуры применяются для создания начального состояния системы. Например, есть проект, который использует базу данных(БД). И возникает задача развернуть проект на новом компьютере. Можно перетаскивать БД и чистить от лишнего. А можно сохранить первичное состояние в файле и затем его подгрузить.&lt;/p&gt;
&lt;p&gt;Ссылки для погружения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://farmdev.com/projects/fixture/"&gt;http://farmdev.com/projects/fixture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythontesting.net/framework/pytest/pytest-fixtures-easy-example/"&gt;http://pythontesting.net/framework/pytest/pytest-fixtures-easy-example/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/howto/initial-data/"&gt;https://docs.djangoproject.com/en/1.8/howto/initial-data/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 11 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-11:posts/2015/авг./11/testy-testy-testy-chto-takoe-fikstura-fixture/</guid><category>тест</category><category>fixture</category></item><item><title>Тесты тесты тесты: пропускаем тесты в pytest по условию</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./11/testy-testy-testy-propuskaem-testy-v-pytest-po-usloviiu/</link><description>&lt;p&gt;Тесты не всегда универсальны. Например, в Windows надо дергать одну программу, в Linux другую. Чтобы реализовать такую логику в pytest можно воспользоваться - &lt;code&gt;skipif&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.mark.skipif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;requires python3.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вот такой пример демонстрирует как можно пропустить тест, если запуск происходит в Python версии ниже 3.3.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 11 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-11:posts/2015/авг./11/testy-testy-testy-propuskaem-testy-v-pytest-po-usloviiu/</guid><category>тест</category><category>pytest</category></item><item><title>Тесты тесты тесты: модуль тестирования py.test</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./04/testy-testy-testy-modul-testirovaniia-pytest/</link><description>&lt;p&gt;Наряду с входящими в стандартную поставку питона средствами для тестирования, существуют и альтернативные инструменты, например, py.test. &lt;a href="http://pytest.org/"&gt;http://pytest.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;py.test имеет множество расширений, которые значительно упрощают написание тестов.
py.test имеет плагины для всех популярных web-фреймворков, с помощью плагинов позволяет кэшеировать результаты (успешных тестов), формировать отчеты в самых различных форматах.
А также имеет очень простую систему расширения и вы можете буквально за день написать свой плагин.
&lt;a class='embedly-card' data-card-chrome='0' href='http://pytest.org/latest/_static/pytest1.png'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 04 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-04:posts/2015/авг./04/testy-testy-testy-modul-testirovaniia-pytest/</guid><category>тест</category><category>unittest</category></item><item><title>Тесты тесты тесты: создание читаемых отчетов</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./04/testy-testy-testy-sozdanie-chitaemykh-otchetov/</link><description>&lt;p&gt;Тесты тесты тесты: создание читаемых отчетов&lt;/p&gt;
&lt;p&gt;Когда в вашей программе очень много тестов, то возникают проблемы с чтением отчетов (что сломалось, что корректно отработало). Для создания читаемых отчетов можно порекомендовать allure-framework. О этом фреймворке можно узнать в видео:
&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=d5SreR6dGnE'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/allure-framework"&gt;https://github.com/allure-framework&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 04 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-04:posts/2015/авг./04/testy-testy-testy-sozdanie-chitaemykh-otchetov/</guid><category>тест</category><category>test</category><category>отчет</category></item><item><title>Имитация файловой системы с помощью mock</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/</link><description>&lt;p&gt;Вы пишите тесты? Тогда вам знаком модуль mock (в Python3 находится в unittest). Это модуль, который позволяет сделать имитацию объекта.&lt;/p&gt;
&lt;p&gt;Это необходимо, когда пишите тесты на свой код, а этот код использует множество долгих приготовлений: сходить в БД, разобрать данные еще что-то. Вот в этом случае вы можете провести имитацию всех этих долгих приготовлений и сконцентрироваться на написании тестов для своего кода.&lt;/p&gt;
&lt;p&gt;В случае с файловой системой немного сложней. Вот надо какие-то файлы создавать,в них что-то писать. Засорять свою домашнюю директорию папками "temp"? Не обязательно, можно имитировать файловую систему с помощью mockfs.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mockfs/mockfs"&gt;https://github.com/mockfs/mockfs&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 28 Jul 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-28:posts/2015/июля/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/</guid><category>тест</category><category>mock</category><category>test</category></item><item><title>unittest - основной инструмент тестирования</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/21/unittest-osnovnoi-instrument-testirovaniia/</link><description>&lt;p&gt;Одним из основных инструментов для тестирования в Python - unittest&lt;/p&gt;
&lt;p&gt;Это стандартный модуль для реализации юнит-тестов на Python.
Unittest это порт JUnit с Java, иными словами ООП стиль, что весьма удобно для тестирования и процедур, и классов.&lt;/p&gt;
&lt;p&gt;Возможностей в данном модуле довольно много: проверки (assert*), декораторы, позволяющие пропустить отдельный тест (@skip, @skipIf) или обозначить сломанные тесты (@expectedFailure)&lt;/p&gt;
&lt;p&gt;При написании тестов надо исходит из следующих принципов:&lt;/p&gt;
&lt;p&gt;Работа теста не должна зависеть от результатов работы других тестов.
- Тест должен использовать данные, специально для него подготовленные, и никакие другие.
- Тест не должен требовать ввода от пользователя
- Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично перекрывающие тесты.
- Нашли баг -&amp;gt; напиши тест
- Тесты надо поддерживать в рабочем состоянии
- Модульные тесты не должны проверять производительность сущности (класса, функции)
- Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет себя адекватно при некорректных данных.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 21 Jul 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-21:posts/2015/июля/21/unittest-osnovnoi-instrument-testirovaniia/</guid><category>тесты</category><category>test</category><category>unittest</category></item><item><title>unittest</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/21/unittest/</link><description>&lt;p&gt;unittest - https://docs.python.org/3.5/library/unittest.html - фреймворк для написания юнит-тестов.
unittest является частью стандартной поставки.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 21 Jul 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-21:posts/2015/июля/21/unittest/</guid><category>тесты</category><category>test</category><category>unittest</category></item></channel></rss>