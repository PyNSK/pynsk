<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/izvlechenie-informatsii.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 16 Dec 2015 18:00:00 +0600</lastBuildDate><item><title>Извлечение информации: парсинг больших объемов данных</title><link>http://pynsk.ru/posts/2015/Dec/16/izvlechenie-informatsii-parsing-bolshikh-obemov-dannykh/</link><description>&lt;p&gt;Парсинг частая задача на фриланс сайтах. Вот только парсят там 1-2 сайт и все. А что если надо спарсить целый Интернет?
В этом видео Александр Сибиряков расскажет о фреймворке frontera, который позволяет это сделать.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/Km7poOD8ybU?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 16 Dec 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-12-16:posts/2015/Dec/16/izvlechenie-informatsii-parsing-bolshikh-obemov-dannykh/</guid><category>видео</category><category>парсинг</category><category>fronteram scrapy</category><category>scrapinghub</category></item><item><title>Извлечение информации: XPath - язык для парсинга</title><link>http://pynsk.ru/posts/2015/Dec/15/izvlechenie-informatsii-xpath-iazyk-dlia-parsinga/</link><description>&lt;p&gt;XPath (XML Path Language) — язык запросов к элементам XML-документа.
Но не спешите убегать, концепция XPath настолько получилась удачной что ее применяют при парсинге HTML&lt;/p&gt;
&lt;p&gt;Ранее, для парсинга страниц использовали регулярные выражения. Регулярные выражения могли быть сложными и требовали постоянной настройки. При изменении дизайна сайт регулярное выражение изменялось кардинально, что замедляло написание парсеров.
Однако были и плюсы - одни и те же регулярные выражения можно использовать для разных сайтов.&lt;/p&gt;
&lt;p&gt;Сейчас же чаще всего для &lt;code&gt;_доступа_&lt;/code&gt; к данным используется &lt;code&gt;XPath&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;код&lt;/span&gt; &lt;span class="n"&gt;grab&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://vk.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;grab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x1c9ae10&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;c96940&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;//title/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Welcome&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;XPath реализует навигацию по &lt;code&gt;DOM&lt;/code&gt; в &lt;code&gt;XML/XHTML&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;В примере показано как получить элемент &lt;code&gt;title&lt;/code&gt; и достать из него текст.&lt;/p&gt;
&lt;p&gt;Схожим образом можно обращаться к любому элементу.
XPath позволяет искать элементы с определенным атрибутом, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;//div[@class=&amp;quot;Test&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Данный язык запросов позволяет значительно упростить логику парсеров и тем самым ускорить разработку парсеров.&lt;/p&gt;
&lt;p&gt;Синтаксис XPath -&amp;gt; &lt;a href="http://www.w3schools.com/xsl/xpath_syntax.asp"&gt;http://www.w3schools.com/xsl/xpath_syntax.asp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А в этом видео вы узнаете, как можно парсить без использования &lt;code&gt;XPath&lt;/code&gt;:&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/hj-8l3AejNc?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 15 Dec 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-12-15:posts/2015/Dec/15/izvlechenie-informatsii-xpath-iazyk-dlia-parsinga/</guid><category>xpath</category><category>парсинг</category></item><item><title>Извлечение информации: lxml - парсим XML и HTML</title><link>http://pynsk.ru/posts/2015/Oct/21/izvlechenie-informatsii-lxml-parsim-xml-i-html/</link><description>&lt;p&gt;lxml это быстрая и гибкая библиотека для обработки разметки XML и HTML на Python. Она снабжена поддержкой языка запросов XML (XPath) и языка преобразования XML-документов (XSLT) и предоставляет API ElementTree.&lt;/p&gt;
&lt;p&gt;Много где можно найти что ее называют "быстрой". Для обоснования этого прилагательного прошу ознакомиться со страницей - &lt;a href="http://lxml.de/performance.html"&gt;http://lxml.de/performance.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Пример использования:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;soft&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;os&amp;gt; &lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;item name=&amp;quot;linux&amp;quot; dist=&amp;quot;ubuntu&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;            This text about linux&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;/item&amp;gt;             &lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;item name=&amp;quot;mac os&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;            Apple company&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;/item&amp;gt;             &lt;/span&gt;
&lt;span class="s1"&gt;        &amp;lt;item name=&amp;quot;windows&amp;quot; dist=&amp;quot;XP&amp;quot; /&amp;gt;             &lt;/span&gt;
&lt;span class="s1"&gt;    &amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;lt;/soft&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;

&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;etree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Парсинг строки&lt;/span&gt;
&lt;span class="c1"&gt;#tree = etree.parse(&amp;#39;1.xml&amp;#39;) # Парсинг файла&lt;/span&gt;

&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/soft/os/item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Открываем раздел&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Перебираем элементы&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Выводим параметр name&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Выводим текст элемента&lt;/span&gt;

&lt;span class="c1"&gt;# Доступ к тексту напрямую, с указанием фильтра&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/soft/os/item[@name=&amp;quot;linux&amp;quot;]/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/soft/os/item[2]/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Доступ к параметру напрямую&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/soft/os/item[@name=&amp;quot;linux&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Выборка по ключу&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dist by key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;//*[@name=&amp;quot;windows&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вот и ссылки для изучения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/220125/"&gt;http://habrahabr.ru/post/220125/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lxml.de/"&gt;http://lxml.de/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/lxml"&gt;https://pypi.python.org/pypi/lxml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 21 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-21:posts/2015/Oct/21/izvlechenie-informatsii-lxml-parsim-xml-i-html/</guid><category>lxml</category><category>xml</category><category>html</category><category>парсинг</category></item><item><title>Извлечение информации: grab - фреймворк для веб-парсинга</title><link>http://pynsk.ru/posts/2015/Sep/23/izvlechenie-informatsii-grab-freimvork-dlia-veb-parsinga/</link><description>&lt;p&gt;Grab — python библиотека для парсинга сайтов&lt;/p&gt;
&lt;p&gt;Её основные функции:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Подготовка сетевого запроса (cookies, http-заголовки, POST/GET данные)&lt;/li&gt;
&lt;li&gt;Запрос на сервер (возможно через HTTP/SOCKS прокси)&lt;/li&gt;
&lt;li&gt;Получение ответа сервера и его первоначальная обработка (парсинг заголовков, парсинг cookies, определение кодировки документа, обработка редиректа (поддерживаются даже редирект в meta refresh тэге))&lt;/li&gt;
&lt;li&gt;Работа с DOM-деревом ответа (если это HTML-документ)&lt;/li&gt;
&lt;li&gt;Работа с формами (заполнение, автозаполнение)&lt;/li&gt;
&lt;li&gt;Отладка: логирование процесса в консоль, сетевых запросов и ответов в файлы&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В чем же особенность?&lt;/p&gt;
&lt;p&gt;Если scrapy — это реально паук, бегает по сети, тянет в тыщу потоков информацию, то grab — это скорее швейцарский нож, вы его берёте и начинает вдумчиво колупать сайт.&lt;/p&gt;
&lt;p&gt;Пощупать модуль:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://grablib.org/ru/"&gt;http://grablib.org/ru/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Image" src="https://s-media-cache-ak0.pinimg.com/736x/0e/ef/7e/0eef7e463459b10b3ea1f3f21b03d653.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 23 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-23:posts/2015/Sep/23/izvlechenie-informatsii-grab-freimvork-dlia-veb-parsinga/</guid><category>grab</category><category>parsing</category><category>web parsing</category><category>crawler</category><category>парсинг</category></item><item><title>Извлечение информации: скачиваем список ссылок с помощью asyncio</title><link>http://pynsk.ru/posts/2015/Sep/09/izvlechenie-informatsii-skachivaem-spisok-ssylok-s-pomoshchiu-asyncio/</link><description>&lt;p&gt;Порой возникают рутинные задачи, которые не хочется делать руками. Примером такой задачи может являться - скачать множество страниц по ссылкам. Если 5 ссылок еще вручную сохранить можно, а если их 1000? или 6250, как было в моем случае. &lt;/p&gt;
&lt;p&gt;На Python эту задачу можно с помощью модуля asyncio и aiohttp. &lt;/p&gt;
&lt;p&gt;Вот такой код можно написать за пару минут:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;

&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;save_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# сохраняем страницу в файл, или еще куда&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="nd"&gt;@asyncio.coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_parallel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;список&lt;/span&gt; &lt;span class="err"&gt;ссылок&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# список ссылок&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;download_parallel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 09 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-09:posts/2015/Sep/09/izvlechenie-informatsii-skachivaem-spisok-ssylok-s-pomoshchiu-asyncio/</guid><category>asyncio</category><category>aiohttp</category></item><item><title>Извлечение информации: парсинг дат/времени</title><link>http://pynsk.ru/posts/2015/Aug/19/izvlechenie-informatsii-parsing-datvremeni/</link><description>&lt;p&gt;Извлечение информации из текста/web-страниц сопряжено с эвристиками. 
Одна из проблем, с которой сталкиваются разработчики - как парсить даты. Даты можно написать 100 и одним способом:
tomorrow, а еще 4/4/80 или March 5th, 1980. И какой код писать, чтобы понять эти даты?&lt;/p&gt;
&lt;p&gt;К счастью, код уже написан - &lt;a href="https://github.com/bear/parsedatetime"&gt;https://github.com/bear/parsedatetime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Данная библиотека позволяет спарсить время в самых различных форматах.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 19 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-19:posts/2015/Aug/19/izvlechenie-informatsii-parsing-datvremeni/</guid><category>парсинг</category></item><item><title>Парсинг и Python: mechanize</title><link>http://pynsk.ru/posts/2015/Aug/12/parsing-i-python-mechanize/</link><description>&lt;p&gt;Для сбора данных с Web-страниц в Python существует библиотека mechanize, автоматизирующая взаимодействие с Web-сайтами. Часто используемая совместно с ней библиотека Beautiful Soup помогает понять тот «почти-HTML» код, который обычно находится на Web-сайтах.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/ru/library/l-python-mechanize-beautiful-soup/"&gt;http://www.ibm.com/developerworks/ru/library/l-python-mechanize-beautiful-soup/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 12 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-12:posts/2015/Aug/12/parsing-i-python-mechanize/</guid><category>парсинг</category><category>mechanize</category></item><item><title>Python и интересный парсинг сайтов</title><link>http://pynsk.ru/posts/2015/Aug/05/python-i-interesnyi-parsing-saitov/</link><description>&lt;p&gt;Излечение информации со страниц может быть интересным. Рекомендуем к просмотру видео
&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=hj-8l3AejNc'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 05 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-05:posts/2015/Aug/05/python-i-interesnyi-parsing-saitov/</guid><category>видео</category><category>парсинг</category></item><item><title>Парсинг с помощью asyncio</title><link>http://pynsk.ru/posts/2015/Jul/29/parsing-s-pomoshchiu-asyncio/</link><description>&lt;p&gt;Парсинг сайтов это вечная задача. Сайтов много, данных много и все они разные.
Для задач парсинга существует великое разнообразие инструментов.&lt;/p&gt;
&lt;p&gt;В Python 3-ей версии появился стандартный модуль для создания асинхронных программ. И грех не воспользоваться данной возможностью.&lt;/p&gt;
&lt;p&gt;Примером парсинга на asyncio может послужить эта статья 
&lt;a href="http://olegwock.net/blog/python/byistryiy-parsing-na-python-s-pomoshhyu-asyncio/"&gt;http://olegwock.net/blog/python/byistryiy-parsing-na-python-s-pomoshhyu-asyncio/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 29 Jul 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-29:posts/2015/Jul/29/parsing-s-pomoshchiu-asyncio/</guid><category>asyncio</category><category>парсинг</category></item></channel></rss>