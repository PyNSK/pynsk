<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/pishem-web-proekty.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 19 Jan 2016 08:00:00 +0600</lastBuildDate><item><title>Пишем простые проекты. Проект #1. Часть #1</title><link>http://pynsk.ru/posts/2016/Jan/19/pishem-prostye-proekty-proekt-1-chast-1/</link><description>&lt;p&gt;Нудное введение:&lt;/p&gt;
&lt;p&gt;Замечено, что новичкам трудно перейти от теории к практике - заставить себя писать, а не только читать. Чтобы помочь мы постоянно публикуем различный материал и указываем как применить эти знания на практике.&lt;/p&gt;
&lt;p&gt;В этот раз решили написать 2 небольших проекта:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Первый - страница со статистикой отжимания. Будет показано, как с помощью flask + google chart's сделать проект для сохранения и визуализации количества отжиманий. &lt;/li&gt;
&lt;li&gt;Второй - vk2rss - сервис для преобразования стен групп ВКонтакте в RSS. Будет рассмотрен парсинг, работа с VK API, создание простого GUI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Оба проекта будут описаны в виде текста. А следующие попробую записать в виде скринкаста (Это ведь интересней?)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Для справки: я придерживаюсь правила 80% практика / 20% теория. Поэтому не ожидайте глубокой теории. По тексту будут расставлены отсылки к необходимой теории. Смело задавайте вопросы в комментариях.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Повторяйте за мной!&lt;/p&gt;
&lt;p&gt;Первый проект:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flask&lt;/code&gt; - веб-фреймворк. Обладает высокой гибкостью, расширяется (добавляются возможности) за счет сторонних модулей. &lt;/p&gt;
&lt;p&gt;Установить &lt;code&gt;flask&lt;/code&gt; можно как и другие пакеты - через &lt;code&gt;pip/easy_install&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Подсказка: проекты стоит разрабатывать в виртуальном окружении - virtualenv. &lt;/p&gt;
&lt;p&gt;Подсказка: используйте pip для установки пакетов&lt;/p&gt;
&lt;p&gt;Ссылки для изучения pip и virtualenv:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://pynsk.ru/posts/2015/Dec/25/poleznye-instrumenty-virtualenv-pip/"&gt;http://pynsk.ru/posts/2015/Dec/25/poleznye-instrumenty-virtualenv-pip/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://proft.me/2010/04/3/python-i-okruzhenie-virtualenv/"&gt;http://proft.me/2010/04/3/python-i-okruzhenie-virtualenv/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Выполняем для установки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Сразу к коду. Традиционный &lt;code&gt;hello world&lt;/code&gt;, на flask:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Данный код создает и запускает web-сервер. Пользователь зашедший на главную страницу (/) увидит &lt;code&gt;Hello World!&lt;/code&gt;.
Запускаем скрипт и получаем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Открываем браузер и вводим &lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt;. 
Если сделано все правильно, то увидите  &lt;code&gt;Hello World!&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Поэксперементируйте с отображаемым текстом. Выводите разный текст, воспользуйтесь HTML-тегами&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;В описании проекта сказано - "страница". Добавим ее. Создаем папку &lt;code&gt;templates&lt;/code&gt;, а в папке файл 'index.html'. 
В результате у нас получилась такая структура файлов и папок:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── app.py
├── requirements.txt
└── templates
    └── index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;index.html, пришло твое время! Заменим &lt;code&gt;Hello world&lt;/code&gt; в Python коде на html страницу с таким же содержанием. Записываем в файл:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hiiiiiiii&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Заготовка страницы есть. Теперь надо эту страницу показать пользователю. Возвращаемся в Python-код и переписываем функцию &lt;code&gt;index&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Не забудьте добавить импорт функции &lt;code&gt;render_template&lt;/code&gt; (ведь вы уже догадались что она делает?). Добавляем в начале &lt;code&gt;app.py&lt;/code&gt; файла:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Перезапустите flask-сервер, снова откройте главную страницу. Если сделали все правильно, то увидете &lt;code&gt;Hiiiiiiii&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Промежуточный итог: создали flask-проект с шаблоном. При заходе на главную страницу сервера нас приветствуют с помощью &lt;code&gt;Hiiiiiiii&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Продолжение следует.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 19 Jan 2016 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2016-01-19:posts/2016/Jan/19/pishem-prostye-proekty-proekt-1-chast-1/</guid><category>pip</category><category>flask</category></item><item><title>Пишем web-проекты: исправляем битый HTML с помощью Tidy</title><link>http://pynsk.ru/posts/2015/Dec/23/pishem-web-proekty-ispravliaem-bityi-html-s-pomoshchiu-tidy/</link><description>&lt;p&gt;При парсинге возникают совсем странные ошибки - одна из них - не валидный HTML. Т.е. с ошибками.
Верстальщик забыл закрыть таблицу или body. Еще бывает что вставляют HTML из Word, а там тааккккооооой код.&lt;/p&gt;
&lt;p&gt;Чтобы очистить HTML от мусора можно применять инструмент &lt;code&gt;Tidy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Данный инструмент позволяет исправить неверный HTML (добавит закрывающие теги, добавит недостающие теги), почистить форматирование (отступы, например).&lt;/p&gt;
&lt;p&gt;Скачать этот инструмент можно из репозитория - &lt;a href="http://tidy.sourceforge.net/"&gt;http://tidy.sourceforge.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Чтобы воспользоваться этим продуктом из Python требуется поставить модуль &lt;code&gt;PyTidyLib&lt;/code&gt; и пользоваться.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tidylib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tidy_document&lt;/span&gt;
&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tidy_document&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&amp;lt;p&amp;gt;f&amp;amp;otilde;o &amp;lt;img src=&amp;quot;bar.jpg&amp;quot;&amp;gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;numeric-entities&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Почитать про PyTidyLib можно по ссылке - &lt;a href="http://countergram.com/open-source/pytidylib/docs/index.html"&gt;http://countergram.com/open-source/pytidylib/docs/index.html&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 23 Dec 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-12-23:posts/2015/Dec/23/pishem-web-proekty-ispravliaem-bityi-html-s-pomoshchiu-tidy/</guid><category>html</category><category>парсинг</category></item><item><title>Пишем web-проекты: Гексагональная архитектура в приложениях Django</title><link>http://pynsk.ru/posts/2015/Dec/02/pishem-web-proekty-geksagonalnaia-arkhitektura-v-prilozheniiakh-django/</link><description>&lt;p&gt;Видео со свежего Moscow Python митапа.&lt;/p&gt;
&lt;p&gt;Как не превратить свой проект в груду урлов? Как не потерять расширяемость с ростом кодовой базы? Как писать поддерживаемый код? Об этих проблемах и их возможных решениях на примере Django расскажет и покажет Малышев Артем.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/tKEv9Enhm1Q?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 02 Dec 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-12-02:posts/2015/Dec/02/pishem-web-proekty-geksagonalnaia-arkhitektura-v-prilozheniiakh-django/</guid><category>видео</category><category>django</category><category>архитектура</category></item><item><title>Пишем web-проекты: django сигналы</title><link>http://pynsk.ru/posts/2015/Dec/02/pishem-web-proekty-django-signaly/</link><description>&lt;p&gt;Хочется поделиться ссылкой на статью - &lt;a href="https://zxmd.wordpress.com/2013/05/23/django_signals/"&gt;https://zxmd.wordpress.com/2013/05/23/django_signals/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Что такое сигнал в Django Framework ?&lt;/p&gt;
&lt;p&gt;На бытовом уровне это система (диспетчер сигналов) которая обрабатывает некоторые виды событий которые генерирует система. По сути система сигналов разделяется на два компонента:&lt;/p&gt;
&lt;p&gt;sender  — компонент посылающий сигнал;
receiver — компонент отвечающий за обработку сигнала.
...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 02 Dec 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-12-02:posts/2015/Dec/02/pishem-web-proekty-django-signaly/</guid><category>django</category><category>сигнал</category><category>signal</category></item><item><title>Пишем web-проекты: django-braces - набор миксин на все случаи жизни</title><link>http://pynsk.ru/posts/2015/Nov/25/pishem-web-proekty-django-braces-nabor-miksin-na-vse-sluchai-zhizni/</link><description>&lt;p&gt;При разработке сколько-либо сложного django-проекта необходимо из раза в раз писать одинаковые куски кода - разграничивать доступ к контенту.&lt;/p&gt;
&lt;p&gt;Например. чтобы только администратор в меню сайта видел ссылку на "админку", или чтобы модератор имел какую-то внутреннюю страницу, которая не доступна простому пользователю.&lt;/p&gt;
&lt;p&gt;В случае с уровнем доступа, с авторизацией и прочими типовыми задачами есть набор готовых миксин - django-braces.
Django-braces позволяет в пару copy-paste сделать авторизацию, регистрацию пользователя, вернуть ответ view'хи в виде JSON, работать с SSL- эти и многие другие куски кода можно взять в этом модуле.&lt;/p&gt;
&lt;p&gt;Документация - &lt;a href="https://django-braces.readthedocs.org/en/latest/"&gt;https://django-braces.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Исходники - &lt;a href="https://github.com/brack3t/django-braces"&gt;https://github.com/brack3t/django-braces&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 25 Nov 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-11-25:posts/2015/Nov/25/pishem-web-proekty-django-braces-nabor-miksin-na-vse-sluchai-zhizni/</guid><category>django</category><category>web</category></item><item><title>Пишем web-проекты: jinja2 - шаблонизатор</title><link>http://pynsk.ru/posts/2015/Nov/25/pishem-web-proekty-jinja2-shablonizator/</link><description>&lt;p&gt;Jinja — это шаблонизатор для языка программирования Python. Он подобен шаблонизатору Django, но предоставляет Python-ические выражения, обеспечивая исполнение шаблонов в песочнице. Это текстовый язык шаблонов и, таким образом, может быть использован для создания какой-либо разметки, а также исходного кода.&lt;/p&gt;
&lt;p&gt;Шаблонизатор Jinja позволяет настраивать теги, фильтры, тесты и глобальные переменные. Также, в отличие от шаблонизатора Django, Jinja позволяет конструктору шаблонов вызывать функции с аргументами на объектах.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello {{ name }}!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;Вася&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Неплохой рассказ про шаблонизаторы:&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/ktSo_Njy6Cc?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Ссылки для изучения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jinja.pocoo.org/"&gt;http://jinja.pocoo.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/164823/"&gt;http://habrahabr.ru/post/164823/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 25 Nov 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-11-25:posts/2015/Nov/25/pishem-web-proekty-jinja2-shablonizator/</guid><category>jinja2</category><category>web</category><category>видео</category></item><item><title>Пишем web-проекты: Использование gevent для эмуляции высокой нагрузки</title><link>http://pynsk.ru/posts/2015/Oct/29/pishem-web-proekty-ispolzovanie-gevent-dlia-emuliatsii-vysokoi-nagruzki/</link><description>&lt;p&gt;Обязательное действие перед выпуском более-менее серьёзного проекта — тестирование производительности. На высоконагруженных проектах нужно точно знать, какую нагрузку они могут выдержать, причём заранее. Следовательно, нужен способ эмуляции высокой конкурентности, желательно чтобы в теории он позволял полностью загрузить канал траффиком. К тому же, неплохо было бы, чтобы для этого не нужно было использовать несколько десятков серверов. В докладе будет рассказано об опыте использования gevent для подобной задачи, что позволило бы обойтись одним t1.micro инстансом, с которого выполняется тестирование.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/ndngDDiGaFw?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 29 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-29:posts/2015/Oct/29/pishem-web-proekty-ispolzovanie-gevent-dlia-emuliatsii-vysokoi-nagruzki/</guid><category>видео</category><category>gevent</category></item><item><title>Пишем web-проекты: Погружение в полнотекстовый поиск, используя Python</title><link>http://pynsk.ru/posts/2015/Oct/28/pishem-web-proekty-pogruzhenie-v-polnotekstovyi-poisk-ispolzuia-python/</link><description>&lt;p&gt;Чем больше/непонятней сайт, тем чаще используют поиск. В докладе Андрея Солдатенко вы сможете узнать как организовать хороший поиск по вашему сайту &lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/vXl7EEURfO8?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 28 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-28:posts/2015/Oct/28/pishem-web-proekty-pogruzhenie-v-polnotekstovyi-poisk-ispolzuia-python/</guid><category>видео</category></item><item><title>Пишем web-проекты: полиморфные связи или Foreign Key на две Django модели</title><link>http://pynsk.ru/posts/2015/Oct/07/pishem-web-proekty-polimorfnye-sviazi-ili-foreign-key-na-dve-django-modeli/</link><description>&lt;p&gt;Представим ситуацию. 
Есть модель Текст (заголовок, тело, теги) и модели Новость, Продукт, Реклама, которые имеют свои уникальные параметры. 
Необходимо связать Текст и все остальные - вполне логичное желание. &lt;/p&gt;
&lt;p&gt;Как можно поступить:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Добавить Foreign Key в Текст (т.е. будет N=3 Foreign Key полей)&lt;/li&gt;
&lt;li&gt;Сделать отдельные модели для связи - будет 3 таблицы для связки. (вручную их сделаем)&lt;/li&gt;
&lt;li&gt;Сделать 2 поля, одно из которых будет говорить, какая модель имеется в виду, а второе – хранить ключ этой модели. + добавить свойство, которое будет возвращать запись из нужной модели (делать нужный query запрос) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Первый вариант не подходит, потому что каждая новая модель будет добавлять еще одну Foreign Key связь
Второй не очень, потому что N моделей - N дополнительных таблиц делать руками
А вот третий вариант неплохой. Он и реализован в Django и состоит из двух компонентов: Content Types Framework и Generic Relations.&lt;/p&gt;
&lt;p&gt;Вот простой пример: реализуем систему тэгов(ярлычков), которая могла бы выглядеть так&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.contenttypes.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GenericForeignKey&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.contenttypes.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaggedItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;object_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GenericForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c1"&gt;# __unicode__ on Python 2&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Обычное поле ForeignKey может “указывать” только на одну модель, что означает, - если в модели TaggedItem есть поле ForeignKey, его можно “связать” с одной и только одной моделью, для которой и будут сохраняться тэги. Приложение contenttypes предоставляет нам поле специального типа (GenericForeignKey), которое решает обозначенную выше проблему и позволяет создать связь с любой моделью&lt;/p&gt;
&lt;p&gt;Ссылки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/"&gt;https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://djbook.ru/rel1.8/ref/contrib/contenttypes.html"&gt;http://djbook.ru/rel1.8/ref/contrib/contenttypes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://axiacore.com/blog/how-use-genericforeignkey-django/"&gt;http://axiacore.com/blog/how-use-genericforeignkey-django/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ikrvss.ru/2010/11/09/django-polymorphic-foreign-key/"&gt;http://www.ikrvss.ru/2010/11/09/django-polymorphic-foreign-key/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 07 Oct 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-07:posts/2015/Oct/07/pishem-web-proekty-polimorfnye-sviazi-ili-foreign-key-na-dve-django-modeli/</guid><category>django</category><category>generic</category><category>foreign key</category></item><item><title>Пишем web-проекты: Django Admin Actions</title><link>http://pynsk.ru/posts/2015/Sep/16/pishem-web-proekty-django-admin-actions/</link><description>&lt;p&gt;Интерфейс администратора Django достается разработчику "даром" - прописываешь немного срочек и готово.
Появляется UI где можно изменять объекты моделей - просто так нам предоставляют GRUD возможности.&lt;/p&gt;
&lt;p&gt;Но что если нам надо сделать какие-то дополнительные возможности?
Для примера такие действия есть в Python Дайджест:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python Дайджест" src="http://pynsk.ru/images/posts/django_actions.png" /&gt;&lt;/p&gt;
&lt;p&gt;Такие возможности реализуются с помощью Django admin actions. 
Для примера так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemModeratorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;_action_make_moderated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_action_set_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;queue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;_action_set_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;В очередь&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Можно заметить, что добавлена функция, которая принимает request и queryset. queryset - в данном случае это набор выделенных объектов (у тех что галочки стоят). &lt;/p&gt;
&lt;p&gt;Подробная информация по ссылке:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/admin/actions/"&gt;https://docs.djangoproject.com/en/1.8/ref/contrib/admin/actions/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 16 Sep 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-16:posts/2015/Sep/16/pishem-web-proekty-django-admin-actions/</guid><category>django</category><category>admin</category><category>action</category></item><item><title>Пишем web-проекты: выжимаем максимум из PostgreSQL</title><link>http://pynsk.ru/posts/2015/Sep/03/pishem-web-proekty-vyzhimaem-maksimum-iz-postgresql/</link><description>&lt;p&gt;Postgres предоставляет много встроенных возможностей для создания эфективных приложений,
использующих базы данных. А в версии 9.4 появляется еще и полноценное JSON поле,
при правильном использовании которого, отпадает необходимость использвания NoSQL баз данных.
В докладе мы рассмотрим, как использовать этот потенциал по максимуму в своих Python/Django
приложениях.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/wP6pCm2zvUg?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 03 Sep 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-03:posts/2015/Sep/03/pishem-web-proekty-vyzhimaem-maksimum-iz-postgresql/</guid><category>web</category><category>db</category><category>postgresql</category><category>видео</category></item><item><title>Пишем web-проекты: туториал по django</title><link>http://pynsk.ru/posts/2015/Aug/26/pishem-web-proekty-tutorial-po-django/</link><description>&lt;p&gt;Django - это крупный web-фреймворк. Это отличный инструмент для создания web-приложений. Освоение этого инструмента занимает приличное количество времени.
А начать можно с туториала - &lt;a href="https://docs.djangoproject.com/en/stable/intro/tutorial01/"&gt;https://docs.djangoproject.com/en/stable/intro/tutorial01/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 26 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-26:posts/2015/Aug/26/pishem-web-proekty-tutorial-po-django/</guid><category>django</category></item><item><title>Пишем web-проекты: обзор и сравнение методов реализации REST API в Django</title><link>http://pynsk.ru/posts/2015/Aug/25/pishem-web-proekty-obzor-i-sravnenie-metodov-realizatsii-rest-api-v-django/</link><description>&lt;p&gt;Без API уже тяжело представить веб-проект. Для django существует несколько библиотек, которые позволяют создать REST API за пару строк. &lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/nEl2ymv2QnA?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 25 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-25:posts/2015/Aug/25/pishem-web-proekty-obzor-i-sravnenie-metodov-realizatsii-rest-api-v-django/</guid><category>rest</category><category>api</category><category>django</category><category>видео</category></item><item><title>Python и real-time web приложение</title><link>http://pynsk.ru/posts/2015/Aug/08/python-i-real-time-web-prilozhenie/</link><description>&lt;p&gt;Далеко не всегда требуется тащить мощный Django или другой фреймворк. Бывает достаточно небольшого количества чистого Python кода и базы данных.
Посмотрим, как имея всего эти 2 элемента написать приложение.
&lt;a class='embedly-card' data-card-chrome='0' href='https://www.youtube.com/watch?v=PsorlkAF83s'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 08 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-08:posts/2015/Aug/08/python-i-real-time-web-prilozhenie/</guid><category>видео</category><category>hardcore</category><category>real-time</category><category>web</category></item><item><title>Bottle с Python</title><link>http://pynsk.ru/posts/2015/Aug/05/bottle-s-python/</link><description>&lt;p&gt;bottle - это веб-фреймворк для Python. Отличительной особенностью этого фреймворка является простота - исходный код занимает один файл. Несмотря на свою минималистичность, Bottle предоставляет довольно широкие возможности, которых на 100% хватает для мелких и средних проектов.
Чтобы стартануть изучение достаточно написать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;b&amp;gt;Hello {{name}}&amp;lt;/b&amp;gt;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Это запустит web-приложение на 8080 порту, а по ссылке &lt;code&gt;http://127.0.0.1/hello/Alexander&lt;/code&gt; вы увидите Hello Alexander.
Очень просто.&lt;/p&gt;
&lt;p&gt;Дальнейшее изучение можно продолжить по ссылкам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;http://bottlepy.org/docs/dev/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/221659/"&gt;http://habrahabr.ru/post/221659/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/250831/"&gt;http://habrahabr.ru/post/250831/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 05 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-05:posts/2015/Aug/05/bottle-s-python/</guid><category>bottle</category><category>web</category></item><item><title>Django REST API</title><link>http://pynsk.ru/posts/2015/Jul/29/django-rest-api/</link><description>&lt;p&gt;Пишите web приложения? Тогда для вас не является новостью, что без API далеко не уедешь. &lt;/p&gt;
&lt;p&gt;Для фреймворка django существует несколько способов создать API за пару минут, да еще и с документацией.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;https://github.com/tomchristie/django-rest-framework&lt;/a&gt;
&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;https://github.com/marcgibbons/django-rest-swagger&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 29 Jul 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-29:posts/2015/Jul/29/django-rest-api/</guid><category>django</category><category>rest</category><category>api</category><category>swagger</category></item></channel></rss>