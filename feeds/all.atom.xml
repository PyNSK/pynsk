<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/all.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-08-23T18:00:00+06:00</updated><entry><title>Hardcore Python: запускаем С код с помощью cffi</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./23/hardcore-python-zapuskaem-s-kod-s-pomoshchiu-cffi/" rel="alternate"></link><updated>2015-08-23T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-23:posts/2015/авг./23/hardcore-python-zapuskaem-s-kod-s-pomoshchiu-cffi/</id><summary type="html">&lt;p&gt;Самый популярный Python это CPython. Он настолько популярен, что когда говорят Python имеют ввиду именно каноническую реализацию - CPython.&lt;/p&gt;
&lt;p&gt;CPython, как можно понять из названия, имеет какое-то отношение к языку C.
Из Python вы можете с помощью ctypes дергать С-шные функции.&lt;br /&gt;
Однако, этот механизм несколько медленный и не всегда удобный - бывает надо просто дернуть один кусок C-кода. Или надо только часть от h-файла, или только кусок структуры.
Вот в этом случае помогает - cffi.&lt;/p&gt;
&lt;p&gt;Пример кода с использованием этой библиотеки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cffi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FFI&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;.......int printf(const char *format, ...);   // copy-pasted from the man page&lt;/span&gt;
&lt;span class="s"&gt;.......&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="c"&gt;# loads the entire C namespace&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;char[]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c"&gt;# equivalent to C code: char arg[] = &amp;quot;world&amp;quot;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi there, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c"&gt;# call printf&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;                                           &lt;span class="c"&gt;# this is the return value&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Эти многоточия в cdef это &lt;em&gt;реальный&lt;/em&gt; код, который надо писать.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/cffi"&gt;https://pypi.python.org/pypi/cffi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cffi"></category></entry><entry><title>Таинство стандартной библиотеки: functools.singledispatch</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./23/tainstvo-standartnoi-biblioteki-functoolssingledispatch/" rel="alternate"></link><updated>2015-08-23T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-23:posts/2015/авг./23/tainstvo-standartnoi-biblioteki-functoolssingledispatch/</id><summary type="html">&lt;p&gt;Стандартная поставка Python полна возможностями. 
Хочется упомянуть обобщенные функции. Если простыми словами, то это такие функции, где мы не думаем о типах аргументов, а просто пишем логику.  Например, (натянутый пример) оператор "+" - мы не думаем о аргументах, мы просто складывает два объекта.&lt;/p&gt;
&lt;p&gt;Для реализации обобщенных функций в Python 3 (начиная с 3.4) появился метод singledispatch в модуле functools.&lt;/p&gt;
&lt;p&gt;Подробней о этом механизме по ссылке - &lt;a href="https://www.python.org/dev/peps/pep-0443/"&gt;https://www.python.org/dev/peps/pep-0443/&lt;/a&gt;&lt;/p&gt;</summary><category term="functools"></category></entry><entry><title>Полезные библиотеки: plot.ly (plotly)</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./22/poleznye-biblioteki-plotly-plotly/" rel="alternate"></link><updated>2015-08-22T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-22:posts/2015/авг./22/poleznye-biblioteki-plotly-plotly/</id><summary type="html">&lt;p&gt;Понятное представление информации - это вечная задача. Причем она свойственна всем.&lt;/p&gt;
&lt;p&gt;Хочется упомянуть графики. Вот собрали мы данные, задача была не простая, а теперь надо их представить. Графики бывают разных типов, их очень много. Даже если какой-то график сделали, а как поделиться? Можно скинуть картинку, да только придется потом с "линейкой" вычислять значения, а можно пойти по другому пути - https://plot.ly/python/. &lt;/p&gt;
&lt;p&gt;ploy.ly предоставляет возможно создать динамический график, например, &lt;a href="https://plot.ly/python/dashboard/"&gt;https://plot.ly/python/dashboard/&lt;/a&gt;&lt;br /&gt;
plot.ly позволяет создавать самые разные графики, которые будут выглядеть как живые - можно будет методом тыка узнать значение графика в точке, покрутить, повертеть график.&lt;/p&gt;</summary><category term="график"></category><category term="plotly"></category></entry><entry><title>Полезные библиотеки: numpy</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./22/poleznye-biblioteki-numpy/" rel="alternate"></link><updated>2015-08-22T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-22:posts/2015/авг./22/poleznye-biblioteki-numpy/</id><summary type="html">&lt;p&gt;NumPy — это библиотека языка Python, добавляющая поддержку больших многомерных массивов и матриц, вместе с большой библиотекой высокоуровневых (и очень быстрых) математических функций для операций с этими массивами.&lt;/p&gt;
&lt;p&gt;В чем же "фишка" NumPy вы можете спросить. &lt;/p&gt;
&lt;p&gt;Основным объектом NumPy является однородный многомерный массив (в numpy называется numpy.ndarray). Это многомерный массив элементов (обычно чисел), одного типа.&lt;/p&gt;
&lt;p&gt;Здесь можно подчеркнуть &lt;em&gt;одного типа&lt;/em&gt;. Эта существенная деталь позволяет заметно ускорить работу с такими объектами. Зная, что данный объект имеет только, скажем, целые числа, то не будут производится проверки типов. Плюс к этому - уменьшается общий объем памяти для хранения таких объектов.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonworld.ru/numpy/1.html"&gt;http://pythonworld.ru/numpy/1.html&lt;/a&gt;
&lt;a href="http://www.numpy.org/"&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="numpy"></category></entry><entry><title>Внутренности Python: зачем нужен GIL(Global interpreter lock)</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./21/vnutrennosti-python-zachem-nuzhen-gilglobal-interpreter-lock/" rel="alternate"></link><updated>2015-08-21T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-21:posts/2015/авг./21/vnutrennosti-python-zachem-nuzhen-gilglobal-interpreter-lock/</id><summary type="html">&lt;p&gt;Много хают GIL в Python, в этом видео вы узнаете насколько же он плох... или все-таки хорош?
&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=AWX4JnAnjBE'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="GIL"></category></entry><entry><title>Python на службе народа: распознаем образы с помощью Raspberry Pi</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./21/python-na-sluzhbe-naroda-raspoznaem-obrazy-s-pomoshchiu-raspberry-pi/" rel="alternate"></link><updated>2015-08-21T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-21:posts/2015/авг./21/python-na-sluzhbe-naroda-raspoznaem-obrazy-s-pomoshchiu-raspberry-pi/</id><summary type="html">&lt;p&gt;Raspberry Pi - это мини-компьютер, который имеет невысокую цену и при этом имеет богатые возможности.
Применение мини-компьютеров широкое, например, можно сделать камеру для дома - можете реализовать программку, которая будет следить за вашим маленьким ребенком и посылать вам сигнал, когда ребенок проснулся.&lt;/p&gt;
&lt;p&gt;&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=vRHoQVZLvoM)
[http://www.open-electronics.org/raspberry-pi-and-the-camera-pi-module-face-recognition-tutorial/](http://www.open-electronics.org/raspberry-pi-and-the-camera-pi-module-face-recognition-tutorial/)
[https://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/](https://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="raspberry pi"></category></entry><entry><title>Интересные концепции: Трансдьюсеры</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./20/interesnye-kontseptsii-transdiusery/" rel="alternate"></link><updated>2015-08-20T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-20:posts/2015/авг./20/interesnye-kontseptsii-transdiusery/</id><summary type="html">&lt;p&gt;Трансдьюсеры — это попытка переосмыслить операции над коллекциями, найти в них общую идею и принцип, научиться совмещать вместе несколько операций для их дальнейшего переиспользования.&lt;/p&gt;
&lt;p&gt;&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=ANZOvcYPagU)
[!embedlycard](https://www.youtube.com/watch?t=1080&amp;v=VTEfb5ojOzA'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary></entry><entry><title>Анонс №2 встречи сообщества</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./20/anons-2-vstrechi-soobshchestva/" rel="alternate"></link><updated>2015-08-20T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-20:posts/2015/авг./20/anons-2-vstrechi-soobshchestva/</id><summary type="html">&lt;p&gt;Внимание внимание внимание, в середине сентября, а именно, 13 сентября в 13 часов пройдет встреча Python-сообщества PyNSK.&lt;/p&gt;
&lt;p&gt;Подробности по ссылке - &lt;a href="https://vk.com/pynsk_13_09_2015"&gt;https://vk.com/pynsk_13_09_2015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;На встрече вас ожидает два полноценных доклада и один мини-доклад:&lt;/p&gt;
&lt;p&gt;Доклад Игоря Старикова (основатель Python сайта &lt;a href="http://pythonz.net/"&gt;http://pythonz.net/&lt;/a&gt;) - "Разработчик разработчику: Азбука вежливости"&lt;/p&gt;
&lt;p&gt;Доклад Артёма Попова &lt;a href="https://vk.com/id42320764"&gt;https://vk.com/id42320764&lt;/a&gt; - "Python в музыке. osc, midi и asyncio"&lt;/p&gt;
&lt;p&gt;Мини-доклад Александра Сапронова (&lt;a href="https://vk.com/sapronov.alexander"&gt;https://vk.com/sapronov.alexander&lt;/a&gt;), который расскажет о новостях из мира Python: "Commit ускоривший Python 2.7.11 на 30% и новое в Python 3.5"&lt;/p&gt;</summary></entry><entry><title>Таинство стандартной библиотеки: functools.partial</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./20/tainstvo-standartnoi-biblioteki-functoolspartial/" rel="alternate"></link><updated>2015-08-20T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-20:posts/2015/авг./20/tainstvo-standartnoi-biblioteki-functoolspartial/</id><summary type="html">&lt;p&gt;Представим, написали мы функцию:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...........&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;run_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Но вот беда, первый аргумент - имя сервера у вас уже есть. А второй, ip сервера, вы получите от пользователя, а функцию уже надо вызвать. Можно, конечно, дождаться когда будет два аргумента, тогда и запустить. А можно пойти по другому пути - воспользоваться механизмом каррирования - такое страшное слово. &lt;/p&gt;
&lt;p&gt;Каррирование - преобразование функции от (предположим) двух аргументов в функцию от первого аргумента, возвращающую функцию, результат вызова которой со вторым агрументом эквивалентен вызову первоначальной функции с упомянутыми аргументами.&lt;/p&gt;
&lt;p&gt;Мощный механизм, который нам и поможет. Пишем&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;my_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My super server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3.4/library/functools.html"&gt;https://docs.python.org/3.4/library/functools.html&lt;/a&gt;&lt;/p&gt;</summary><category term="functools"></category></entry><entry><title>Полезные инструменты: gunicorn</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./19/poleznye-instrumenty-gunicorn/" rel="alternate"></link><updated>2015-08-19T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-19:posts/2015/авг./19/poleznye-instrumenty-gunicorn/</id><summary type="html">&lt;p&gt;Вот вы написали web-проект, теперь надо его опубликовать на хостинге (или у себя на машине) (задеплоить). Начинаете жадно мучать гугл странными запросами. &lt;/p&gt;
&lt;p&gt;И вот наконец-то доходите до слов - uwsgi и gunicorn. Это серверы, которые с одной стороны предоставляют пользователям доступ к вашему проекту(сайтику), а с другой - общаются с вашим Python кодом. &lt;/p&gt;
&lt;p&gt;Стоит сказать, что gunicorn это WSGI HTTP сервер, написанный на питоне и легкий в настройке. Среди заявленных возможностей:&lt;/p&gt;
&lt;p&gt;поддержка WSGI, Django и Paster
async, sync worker
балансировка нагрузки через pre-fork и shared socket
разные хуки для расширение возможностей
Этот инструмент простой для понимания. Рекомендуем его использовать.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gunicorn.org/"&gt;http://gunicorn.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="gunicorn"></category></entry><entry><title>Извлечение информации: парсинг дат/времени</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./19/izvlechenie-informatsii-parsing-datvremeni/" rel="alternate"></link><updated>2015-08-19T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-19:posts/2015/авг./19/izvlechenie-informatsii-parsing-datvremeni/</id><summary type="html">&lt;p&gt;Извлечение информации из текста/web-страниц сопряжено с эвристиками. 
Одна из проблем, с которой сталкиваются разработчики - как парсить даты. Даты можно написать 100 и одним способом:
tomorrow, а еще 4/4/80 или March 5th, 1980. И какой код писать, чтобы понять эти даты?&lt;/p&gt;
&lt;p&gt;К счастью, код уже написан - &lt;a href="https://github.com/bear/parsedatetime"&gt;https://github.com/bear/parsedatetime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Данная библиотека позволяет спарсить время в самых различных форматах.&lt;/p&gt;</summary><category term="парсинг"></category></entry><entry><title>Статическая типизация в Python: сила опциональной типизации</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./18/staticheskaia-tipizatsiia-v-python-sila-optsionalnoi-tipizatsii/" rel="alternate"></link><updated>2015-08-18T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-18:posts/2015/авг./18/staticheskaia-tipizatsiia-v-python-sila-optsionalnoi-tipizatsii/</id><summary type="html">&lt;p&gt;Не секрет, что Python (CPython) - динамически типизируемый язык (все типы выясняются во время выполнения программы). Это как дар так и проклятие. С одной стороны - можно быстрее писать программы, с другой - тяжелее найти ошибки. При этом, если была бы статическая типизация - уже на этапе компиляции мы знали бы где мы затупили с типами.&lt;/p&gt;
&lt;p&gt;В этом видео рассказывается, как же можно использовать опциональную статическую типизацию в Python
&lt;a class='embedly-card' data-card-chrome='0' href='https://www.youtube.com/watch?v=NdX0-FnypjE'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary></entry><entry><title>Тесты тесты тесты: nose</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./18/testy-testy-testy-nose/" rel="alternate"></link><updated>2015-08-18T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-18:posts/2015/авг./18/testy-testy-testy-nose/</id><summary type="html">&lt;p&gt;nose — это инструмент для прогона тестов посредством unittest (и doctest, с ключом --with-doctest). Имеет также собственное API, использовать которое необязательно. 
nose автоматически собирает тесты из файлов вида test_*, достаточно умен, чтобы заглянуть в папочку tests при наличии таковой, умеет измерять покрытие кода (code coverage) при помощи coverage.py (--with-coverage). Также можно запустить только тесты, которые отвалились в последний прогон (--failed).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://nose.readthedocs.org/en/latest/"&gt;https://nose.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;</summary><category term="тест"></category><category term="nose"></category></entry><entry><title>Полезные инструменты: Pycharm</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./17/poleznye-instrumenty-pycharm/" rel="alternate"></link><updated>2015-08-17T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-17:posts/2015/авг./17/poleznye-instrumenty-pycharm/</id><summary type="html">&lt;p&gt;Pycharm - это IDE специализированная под Python разработку.&lt;/p&gt;
&lt;p&gt;Возможности этого редактора кода захватывают:
- Статический анализ кода, подсветка синтаксиса и ошибок.
- Рефакторинг: переименование, извлечение метода, введение переменной, введение константы, подъём и спуск метода и т. д.
- Инструменты для веб-разработки с использованием фреймворка Django
- Встроенный отладчик для Python
- Встроенные инструменты для юнит-тестирования
- Поддержка систем контроля версий (Git, svn и другие)
- По-мимо этого, Pycharm поддержку множество модулей, например, IPython встроен в редактор. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;https://www.jetbrains.com/pycharm/&lt;/a&gt;&lt;/p&gt;</summary><category term="ide"></category><category term="pycharm"></category></entry><entry><title>Синтаксис Python: изменяемые и неизменяемые типы данных</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./17/sintaksis-python-izmeniaemye-i-neizmeniaemye-tipy-dannykh/" rel="alternate"></link><updated>2015-08-17T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-17:posts/2015/авг./17/sintaksis-python-izmeniaemye-i-neizmeniaemye-tipy-dannykh/</id><summary type="html">&lt;p&gt;Все типы данных в Python относятся к одной из 2-х категорий: изменяемые (mutable) и неизменяемые (unmutable). Многие из предопределённых типов данных Python — это типы неизменяемых объектов: числовые данные (int, float, complex), символьные строки (class 'str'), кортежи (tuple). Другие типы определены как изменяемые: списки (list), множества (set), словари (dict). Вновь определяемые пользователем типы (классы) могут быть определены как неизменяемые или изменяемые. Изменяемость объектов определённого типа является принципиально важной характеристикой, определяющей, может ли объект такого типа выступать в качестве ключа для словарей (dict) или нет.&lt;/p&gt;
&lt;p&gt;Подробнее по ссылке - &lt;a href="https://www.ibm.com/developerworks/ru/library/l-python_details_02/"&gt;https://www.ibm.com/developerworks/ru/library/l-python_details_02/&lt;/a&gt;&lt;/p&gt;</summary><category term="типы данных"></category></entry><entry><title>Python hardcore: Cython</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./16/python-hardcore-cython/" rel="alternate"></link><updated>2015-08-16T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-16:posts/2015/авг./16/python-hardcore-cython/</id><summary type="html">&lt;p&gt;Cython — язык программирования, упрощающий написание модулей С/С++ кода для Python. Кроме стандартного синтаксиса Python, поддерживаются:&lt;/p&gt;
&lt;p&gt;Прямой вызов функций и методов С/С++ из кода на Cython;
Строгая типизация переменных, классов, атрибутов классов.&lt;/p&gt;
&lt;p&gt;Код Cython преобразуется в С/С++ код для последующей компиляции и впоследствии может использоваться как расширение стандартного Python или как независимое приложение со встроенной библиотекой выполнения Cython.&lt;/p&gt;
&lt;p&gt;Программирование на Cyhton не очень отличается от Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cdef ackermann(int m, int n):
....if m == 0:
........return n + 1
....elif n == 0:
........return ackermann(m - 1, 1)
....else:
........return ackermann(m - 1, ackermann(m, n - 1))

print(&amp;quot;Ackermann:&amp;quot;)
print(ackermann(0, 3))
print(ackermann(1, 4))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Отличается в необходимости указывать типы переменных (это в основном).&lt;/p&gt;
&lt;p&gt;Хорошее применение языка - связка с C/C++ кодом - оно происходит в разы быстрее, чем в CPython и PyPi. Скорость исполнения программы также выше (может достигать сотен раз).  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cython.org/"&gt;http://cython.org/&lt;/a&gt;
&lt;a href="https://www.wikiwand.com/ru/Cython"&gt;https://www.wikiwand.com/ru/Cython&lt;/a&gt;&lt;/p&gt;</summary><category term="cython"></category><category term="оптимизация"></category></entry><entry><title>Python и асинхронные задачи</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./16/python-i-asinkhronnye-zadachi/" rel="alternate"></link><updated>2015-08-16T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-16:posts/2015/авг./16/python-i-asinkhronnye-zadachi/</id><summary type="html">&lt;p&gt;Celery — распределенная очередь заданий
И так, что же умеет Celery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Выполнять задания асинхронно или синхронно&lt;/li&gt;
&lt;li&gt;Выполнять периодические задания(умная замена crond)&lt;/li&gt;
&lt;li&gt;Выполнять отложенные задания&lt;/li&gt;
&lt;li&gt;Распределенное выполнение (может быть запущен на N серверах)&lt;/li&gt;
&lt;li&gt;В пределах одного worker'а возможно конкурентное выполнение нескольких задач(одновременно)&lt;/li&gt;
&lt;li&gt;Выполнять задание повторно, если вылез exception&lt;/li&gt;
&lt;li&gt;Ограничивать количество заданий в единицу времени(rate limit, для задания или глобально)&lt;/li&gt;
&lt;li&gt;Routing заданий(какому worker'у что делать)&lt;/li&gt;
&lt;li&gt;Несложно мониторить выполнение заданий&lt;/li&gt;
&lt;li&gt;Выполнять подзадания&lt;/li&gt;
&lt;li&gt;Присылать отчеты об exception'ах на email&lt;/li&gt;
&lt;li&gt;Проверять выполнилось ли задание(удобно для построения Ajax приложений, где юзер ждет факта завершения)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Применение очередей задач широкое - если у вас есть задачи, которые можно выполнить не прям сейчас, а чуть позже - то стоит использовать. Примеры таких задач - парсинг RSS, отправка Email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="celery"></category></entry><entry><title>Рисование графиков на Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./15/risovanie-grafikov-na-python/" rel="alternate"></link><updated>2015-08-15T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-15:posts/2015/авг./15/risovanie-grafikov-na-python/</id><summary type="html">&lt;p&gt;Графики бывают совсем разные. Де-факто стандартом в питоне для построения графиков является matplotlib. Это такой комбайн, который умеет очень много, даже 3Д графики. &lt;/p&gt;
&lt;p&gt;Matplotlib написан и поддерживался в основном Джоном Хантером (англ. John Hunter) и распространяется на условиях BSD-подобной лицензии. Генерируемые в различных форматах изображения могут быть использованы в интерактивной графике, в научных публикациях, графическом интерфейсе пользователя, веб-приложениях, где требуется построение диаграмм.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://matplotlib.org/"&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="график"></category><category term="matplotlib"></category></entry><entry><title>Python в играх: PyGame</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./15/python-v-igrakh-pygame/" rel="alternate"></link><updated>2015-08-15T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-15:posts/2015/авг./15/python-v-igrakh-pygame/</id><summary type="html">&lt;p&gt;Pygame - это кроссплатформенная библиотека языка Python, предназначенная для написания компьютерных игр и мультимедиа приложений.&lt;/p&gt;
&lt;p&gt;Для знакомства с возможностями PyGame ссылки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/130726/"&gt;http://habrahabr.ru/post/130726/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/130726/"&gt;http://habrahabr.ru/post/130726/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/164229/"&gt;http://habrahabr.ru/post/164229/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/193888/"&gt;http://habrahabr.ru/post/193888/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pygame.org/"&gt;http://www.pygame.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pygame"></category></entry><entry><title>Python в играх: где используется Python?</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./14/python-v-igrakh-gde-ispolzuetsia-python/" rel="alternate"></link><updated>2015-08-14T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-14:posts/2015/авг./14/python-v-igrakh-gde-ispolzuetsia-python/</id><summary type="html">&lt;p&gt;Сегодня вашему вниманию представляется статья и небольшая инфографика, которая покажет вам на конкретных примерах, что Python столь же эффективен в разработке игр, как и в других областях.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tproger.ru/articles/python-powered-games/"&gt;http://tproger.ru/articles/python-powered-games/&lt;/a&gt;&lt;/p&gt;</summary><category term="игры"></category></entry><entry><title>Python на службе народа: Я выключил духовку?</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./14/python-na-sluzhbe-naroda-ia-vykliuchil-dukhovku/" rel="alternate"></link><updated>2015-08-14T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-14:posts/2015/авг./14/python-na-sluzhbe-naroda-ia-vykliuchil-dukhovku/</id><summary type="html">&lt;p&gt;Программирование должно упрощать жизнь. Распознавание образов это интересная задача, но далеко не всегда надо обучать нейронную сеть, вычислять на видеокарте.&lt;/p&gt;
&lt;p&gt;OpenCV это библиотека компьютерного зрения. Которая ОЧЕНЬ много умеет чего. По ссылке вы сможете найти пример использование OpenCV для определения "Выключил ли я духовку?"&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kazuar.github.io/light-detection-opencv/"&gt;http://kazuar.github.io/light-detection-opencv/&lt;/a&gt;&lt;/p&gt;</summary><category term="opencv"></category></entry><entry><title>Python оптимизации: сверхоптимизация кода на Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./13/python-optimizatsii-sverkhoptimizatsiia-koda-na-python/" rel="alternate"></link><updated>2015-08-13T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-13:posts/2015/авг./13/python-optimizatsii-sverkhoptimizatsiia-koda-na-python/</id><summary type="html">&lt;p&gt;&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=K3qL3NqZDcE'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="hardcore"></category><category term="оптимизация"></category></entry><entry><title>Опыт разработчиков: "Перестаньте писать классы"</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./13/opyt-razrabotchikov-perestante-pisat-klassy/" rel="alternate"></link><updated>2015-08-13T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-13:posts/2015/авг./13/opyt-razrabotchikov-perestante-pisat-klassy/</id><summary type="html">&lt;p&gt;Признак того, что объект не должен быть классом — если в нём всего 2 метода, и один из них — инициализация, &lt;code&gt;__init__&lt;/code&gt;. Каждый раз видя это, подумайте: «наверное, мне нужна просто одна функция».&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/140581/"&gt;http://habrahabr.ru/post/140581/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/143620/"&gt;http://habrahabr.ru/post/143620/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Парсинг и Python: mechanize</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./12/parsing-i-python-mechanize/" rel="alternate"></link><updated>2015-08-12T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-12:posts/2015/авг./12/parsing-i-python-mechanize/</id><summary type="html">&lt;p&gt;Для сбора данных с Web-страниц в Python существует библиотека mechanize, автоматизирующая взаимодействие с Web-сайтами. Часто используемая совместно с ней библиотека Beautiful Soup помогает понять тот «почти-HTML» код, который обычно находится на Web-сайтах.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ibm.com/developerworks/ru/library/l-python-mechanize-beautiful-soup/"&gt;http://www.ibm.com/developerworks/ru/library/l-python-mechanize-beautiful-soup/&lt;/a&gt;&lt;/p&gt;</summary><category term="парсинг"></category><category term="mechanize"></category></entry><entry><title>Таинство стандартной библиотеки: примеры для asyncio - aiohttp</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./12/tainstvo-standartnoi-biblioteki-primery-dlia-asyncio-aiohttp/" rel="alternate"></link><updated>2015-08-12T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-12:posts/2015/авг./12/tainstvo-standartnoi-biblioteki-primery-dlia-asyncio-aiohttp/</id><summary type="html">&lt;p&gt;Asyncio - это модуль содержащий инфраструктуру пригодную для написания асинхронных сетевых приложений. Благодаря концепции сопрограмм (coroutines), код асинхронного приложения прост для понимания и поддержки. &lt;/p&gt;
&lt;p&gt;Экосистема развивается не по дням, а по часам. Стоит обратить внимание на развитие этого направления современного Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sysdev.me/python-asyncio/"&gt;http://sysdev.me/python-asyncio/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio-dev.html"&gt;https://docs.python.org/3/library/asyncio-dev.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="asyncio"></category><category term="aiohttp"></category></entry><entry><title>Тесты тесты тесты: что такое фикстура (fixture)?</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./11/testy-testy-testy-chto-takoe-fikstura-fixture/" rel="alternate"></link><updated>2015-08-11T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-11:posts/2015/авг./11/testy-testy-testy-chto-takoe-fikstura-fixture/</id><summary type="html">&lt;p&gt;При написании тестов не редка ситуация, когда надо иметь фиксированное воспроизводимое много раз состояние программы. Например, такая-то кнопочка нажата, такой-то класс содержит такие-то значения.&lt;/p&gt;
&lt;p&gt;Чтобы не приходилось каждый раз вручную создавать подобное состояние программы используются fixture (фикстуры). 
Фикстуры позволяют сохранить состояние системы в файл, а потом его от туда загрузить. &lt;/p&gt;
&lt;p&gt;По-мимо тестов, фикстуры применяются для создания начального состояния системы. Например, есть проект, который использует базу данных(БД). И возникает задача развернуть проект на новом компьютере. Можно перетаскивать БД и чистить от лишнего. А можно сохранить первичное состояние в файле и затем его подгрузить.&lt;/p&gt;
&lt;p&gt;Ссылки для погружения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://farmdev.com/projects/fixture/"&gt;http://farmdev.com/projects/fixture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythontesting.net/framework/pytest/pytest-fixtures-easy-example/"&gt;http://pythontesting.net/framework/pytest/pytest-fixtures-easy-example/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/howto/initial-data/"&gt;https://docs.djangoproject.com/en/1.8/howto/initial-data/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="тест"></category><category term="fixture"></category></entry><entry><title>Тесты тесты тесты: пропускаем тесты в pytest по условию</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./11/testy-testy-testy-propuskaem-testy-v-pytest-po-usloviiu/" rel="alternate"></link><updated>2015-08-11T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-11:posts/2015/авг./11/testy-testy-testy-propuskaem-testy-v-pytest-po-usloviiu/</id><summary type="html">&lt;p&gt;Тесты не всегда универсальны. Например, в Windows надо дергать одну программу, в Linux другую. Чтобы реализовать такую логику в pytest можно воспользоваться - &lt;code&gt;skipif&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="nd"&gt;@pytest.mark.skipif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;requires python3.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вот такой пример демонстрирует как можно пропустить тест, если запуск происходит в Python версии ниже 3.3.&lt;/p&gt;</summary><category term="тест"></category><category term="pytest"></category></entry><entry><title>Установка библиотек в Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./10/ustanovka-bibliotek-v-python/" rel="alternate"></link><updated>2015-08-10T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-10:posts/2015/авг./10/ustanovka-bibliotek-v-python/</id><summary type="html">&lt;p&gt;Репозиторий pypi содержит более 62к модулей. Такое количество готовых инструментов, в дополнение к богатой стандартной поставке, позволяет заметно упростить разработку новых проектов. Вот только новички сталкиваются с проблемой установки этих самых модулей. &lt;/p&gt;
&lt;p&gt;Стандартным способом установки новых модулей является pip (и easy_install). pip &lt;a href="https://pip.pypa.io/en/latest/index.html"&gt;https://pip.pypa.io/en/latest/index.html&lt;/a&gt; это инструмент, который упрощает управление модулями.&lt;/p&gt;
&lt;p&gt;Вы можете установить модуль, например numpy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Удалить, его же:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip unistall numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Можете получить список библиотеки уже установленных - &lt;code&gt;pip list&lt;/code&gt;
Это не весь список команд, но и его достаточно для установки библиотек буквально в 1 команду.&lt;/p&gt;</summary><category term="pip"></category><category term="pypi"></category></entry><entry><title>Магические методы в Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./10/magicheskie-metody-v-python/" rel="alternate"></link><updated>2015-08-10T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-10:posts/2015/авг./10/magicheskie-metody-v-python/</id><summary type="html">&lt;p&gt;Статья от  Rafe Kettler.&lt;/p&gt;
&lt;p&gt;Что такое магические методы? Они всё в объектно-ориентированном Питоне. Это специальные методы, с помощью которых вы можете добавить в ваши классы «магию». Они всегда обрамлены двумя нижними подчеркиваниями (например, &lt;strong&gt;init&lt;/strong&gt; или &lt;strong&gt;lt&lt;/strong&gt;). Ещё, они не так хорошо документированны, как хотелось бы. Все магические методы описаны в документации, но весьма беспорядочно и почти безо всякой организации. Поэтому, чтобы исправить то, что я воспринимаю как недостаток документации Питона, я собираюсь предоставить больше информации о магических методах, написанной на понятном языке и обильно снабжённой примерами. Надеюсь, это руководство вам понравится. Используйте его как обучающий материал, памятку или полное описание.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://habrahabr.ru/post/186608/"&gt;http://habrahabr.ru/post/186608/&lt;/a&gt;&lt;/p&gt;</summary><category term="стандартная библиотека"></category></entry><entry><title>Таинство стандартной библиотеки: collections</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./09/tainstvo-standartnoi-biblioteki-collections/" rel="alternate"></link><updated>2015-08-09T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-09:posts/2015/авг./09/tainstvo-standartnoi-biblioteki-collections/</id><summary type="html">&lt;p&gt;Модуль collections - предоставляет специализированные типы данных, на основе словарей, кортежей, множеств, списков. Этот модуль хорошо себя показывает при частой работе со словарями и списками. 
Например, данный модуль предоставляет возможность посчитать n наиболее часто встречающихся элементов, в порядке убывания встречаемости. Есть в этом модуле и словарь, который помнит порядок ключей. А еще есть структура, которая позволяет создать объект ведущий себя как кортеж, с тем дополнением, что каждому элементу присваивается имя, по которому можно в дальнейшем получать доступ.&lt;/p&gt;
&lt;p&gt;Заинтересовал? 
Вот ссылки для дальнейшего погружения в тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/collections.html"&gt;https://docs.python.org/3.5/library/collections.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-collections.html"&gt;http://pythonworld.ru/moduli/modul-collections.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Таинство стандартной библиотеки: datetime и calendar</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./09/tainstvo-standartnoi-biblioteki-datetime-i-calendar/" rel="alternate"></link><updated>2015-08-09T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-09:posts/2015/авг./09/tainstvo-standartnoi-biblioteki-datetime-i-calendar/</id><summary type="html">&lt;p&gt;Стандартная поставка Python содержит множество инструментов для решения задач. Например, для работы с датами отлично себя показывают datetime и calendar&lt;/p&gt;
&lt;p&gt;Модуль datetime предоставляет классы для обработки времени и даты разными способами. Поддерживается и стандартный способ представления времени, однако больший упор сделан на простоту манипулирования датой, временем и их частями.&lt;/p&gt;
&lt;p&gt;Модуль calendar позволяет напечатать себе календарик (а также содержит некоторые другие полезные функции для работы с календарями). &lt;/p&gt;
&lt;p&gt;Возможности этих модулей обширны. Стоит их рассмотреть внимательно.
Для этого приведем ссылки:&lt;/p&gt;
&lt;p&gt;datetime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/datetime.html"&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-datetime.html"&gt;http://pythonworld.ru/moduli/modul-datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/datetime/"&gt;http://pymotw.com/2/datetime/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;calendar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/calendar.html"&gt;https://docs.python.org/2/library/calendar.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/calendar/"&gt;http://pymotw.com/2/calendar/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Python и real-time web приложение</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./08/python-i-real-time-web-prilozhenie/" rel="alternate"></link><updated>2015-08-08T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-08:posts/2015/авг./08/python-i-real-time-web-prilozhenie/</id><summary type="html">&lt;p&gt;Далеко не всегда требуется тащить мощный Django или другой фреймворк. Бывает достаточно небольшого количества чистого Python кода и базы данных.
Посмотрим, как имея всего эти 2 элемента написать приложение.
&lt;a class='embedly-card' data-card-chrome='0' href='https://www.youtube.com/watch?v=PsorlkAF83s'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary></entry><entry><title>Python + GUI == PyQt</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./08/python-gui-pyqt/" rel="alternate"></link><updated>2015-08-08T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-08:posts/2015/авг./08/python-gui-pyqt/</id><summary type="html">&lt;p&gt;Qt - это инструментарий для разработки на C++, который предоставляет огромный спектр возможностей: от рисования GUI, до написания низкоуровневых серверов. 
Часто Qt применяют для создания GUI, в том числе в интерактивном режиме - можно перемещать виджеты на формы.
Qt имеет отличную докумементацию, а также имеет привязку для Python - PyQt и PySide. (вторая еще с Qt5 не умеет работать)&lt;/p&gt;
&lt;p&gt;Используя PyQt можно нарисовать формочку в редакторе, а затем буквально одной строчкой начать писать логику.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PyQt"&gt;https://wiki.python.org/moin/PyQt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.su/Документации/ВведениеВСредуPyQt4"&gt;http://wiki.python.su/Документации/ВведениеВСредуPyQt4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Python как средство для определения "хорошо/плохо"</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./07/python-kak-sredstvo-dlia-opredeleniia-khoroshoplokho/" rel="alternate"></link><updated>2015-08-07T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-07:posts/2015/авг./07/python-kak-sredstvo-dlia-opredeleniia-khoroshoplokho/</id><summary type="html">&lt;p&gt;Информации очень много. Хорошо бы уметь ее фильтровать. Хочется упомянуть такое средство фильтрации как анализ тональности. Это даже не фильтрация, но можно применять как фильтр.&lt;/p&gt;
&lt;p&gt;Sentiment analysis (по-русски, анализ тональности) — это область компьютерной лингвистики, которая занимается изучением мнений и эмоций в текстовых документах. &lt;/p&gt;
&lt;p&gt;С помощью анализа тональности можно определить, что текст N интересный, а текст M неинтересный - причем это сделает компьютер за вас.&lt;/p&gt;
&lt;p&gt;Для погружения в эту тему стоит почитать эти ссылки:
- &lt;a href="http://habrahabr.ru/post/149605/"&gt;http://habrahabr.ru/post/149605/&lt;/a&gt;
- &lt;a href="http://habrahabr.ru/post/263171/"&gt;http://habrahabr.ru/post/263171/&lt;/a&gt;
- &lt;a href="http://habrahabr.ru/post/197890/"&gt;http://habrahabr.ru/post/197890/&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Утилиты написанные на Python: youtube-dl</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./07/utility-napisannye-na-python-youtube-dl/" rel="alternate"></link><updated>2015-08-07T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-07:posts/2015/авг./07/utility-napisannye-na-python-youtube-dl/</id><summary type="html">&lt;p&gt;youtube-dl (https://github.com/rg3/youtube-dl/)
- это очень популярный скрипт для выгрузки видео с сервиса Youtube (, Vimeo и других). Данная утилита позволяет очень легко выдернуть видео со страницы ютьюб. 
Множество настроек позволяют в том числе выдернуть субтитры, узнать длительность видео и многие другие параметры.&lt;/p&gt;
&lt;p&gt;Данную утилиту можно применить следующим образом: если у вас есть ряд каналов, которые вы смотрите регулярно, то часто задаетесь вопросом "Вышло новое видео или нет?".
Чтобы не тыкаться по 10 раз на дню на сайт (плюс к этому, "котики" могут отвлечь на несколько часов), вы можете соединить несколько сервисов вместе и новые видео будут автоматически попадать к вам на компьютер. &lt;/p&gt;</summary></entry><entry><title>Что такое PEP?</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./06/chto-takoe-pep/" rel="alternate"></link><updated>2015-08-06T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-06:posts/2015/авг./06/chto-takoe-pep/</id><summary type="html">&lt;p&gt;Развитие языка Python происходит согласно чётко регламентированному процессу создания, обсуждения, отбора и реализации документов PEP.
PEP - Python Enhancement Proposal - это предложения по развитию питона
&lt;a href="https://www.python.org/dev/peps/"&gt;https://www.python.org/dev/peps/&lt;/a&gt;
Процесс PEP является основным механизмом для предложения новых возможностей и для документирования проектных решений, которые прошли в Python.&lt;/p&gt;
&lt;p&gt;Самым известным PEP является PEP8 - это свод рекомендаций в оформлению кода. Рекомендации написаны кровью из глаз программистов.
&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;https://www.python.org/dev/peps/pep-0008/&lt;/a&gt;&lt;/p&gt;</summary><category term="pep"></category><category term="стандарт"></category></entry><entry><title>Python и базы данных: много баз - много модулей или один?</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./06/python-i-bazy-dannykh-mnogo-baz-mnogo-modulei-ili-odin/" rel="alternate"></link><updated>2015-08-06T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-06:posts/2015/авг./06/python-i-bazy-dannykh-mnogo-baz-mnogo-modulei-ili-odin/</id><summary type="html">&lt;p&gt;Без баз данных (БД) в современной разработке редко обходится. Питон не обделен и имеет множество модулей для работы с базами данных. Есть и специализированные, например, pymongo - модуль для MongoDB, есть и более обширные - sqlalchemy, PonyORB.&lt;/p&gt;
&lt;p&gt;sqlalchemy - это &lt;a href="https://www.wikiwand.com/ru/ORM"&gt;ORM&lt;/a&gt; для различных БД. Если просто, то это инструмент, написать структуру данных и работать с ней, а "алхимия" будет самостоятельно сохранять/подгружать из БД данные.
sqlalchemy умеет работать со всеми популярными реляционными БД.&lt;/p&gt;</summary><category term="sqlalchemy"></category><category term="БД"></category></entry><entry><title>Python и интересный парсинг сайтов</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./05/python-i-interesnyi-parsing-saitov/" rel="alternate"></link><updated>2015-08-05T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-05:posts/2015/авг./05/python-i-interesnyi-parsing-saitov/</id><summary type="html">&lt;p&gt;Излечение информации со страниц может быть интересным. Рекомендуем к просмотру видео
&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=hj-8l3AejNc'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary></entry><entry><title>Bottle с Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./05/bottle-s-python/" rel="alternate"></link><updated>2015-08-05T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-05:posts/2015/авг./05/bottle-s-python/</id><summary type="html">&lt;p&gt;bottle - это веб-фреймворк для Python. Отличительной особенностью этого фреймворка является простота - исходный код занимает один файл. Несмотря на свою минималистичность, Bottle предоставляет довольно широкие возможности, которых на 100% хватает для мелких и средних проектов.
Чтобы стартануть изучение достаточно написать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;b&amp;gt;Hello {{name}}&amp;lt;/b&amp;gt;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Это запустит web-приложение на 8080 порту, а по ссылке &lt;code&gt;http://127.0.0.1/hello/Alexander&lt;/code&gt; вы увидите Hello Alexander.
Очень просто.&lt;/p&gt;
&lt;p&gt;Дальнейшее изучение можно продолжить по ссылкам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;http://bottlepy.org/docs/dev/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/221659/"&gt;http://habrahabr.ru/post/221659/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/250831/"&gt;http://habrahabr.ru/post/250831/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="bottle"></category><category term="web"></category></entry><entry><title>Тесты тесты тесты: модуль тестирования py.test</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./04/testy-testy-testy-modul-testirovaniia-pytest/" rel="alternate"></link><updated>2015-08-04T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-04:posts/2015/авг./04/testy-testy-testy-modul-testirovaniia-pytest/</id><summary type="html">&lt;p&gt;Наряду с входящими в стандартную поставку питона средствами для тестирования, существуют и альтернативные инструменты, например, py.test. &lt;a href="http://pytest.org/"&gt;http://pytest.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;py.test имеет множество расширений, которые значительно упрощают написание тестов.
py.test имеет плагины для всех популярных web-фреймворков, с помощью плагинов позволяет кэшеировать результаты (успешных тестов), формировать отчеты в самых различных форматах.
А также имеет очень простую систему расширения и вы можете буквально за день написать свой плагин.
&lt;a class='embedly-card' data-card-chrome='0' href='http://pytest.org/latest/_static/pytest1.png'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="тест"></category><category term="unittest"></category></entry><entry><title>Тесты тесты тесты: создание читаемых отчетов</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./04/testy-testy-testy-sozdanie-chitaemykh-otchetov/" rel="alternate"></link><updated>2015-08-04T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-04:posts/2015/авг./04/testy-testy-testy-sozdanie-chitaemykh-otchetov/</id><summary type="html">&lt;p&gt;Тесты тесты тесты: создание читаемых отчетов&lt;/p&gt;
&lt;p&gt;Когда в вашей программе очень много тестов, то возникают проблемы с чтением отчетов (что сломалось, что корректно отработало). Для создания читаемых отчетов можно порекомендовать allure-framework. О этом фреймворке можно узнать в видео:
&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=d5SreR6dGnE'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/allure-framework"&gt;https://github.com/allure-framework&lt;/a&gt;&lt;/p&gt;</summary><category term="тест"></category><category term="test"></category><category term="отчет"></category></entry><entry><title>Синтаксис Python: конструкция switch</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./03/sintaksis-python-konstruktsiia-switch/" rel="alternate"></link><updated>2015-08-03T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-03:posts/2015/авг./03/sintaksis-python-konstruktsiia-switch/</id><summary type="html">&lt;p&gt;Стоит упомянуть про конструкцию switch в Python. Такой конструкции в языке нет, однако, выкрутится можно. Часто рекомендуют писать множественные elif'ы, но можно сделать так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;switch_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You entered &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;an out of range number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Input a number between 1 and 3: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;switch_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В этом примере мы создаем словарь, а затем получаем значение по нужному нам ключу.&lt;/p&gt;
&lt;p&gt;Вот только этот подход не работает, когда значение switch'а вычисляется в динамике. (Например, если мы приветствуем/прощаемся какого-то пользователя). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}[&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В этом случае мы все также создаем словарь, но в качестве значений словаря прописываем функцию (в примере - lamdba функции). Затем получаем эту функцию словаря и вычисляем с аргументом.&lt;/p&gt;
&lt;p&gt;Еще способы реализации switch-case в Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://code.activestate.com/recipes/410695/"&gt;Recipe 410692: Readable switch construction without lambdas or dictionaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.activestate.com/recipes/410695/"&gt;Recipe 410695: Exception-based Switch-Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.activestate.com/recipes/181064/"&gt;Recipe 181064: Using a Dictionary in place of a ’switch’ statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Синтаксис Python: трехместное выражение if/else</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./03/sintaksis-python-trekhmestnoe-vyrazhenie-ifelse/" rel="alternate"></link><updated>2015-08-03T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-03:posts/2015/авг./03/sintaksis-python-trekhmestnoe-vyrazhenie-ifelse/</id><summary type="html">&lt;p&gt;Сегодня хочется упомянуть о непонятной на первый взгляд конструкции - тернарная условная операция, или по-русски - трехместное выражение &lt;code&gt;if/else&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Представим, есть такой код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;довольно короткая, но, тем не менее, занимает целых 4 строки. Специально для таких случаев и было придумано выражение &lt;code&gt;if/else&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;Z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В данной инструкции интерпретатор выполнит выражение Y, если X истинно, в противном случае выполнится выражение Z.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;t&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;spam&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;t&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Синтаксис конструкции if-elif-else описан по ссылкам&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/tutorial/controlflow.html"&gt;https://docs.python.org/3/tutorial/controlflow.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/osnovy/instrukciya-if-elif-else-proverka-istinnosti-trexmestnoe-vyrazhenie-ifelse.html"&gt;http://pythonworld.ru/osnovy/instrukciya-if-elif-else-proverka-istinnosti-trexmestnoe-vyrazhenie-ifelse.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="if"></category><category term="синтаксис"></category></entry><entry><title>Рисование svg графиков</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./02/risovanie-svg-grafikov/" rel="alternate"></link><updated>2015-08-02T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-02:posts/2015/авг./02/risovanie-svg-grafikov/</id><summary type="html">&lt;p&gt;Для рисования векторных графиков (svg) подойдет библиотека pygal - &lt;a href="http://pygal.org/"&gt;http://pygal.org/&lt;/a&gt; 
Данный модуль предоставляет широкий спектр возможностей, в частности можно нарисовать:&lt;/p&gt;
&lt;p&gt;Столбчатые диаграммы
Линейные диаграммы
XY диаграммы
Круговые диаграммы
Лепестковые диаграммы
и другие&lt;/p&gt;</summary><category term="график"></category><category term="svg"></category></entry><entry><title>Статистический модуль в стандартной библиотеке</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./02/statisticheskii-modul-v-standartnoi-biblioteke/" rel="alternate"></link><updated>2015-08-02T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-02:posts/2015/авг./02/statisticheskii-modul-v-standartnoi-biblioteke/</id><summary type="html">&lt;p&gt;Статистический модуль теперь есть в стандартной библиотеке.
Начиная с версии 3.4 в стандартной поставке Python появилось более продвинутое средство для работы с данными. Теперь нет необходимости писать руками методы average, median (вычисление среднего и медианы)  и других. Ознакомьтесь с возможностями стандартного модуля:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/statistics.html"&gt;https://docs.python.org/3/library/statistics.html&lt;/a&gt;&lt;/p&gt;</summary><category term="статистика"></category></entry><entry><title>Python + winapi</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./01/python-winapi/" rel="alternate"></link><updated>2015-08-01T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-01:posts/2015/авг./01/python-winapi/</id><summary type="html">&lt;p&gt;Пишите под windows, да еще и с Win API? Python здесь тоже может помочь, ведь для него есть библиотека pywin32 (http://sourceforge.net/projects/pywin32/). Данная библиотека предоставляет все базовые примитивы для работы с WinAPI.&lt;/p&gt;</summary><category term="winapi"></category></entry><entry><title>click</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./01/click/" rel="alternate"></link><updated>2015-08-01T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-01:posts/2015/авг./01/click/</id><summary type="html">&lt;p&gt;Библиотека click (&lt;a href="http://click.pocoo.org/4/"&gt;http://click.pocoo.org/4/&lt;/a&gt;) позволяет с минимальными усилиями создать интерфейс командной строки. 
Создаете функцию, добавляете пару декораторов и готово.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;click&lt;/span&gt;

&lt;span class="nd"&gt;@click.command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@click.option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Number of greetings.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@click.option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Your name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The person to greet.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А как вы создаете командные интерфейсы?&lt;/p&gt;</summary></entry><entry><title>JSON DSL - JSL</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/31/json-dsl-jsl/" rel="alternate"></link><updated>2015-07-31T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-31:posts/2015/июля/31/json-dsl-jsl/</id><summary type="html">&lt;p&gt;Если вы широко используете JSON в своем проекте, то вам будет интересен DSL - JSL.
JSL позволяет описывать модели, почти в какой-нибудь ORM, создавать объекты по этим моделям и как-то с ними работать.
Интересный проект.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aromanovich/jsl"&gt;https://github.com/aromanovich/jsl&lt;/a&gt;&lt;/p&gt;</summary><category term="dsl"></category><category term="json"></category></entry><entry><title>Python - язык общего назначения</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/31/python-iazyk-obshchego-naznacheniia/" rel="alternate"></link><updated>2015-07-31T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-31:posts/2015/июля/31/python-iazyk-obshchego-naznacheniia/</id><summary type="html">&lt;p&gt;Python - язык общего назначения, может применяться где угодно. Не верите? На странице &lt;a href="https://www.python.org/about/success/"&gt;https://www.python.org/about/success/&lt;/a&gt; представлены сферы и названия компаний, которые применяют этот язык.&lt;/p&gt;
&lt;p&gt;Впечатляет.&lt;/p&gt;</summary></entry><entry><title>Python и real-time?</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/30/python-i-real-time/" rel="alternate"></link><updated>2015-07-30T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-30:posts/2015/июля/30/python-i-real-time/</id><summary type="html">&lt;p&gt;Возможно!&lt;br /&gt;
Рассказ "Управление памятью в real-time приложениях Python"  Антона Патрушева покажет как можно писать Python приложения с максимально быстрым откликом.
&lt;a href="https://events.yandex.ru/lib/talks/2075/"&gt;https://events.yandex.ru/lib/talks/2075/&lt;/a&gt;&lt;/p&gt;</summary><category term="интерпретатор"></category><category term="real-time"></category></entry><entry><title>Сравнение R и Python</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/30/sravnenie-r-i-python/" rel="alternate"></link><updated>2015-07-30T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-30:posts/2015/июля/30/sravnenie-r-i-python/</id><summary type="html">&lt;p&gt;В последнее время любят сравнивать Python и R. Так давайте же почитаем сравнение этих двух языков. 
&lt;a href="http://blog.dominodatalab.com/comparing-python-and-r-for-data-science/"&gt;http://blog.dominodatalab.com/comparing-python-and-r-for-data-science/&lt;/a&gt;&lt;/p&gt;</summary><category term="R"></category><category term="python"></category><category term="сравнение"></category></entry><entry><title>Парсинг с помощью asyncio</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/29/parsing-s-pomoshchiu-asyncio/" rel="alternate"></link><updated>2015-07-29T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-29:posts/2015/июля/29/parsing-s-pomoshchiu-asyncio/</id><summary type="html">&lt;p&gt;Парсинг сайтов это вечная задача. Сайтов много, данных много и все они разные.
Для задач парсинга существует великое разнообразие инструментов.&lt;/p&gt;
&lt;p&gt;В Python 3-ей версии появился стандартный модуль для создания асинхронных программ. И грех не воспользоваться данной возможностью.&lt;/p&gt;
&lt;p&gt;Примером парсинга на asyncio может послужить эта статья 
&lt;a href="http://olegwock.net/blog/python/byistryiy-parsing-na-python-s-pomoshhyu-asyncio/"&gt;http://olegwock.net/blog/python/byistryiy-parsing-na-python-s-pomoshhyu-asyncio/&lt;/a&gt;&lt;/p&gt;</summary><category term="asyncio"></category><category term="парсинг"></category></entry><entry><title>Django REST API</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/29/django-rest-api/" rel="alternate"></link><updated>2015-07-29T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-29:posts/2015/июля/29/django-rest-api/</id><summary type="html">&lt;p&gt;Пишите web приложения? Тогда для вас не является новостью, что без API далеко не уедешь. &lt;/p&gt;
&lt;p&gt;Для фреймворка django существует несколько способов создать API за пару минут, да еще и с документацией.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;https://github.com/tomchristie/django-rest-framework&lt;/a&gt;
&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;https://github.com/marcgibbons/django-rest-swagger&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="rest"></category><category term="api"></category><category term="swagger"></category></entry><entry><title>Классы и функции</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/28/klassy-i-funktsii/" rel="alternate"></link><updated>2015-07-28T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-28:posts/2015/июля/28/klassy-i-funktsii/</id><summary type="html">&lt;p&gt;До сих путаетесь между функциями, методами, классами и объектами? Пора разобраться в этом.
Данная статья расскажет, что такое Bound и UnBound методы, как можно в динамике добавлять поля в объект, как перегружать методы.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0agr.ru/blog/2011/05/03/advanced-python-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B-%D0%B8-%D0%B8%D1%85-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B/"&gt;http://0agr.ru/blog/2011/05/03/advanced-python-%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D1%8B-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B-%D0%B8-%D0%B8%D1%85-%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B/&lt;/a&gt;&lt;/p&gt;</summary><category term="интерпретатор"></category></entry><entry><title>Имитация файловой системы с помощью mock</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/" rel="alternate"></link><updated>2015-07-28T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-28:posts/2015/июля/28/imitatsiia-failovoi-sistemy-s-pomoshchiu-mock/</id><summary type="html">&lt;p&gt;Вы пишите тесты? Тогда вам знаком модуль mock (в Python3 находится в unittest). Это модуль, который позволяет сделать имитацию объекта.&lt;/p&gt;
&lt;p&gt;Это необходимо, когда пишите тесты на свой код, а этот код использует множество долгих приготовлений: сходить в БД, разобрать данные еще что-то. Вот в этом случае вы можете провести имитацию всех этих долгих приготовлений и сконцентрироваться на написании тестов для своего кода.&lt;/p&gt;
&lt;p&gt;В случае с файловой системой немного сложней. Вот надо какие-то файлы создавать,в них что-то писать. Засорять свою домашнюю директорию папками "temp"? Не обязательно, можно имитировать файловую систему с помощью mockfs.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mockfs/mockfs"&gt;https://github.com/mockfs/mockfs&lt;/a&gt;&lt;/p&gt;</summary><category term="тест"></category><category term="mock"></category><category term="test"></category></entry><entry><title>Регулярные выражения</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/27/reguliarnye-vyrazheniia/" rel="alternate"></link><updated>2015-07-27T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-27:posts/2015/июля/27/reguliarnye-vyrazheniia/</id><summary type="html">&lt;p&gt;Предположим, у нас есть задача - выдрать из крупного текстового файла (файла с логами) все IPv4 (адреса клиентов, например). Как это можно сделать?&lt;/p&gt;
&lt;p&gt;Хорошим инструментом для решения этой задачи являются регулярные выражения. Регулярное выражение — это последовательность символов, используемая для поиска и замены текста в строке или файле.&lt;br /&gt;
Возможно, вы уже встречались с записями типа:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;([a-z]+)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Большая вероятность, что это было регулярное выражение.
Регулярные выражения - это мощный инструмент, который стоит изучить и осознать. Не надо запоминать все конструкции, достаточно понять принцип.&lt;/p&gt;
&lt;p&gt;Для погружения в эту тему, рекомендуем эти материалы:
&lt;a href="http://tproger.ru/translations/regular-expression-python/"&gt;http://tproger.ru/translations/regular-expression-python/&lt;/a&gt;
&lt;a href="http://qntm.org/files/re/re.html"&gt;http://qntm.org/files/re/re.html&lt;/a&gt;
&lt;a href="http://habrahabr.ru/post/115825/"&gt;http://habrahabr.ru/post/115825/&lt;/a&gt;
&lt;a href="http://pep8.ru/doc/dive-into-python-3/7.html"&gt;http://pep8.ru/doc/dive-into-python-3/7.html&lt;/a&gt;&lt;/p&gt;</summary><category term="регулярные выражения"></category><category term="regex"></category><category term="regexp"></category></entry><entry><title>Встроенные функции Python</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/27/vstroennye-funktsii-python/" rel="alternate"></link><updated>2015-07-27T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-27:posts/2015/июля/27/vstroennye-funktsii-python/</id><summary type="html">&lt;p&gt;Стандартная библиотека Python отличается хорошей документацией и широким ассортиментом готовых решений.
Python предоставляет без малого 68 встроенных функций: это получение модуля числа, бинарное и hex представления числа, различные преобразование типов, сложение, возведение в степень и многие другие.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/functions.html"&gt;https://docs.python.org/3.5/library/functions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А вы знали, что в Python всё является объектом? Даже число&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__abs__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__and__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;denominator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;imag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numerator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;real&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="библиотека"></category></entry><entry><title>PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir.</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/" rel="alternate"></link><updated>2015-07-25T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/</id><summary type="html">&lt;p&gt;PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir. &lt;/p&gt;
&lt;p&gt;Функция scandir возвращает генератор, который содержит директории по пути.
Польза scandir состоит в производительности. Теперь os.listdir и os.walk будут работать в 2-20 раз быстрее.&lt;/p&gt;
&lt;p&gt;Пример: функция, которая возвращает генератор с директориями начинающиеся с точки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subdirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yield directory names not starting with &amp;#39;.&amp;#39; under given path.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scandir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pep"></category><category term="фича"></category><category term="scandir"></category></entry><entry><title>Tkinter</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/tkinter/" rel="alternate"></link><updated>2015-07-25T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/tkinter/</id><summary type="html">&lt;p&gt;Родным модулем для построения GUI интерфейсов для Python программ является Tkinter.
Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы.&lt;/p&gt;
&lt;p&gt;Данный курс - &lt;a href="http://younglinux.info/tkinter.php"&gt;http://younglinux.info/tkinter.php&lt;/a&gt; - "Создание GUI на Python с помощью библиотеки Tkinter" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.).&lt;/p&gt;</summary><category term="GUI"></category><category term="интерфейс"></category><category term="tkinter"></category></entry><entry><title>Интерпретатор brainfuck на Python</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/interpretator-brainfuck-na-python/" rel="alternate"></link><updated>2015-07-25T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/interpretator-brainfuck-na-python/</id><summary type="html">&lt;p&gt;Язык brainfuck для хранения данных использует ячейки (по-хорошему бесконечное число ячеек) и состоит всего из восьми команд, поэтому выучить его будет легко.
В этой статье показан интерпретатор brainfuck на Python
&lt;a href="http://pythonworld.ru/primery-programm/interpretator-brainfuck.html"&gt;http://pythonworld.ru/primery-programm/interpretator-brainfuck.html&lt;/a&gt;&lt;/p&gt;</summary><category term="интерпретатор"></category></entry><entry><title>Набор GUI библиотек для Python</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/nabor-gui-bibliotek-dlia-python/" rel="alternate"></link><updated>2015-07-25T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/nabor-gui-bibliotek-dlia-python/</id><summary type="html">&lt;p&gt;На странице Python-wiki представлен огромный список пакетов для создания GUI на Python
&lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;https://wiki.python.org/moin/GuiProgramming&lt;/a&gt;&lt;/p&gt;</summary><category term="GUI"></category><category term="интерфейс"></category></entry><entry><title>Disqus - самое крупное django приложением в web.</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/24/disqus-samoe-krupnoe-django-prilozheniem-v-web/" rel="alternate"></link><updated>2015-07-24T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-24:posts/2015/июля/24/disqus-samoe-krupnoe-django-prilozheniem-v-web/</id><summary type="html">&lt;p&gt;Disqus — веб-сервис, который предоставляет возможность добавить форму для интернет-обсуждений и комментариев на сайт пользователя использует Python. Сервис использует Python (Django).
По заверениям Disqus - они являются самым крупным django приложением в web.
&lt;a href="https://disqus.com/"&gt;https://disqus.com/&lt;/a&gt;&lt;/p&gt;</summary><category term="проект"></category></entry><entry><title>TIOBE за июль 2015: Python находится на 5-ом месте</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/24/tiobe-za-iiul-2015-python-nakhoditsia-na-5-om-meste/" rel="alternate"></link><updated>2015-07-24T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-24:posts/2015/июля/24/tiobe-za-iiul-2015-python-nakhoditsia-na-5-om-meste/</id><summary type="html">&lt;p&gt;По рейтингу TIOBE за июль 2015 Python находится на 5-ом месте, год назад был на 8-ом.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"&gt;http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html&lt;/a&gt;&lt;/p&gt;</summary><category term="рейтинг"></category></entry><entry><title>Интересно как работает Python?</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/23/interesno-kak-rabotaet-python/" rel="alternate"></link><updated>2015-07-23T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-23:posts/2015/июля/23/interesno-kak-rabotaet-python/</id><summary type="html">&lt;p&gt;Интересно как работает Python?&lt;/p&gt;
&lt;p&gt;Рекомендуем изучить материалы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Интерпретатор Python: о чём думает змея? (часть I-III) - &lt;a href="http://habrahabr.ru/post/206420/"&gt;http://habrahabr.ru/post/206420/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python изнутри. Введение - &lt;a href="habrahabr.ru/company/buruki/blog/189972/"&gt;habrahabr.ru/company/buruki/blog/189972/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python изнутри. Объекты. Голова - &lt;a href="habrahabr.ru/company/buruki/blog/189986/"&gt;habrahabr.ru/company/buruki/blog/189986/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python изнутри. Объекты. Хвост - &lt;a href="habrahabr.ru/company/buruki/blog/190336/"&gt;habrahabr.ru/company/buruki/blog/190336/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python изнутри. Структуры процесса - &lt;a href="habrahabr.ru/company/buruki/blog/191032/"&gt;habrahabr.ru/company/buruki/blog/191032/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="интерпретатор"></category><category term="байт-код"></category></entry><entry><title>Как работает Python?</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/23/kak-rabotaet-python/" rel="alternate"></link><updated>2015-07-23T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-23:posts/2015/июля/23/kak-rabotaet-python/</id><summary type="html">&lt;p&gt;Как работает Python, что такое интерпретатор, как работает компилятор и что такое байт-код, далее расскажу о виртуальной машине (PVM) и о производительности Python. Также о альтернативных реализациях интерпретатора.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://adw0rd.com/2009/08/22/python-howto-work/"&gt;http://adw0rd.com/2009/08/22/python-howto-work/&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="интерпретатор"></category><category term="байт-код"></category></entry><entry><title>Django DB Mailer - батарейка для отправки email</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/22/django-db-mailer-batareika-dlia-otpravki-email/" rel="alternate"></link><updated>2015-07-22T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-22:posts/2015/июля/22/django-db-mailer-batareika-dlia-otpravki-email/</id><summary type="html">&lt;p&gt;В подавляющем большинстве проектов используется отправка сообщений на почтовые адреса клиентов/админов/отделов. На сколько утомительно каждый раз создавать шаблоны на файловой системе, задавать сигналы, использовать часто дублирующийся код для рендеринга и отправки.&lt;/p&gt;
&lt;p&gt;В конечном итоге встают задачи о фоновой отправке, об изменениях отправителя, приоритизации, повторной отправке сообщения в случае неудачи, частом редактировании по просьбе клиента/маркетологов, прикреплению к письму стандартных файлов в виде каких-то инструкций по применению продукта, или же стандартных документов, отчетов по клиентам, переводам и тд и тп.&lt;/p&gt;
&lt;p&gt;В больших проектах часто необходимо визуально разделять шаблоны на категории, для фильтрации, дабы не тратить время на редактирование менее важных шаблонов при рефакторинге, и во избежание путаницы с новым контентом, или при работе со старым.&lt;/p&gt;
&lt;p&gt;Для подобных решений существует простая батарейка, призванная решить большинство подобных проблем, и избавить Вас от лишнего кода, сопровождения и нервотрепки.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://habrahabr.ru/post/253445/"&gt;http://habrahabr.ru/post/253445/&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="mail"></category><category term="email"></category></entry><entry><title>requests</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/22/requests/" rel="alternate"></link><updated>2015-07-22T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-22:posts/2015/июля/22/requests/</id><summary type="html">&lt;p&gt;requests - &lt;a href="http://docs.python-requests.org/en/latest/"&gt;http://docs.python-requests.org/en/latest/&lt;/a&gt; - универсальный (для python2, python3) модуль для создание HTTP запросов.
Данный модуль позволяет очень просто послать запрос, получить данные.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.github.com/user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;
&lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;application/json; charset=utf8&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="s"&gt;u&amp;#39;{&amp;quot;type&amp;quot;:&amp;quot;User&amp;quot;...&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;private_gists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;419&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;total_private_repos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="requests"></category><category term="http"></category></entry><entry><title>unittest - основной инструмент тестирования</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/21/unittest-osnovnoi-instrument-testirovaniia/" rel="alternate"></link><updated>2015-07-21T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-21:posts/2015/июля/21/unittest-osnovnoi-instrument-testirovaniia/</id><summary type="html">&lt;p&gt;Одним из основных инструментов для тестирования в Python - unittest&lt;/p&gt;
&lt;p&gt;Это стандартный модуль для реализации юнит-тестов на Python.
Unittest это порт JUnit с Java, иными словами ООП стиль, что весьма удобно для тестирования и процедур, и классов.&lt;/p&gt;
&lt;p&gt;Возможностей в данном модуле довольно много: проверки (assert*), декораторы, позволяющие пропустить отдельный тест (@skip, @skipIf) или обозначить сломанные тесты (@expectedFailure)&lt;/p&gt;
&lt;p&gt;При написании тестов надо исходит из следующих принципов:&lt;/p&gt;
&lt;p&gt;Работа теста не должна зависеть от результатов работы других тестов.
- Тест должен использовать данные, специально для него подготовленные, и никакие другие.
- Тест не должен требовать ввода от пользователя
- Тесты не должны перекрывать друг друга (не надо писать одинаковые тесты 20 раз). Можно писать частично перекрывающие тесты.
- Нашли баг -&amp;gt; напиши тест
- Тесты надо поддерживать в рабочем состоянии
- Модульные тесты не должны проверять производительность сущности (класса, функции)
- Тесты должны проверять не только то, что сущность работает корректно на корректных данных, но и то что ведет себя адекватно при некорректных данных.&lt;/p&gt;</summary><category term="тесты"></category><category term="test"></category><category term="unittest"></category></entry><entry><title>unittest</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/21/unittest/" rel="alternate"></link><updated>2015-07-21T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-21:posts/2015/июля/21/unittest/</id><summary type="html">&lt;p&gt;unittest - https://docs.python.org/3.5/library/unittest.html - фреймворк для написания юнит-тестов.
unittest является частью стандартной поставки.&lt;/p&gt;</summary><category term="тесты"></category><category term="test"></category><category term="unittest"></category></entry><entry><title>Генераторы списков</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/20/generatory-spiskov/" rel="alternate"></link><updated>2015-07-20T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-20:posts/2015/июля/20/generatory-spiskov/</id><summary type="html">&lt;p&gt;Если вы использовали Python достаточно долго, вы должны были хотя бы слышать о понятии «list comprehensions». Это способ уместить цикл for, блок if и присваивание в одну строку.&lt;/p&gt;
&lt;p&gt;Генератор списков - яркий пример «синтаксического сахара». То есть конструкции, без которой легко можно обойтись, но с ней намного лучше :) Генераторы списков, как это не странно, предназначены для удобной обработки списков, к которой можно отнести и создание новых списков, и модификацию существующих.
Допустим, нам необходимо получить список нечетных чисел, не превышающих 25.
В принципе, только познакомившись с работой команды xrange решить эту проблему несложно.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В общем-то, полученный результат — целиком нас устраивает всем, кроме длинной записи. тут-то на помощь и придет наш «сахарок». В самом простом виде, он обычно &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В общем виде эта конструкция такова:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
[stmt for var in iterable if predicate]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;По-мимо генератора списка есть синтаксический сахар - генератор словарей.&lt;/p&gt;</summary><category term="синтаксис"></category><category term="syntax"></category><category term="list"></category></entry><entry><title>Почему Python клёвый?</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/20/pochemu-python-kliovyi/" rel="alternate"></link><updated>2015-07-20T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-20:posts/2015/июля/20/pochemu-python-kliovyi/</id><summary type="html">&lt;p&gt;Видео с конференции PyCon
В видео докладчик рассказал о плюсах Python. О тех самых преимуществах, которые не надо обходить стороной.
&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=GyP59P8h7uQ'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="видео"></category><category term="pycon"></category></entry></feed>