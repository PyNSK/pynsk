<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://old.pynsk.ru/" rel="alternate"></link><link href="http://old.pynsk.ru/feeds/interesnye-kontseptsii.atom.xml" rel="self"></link><id>http://old.pynsk.ru/</id><updated>2015-12-01T18:00:00+06:00</updated><entry><title>Интересные концепции: опциональная статическая типизация</title><link href="http://old.pynsk.ru/posts/2015/Dec/01/interesnye-kontseptsii-optsionalnaia-staticheskaia-tipizatsiia/" rel="alternate"></link><updated>2015-12-01T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-12-01:posts/2015/Dec/01/interesnye-kontseptsii-optsionalnaia-staticheskaia-tipizatsiia/</id><summary type="html">&lt;p&gt;Не секрет, что Python (CPython) - динамически типизируемый язык (все типы выясняются во время выполнения программы). Это как дар так и проклятие. С одной стороны - можно быстрее писать программы, с другой - тяжелее найти ошибки. При этом, если была бы статическая типизация - уже на этапе компиляции мы знали бы где мы затупили с типами.&lt;/p&gt;
&lt;p&gt;В русскоязычном Python Андрей Власовских из Jetbrains наиболее часто говорит об этой концепции. Представляю сборку материалов от этого докладчика:&lt;/p&gt;
&lt;p&gt;2012 год:&lt;/p&gt;
&lt;p&gt;Языки со статической и динамической типизацией сосуществуют уже очень долгое время, поскольку у обоих подходов есть свои плюсы и минусы. Динамическая типизация уступает статической по популярности, поскольку обладает рядом известных недостатков. В таких языках больше ошибок происходит во время выполнения, слабее поддержка со стороны IDE, хуже производительность программ.&lt;/p&gt;
&lt;p&gt;В докладе рассматривается получающая распространение опциональная типизация, которая поможет сгладить недостатки динамических языков. Описываются способы введения опциональной типизации в динамические языки на примере языков Python, Erlang, Dart. Рассматривается, как применяется опциональная типизация в статическом анализе кода для повышения его производительности и корректности. Даётся обзор инструментов, использующих опциональную типизацию.&lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/42618102" width="1280" height="496" frameborder="0" title="Опциональная типизация в динамических языках" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Видео: http://vimeo.com/42618102
Слайды: http://blog.pirx.ru/media/files/2012/vlan-optional-typing-talk/optional-typing.html&lt;/p&gt;
&lt;p&gt;2013 год: &lt;/p&gt;
&lt;p&gt;С появлением новых библиотек и диалектов для типизации Python вновь оживилась дискуссия о необходимости и способах введения опциональных типов в Python. В докладе будет рассказано о текущем состоянии этой области, в том числе и об инициативах JetBrains.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/NdX0-FnypjE?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Видео: https://www.youtube.com/watch?v=NdX0-FnypjE
Слайды: http://blog.pirx.ru/media/files/2013/python-optional-typing/#1&lt;/p&gt;
&lt;p&gt;2015 год:&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/2GuTQwBYsgI?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Слайды:  http://blog.pirx.ru/media/files/2015/whats-new-in-python35/#1
Видео: https://www.youtube.com/watch?v=2GuTQwBYsgI&lt;/p&gt;</summary><category term="видео"></category><category term="статическая типизация"></category><category term="типизация"></category><category term="typing"></category><category term="ошибки"></category></entry><entry><title>Интересные концепции: webhook</title><link href="http://old.pynsk.ru/posts/2015/Nov/24/interesnye-kontseptsii-webhook/" rel="alternate"></link><updated>2015-11-24T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-11-24:posts/2015/Nov/24/interesnye-kontseptsii-webhook/</id><summary type="html">&lt;p&gt;Webhook — механизм получения уведомлений об определённых событиях (в основном о действиях пользователей) на свой собственный сайт. В момент срабатывания события - бросается запрос (чаще всего POST) на указанный URL.&lt;/p&gt;
&lt;p&gt;Например, разновидность Webhook - GitHook - отслеживает статус Git-репозитория на предмет изменений - пришел коммит на определенную ветку, проставили тэг и другое.  &lt;/p&gt;
&lt;p&gt;Но что же особенного в этом? Автоматизация. Это отличный инструмент автоматизации. Можно принять POST запрос с помощью Flask:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;app = Flask(__name__)
@app.route(&amp;#39;/post&amp;#39;, methods=[&amp;#39;POST&amp;#39;])
def foo():
    print(request.get_json(silent=True))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А затем выполнить какую-то логику. Например:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;По наступлению какой-то погоды на улице - вывести оповещение "Прогрей машину"&lt;/li&gt;
&lt;li&gt;При коммите в репозиторий запустить скрипт на удаленном компе&lt;/li&gt;
&lt;li&gt;Автоматически публиковать в twitter какой-то юморной пост&lt;/li&gt;
&lt;li&gt;Написать СМС "Как дела в школе?" ребенку, когда он зашел домой (подключился к домашнему WiFi)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. Не все сервисы предоставляют Webhook самостоятельно. Однако, с помощью сервиса http://ifttt.com/ и https://ifttt.com/maker в частности можно реализовать отправку хука при самых разных событиях.&lt;/p&gt;</summary><category term="hook. webhook"></category><category term="githook"></category><category term="автоматизация"></category></entry><entry><title>Интересные концепции: утиная типизация</title><link href="http://old.pynsk.ru/posts/2015/Oct/22/interesnye-kontseptsii-utinaia-tipizatsiia/" rel="alternate"></link><updated>2015-10-22T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-10-22:posts/2015/Oct/22/interesnye-kontseptsii-utinaia-tipizatsiia/</id><summary type="html">&lt;p&gt;Слышали фразу: "Если что-то выглядит как утка, плавает как утка и крякает как утка, то, вероятно, это утка"?
Эта поговорка характеризует утиную типизацию == утипизацию&lt;/p&gt;
&lt;p&gt;Смысл утиной типизации заключается в ослаблении типов. Вместо того чтобы заботиться о точном классе объекта мы заботимся о том какие методы для него можно вызвать и какие операции над ним можно выполнять. Таким образом, обычным делом становится просто передать объект методу, зная, что при неправильном использовании будет выброшено исключение (&lt;code&gt;exception&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Например: если есть код&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;При утиной типизации мы не заботимся о типе объекта &lt;code&gt;obj&lt;/code&gt;, нам лишь важно, что у него есть метод &lt;code&gt;start&lt;/code&gt;. Если же такого метода нет, то исключение нас разочарует.    &lt;/p&gt;
&lt;p&gt;Утиная типизация решает некоторые проблемы иерархической типизации:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;невозможность явно указать (путем наследования) на совместимость интерфейса со всеми настоящими и будущими интерфейсами, с которыми он идейно совместим;&lt;/li&gt;
&lt;li&gt;экспоненциальное увеличение числа связей в иерархии типов.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Image" src="https://pbs.twimg.com/media/BPgjzbBCUAAXgMa.jpg" /&gt;&lt;/p&gt;</summary><category term="типизация"></category><category term="утка"></category><category term="концепция"></category><category term="image"></category></entry><entry><title>Интересные концепции: fuzzy-testing - тестирование грубой силой</title><link href="http://old.pynsk.ru/posts/2015/Oct/13/interesnye-kontseptsii-fuzzy-testing-testirovanie-gruboi-siloi/" rel="alternate"></link><updated>2015-10-13T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-10-13:posts/2015/Oct/13/interesnye-kontseptsii-fuzzy-testing-testirovanie-gruboi-siloi/</id><summary type="html">&lt;p&gt;Тестирование программ повышает уверенность в ее способности работать. Есть даже большие школы, которые говорят о тестах, например, TDD, BDD.&lt;/p&gt;
&lt;p&gt;У ручных тестов есть недостаток, среди прочих - тесты пишет человек. В следствии этого - он не сможет проверить работу функции/класса/etc на всех данных. А когда нам быть уверенным что даже на самых невалидных данных работает корректно, то без случайных данных не обойтись.&lt;/p&gt;
&lt;p&gt;fuzz-testing (Фаззинг) – методика тестирования, при которой на вход программы подаются невалидные, непредусмотренные или случайные данные.&lt;/p&gt;
&lt;p&gt;Фаззинг позволяет расширить количество проверок за счет автоматической генерации данных. От сюда и вытекают недостатки - скорость прохождения тестов падает, есть большие сложности с генерацией сложных данных. Тяжело посчитать процент покрытия кода. Тяжело воспроизводить неправильные проходы тестов.&lt;/p&gt;
&lt;p&gt;Инструментов, которые по принципу xUnit - две строчки написал и работает тест - для фаззинга нет. Или автор ошибается? Подскажите в комментариях&lt;/p&gt;
&lt;p&gt;Ссылки: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/128503/"&gt;http://habrahabr.ru/post/128503/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/library/j-fuzztest/"&gt;https://www.ibm.com/developerworks/library/j-fuzztest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="тест"></category><category term="fuzzy-testing"></category><category term="fuzzy"></category><category term="testing"></category></entry><entry><title>Интересные концепции: какой смысл с Объектном подходе?</title><link href="http://old.pynsk.ru/posts/2015/Oct/12/interesnye-kontseptsii-kakoi-smysl-s-obektnom-podkhode/" rel="alternate"></link><updated>2015-10-12T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-10-12:posts/2015/Oct/12/interesnye-kontseptsii-kakoi-smysl-s-obektnom-podkhode/</id><summary type="html">&lt;p&gt;В Интернет часто говорят об ООП, об объектах. Так какой смысл во всем этом? Какая польза, недостатки?
Соображения на эту темы вы сможете найти в видео:&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/M1XL65qj2dU?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="видео"></category><category term="объект"></category></entry><entry><title>Интересные концепции: mixin'ы (примеси)</title><link href="http://old.pynsk.ru/posts/2015/Oct/01/interesnye-kontseptsii-mixiny-primesi/" rel="alternate"></link><updated>2015-10-01T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-10-01:posts/2015/Oct/01/interesnye-kontseptsii-mixiny-primesi/</id><summary type="html">&lt;p&gt;В определенных случаях множественное наследование это зло. 
Добро - когда классы родители не перекрывают друг друга. Частный случай такой схемы - примиси == миксины == mixin == mix in.
Концепция примисей строится на идеи четкого разделения свойств и методов для сущностей. &lt;/p&gt;
&lt;p&gt;Например,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;если есть летающее животное, то можно смело иметь метод fly;&lt;/li&gt;
&lt;li&gt;если есть раскрашиваемый объект, то можно завести методы "покрасить", и два состояния - "раскрашен" (&lt;code&gt;bool&lt;/code&gt;) и цвет.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Использование миксин выглядит так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mixin1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mixin1&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Mixin2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mixin2&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mixin1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mixin2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(смотрели видео "Super - это супер"?)&lt;/p&gt;
&lt;p&gt;В чем отличие от обычного наследования?
По синтаксису - ни в чем. Отличия на уровне договоренностей и использовании - в mixin-класс помещают все необходимое и достаточное для определения сущности. &lt;/p&gt;
&lt;p&gt;Пример:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;есть изменяемый объект - все действия с таким объектом храним в миксине.&lt;/li&gt;
&lt;li&gt;есть итерируемый объект - тоже миксин.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Комбинируем два этих элемента и получаем интерируемый изменяемый объект.&lt;/p&gt;
&lt;p&gt;Погружаемся в множественное наследование:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qualcode.ru/article/python_mixin/"&gt;http://qualcode.ru/article/python_mixin/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ianlewis.org/en/mixins-and-python"&gt;https://www.ianlewis.org/en/mixins-and-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.o2b.ru/python-mixins/"&gt;http://www.o2b.ru/python-mixins/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/140298/"&gt;http://habrahabr.ru/post/140298/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="примесь"></category><category term="mixin"></category></entry><entry><title>Интересные концепции: Трансдьюсеры</title><link href="http://old.pynsk.ru/posts/2015/Aug/20/interesnye-kontseptsii-transdiusery/" rel="alternate"></link><updated>2015-08-20T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:old.pynsk.ru,2015-08-20:posts/2015/Aug/20/interesnye-kontseptsii-transdiusery/</id><summary type="html">&lt;p&gt;Трансдьюсеры — это попытка переосмыслить операции над коллекциями, найти в них общую идею и принцип, научиться совмещать вместе несколько операций для их дальнейшего переиспользования.&lt;/p&gt;
&lt;p&gt;&lt;a class='embedly-card' data-card-chrome='0' href='http://www.youtube.com/watch?v=ANZOvcYPagU)
[!embedlycard](https://www.youtube.com/watch?t=1080&amp;v=VTEfb5ojOzA'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="видео"></category><category term="трансдьюсер"></category></entry></feed>