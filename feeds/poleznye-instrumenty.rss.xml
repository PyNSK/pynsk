<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/poleznye-instrumenty.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 13 Oct 2015 10:00:00 +0600</lastBuildDate><item><title>Полезные инструменты: fabric - автоматизируем рутину</title><link>http://pynsk.ru/posts/2015/Oct/13/poleznye-instrumenty-fabric-avtomatiziruem-rutinu/</link><description>&lt;p&gt;Ситуация: написали web-проект, свой, домашний, а может и на работе. Надо его опубликовать в Интернет - задеплоить. 
Зашли на сервер, активировали venv, скачали новые исходники из репозитория, накатили миграции, обновили static-файлы, перезапустили, предположим, celery, перезапустили uwsgi.&lt;/p&gt;
&lt;p&gt;И тут, поняли что забыли раскоментировать строчку в коде. Делаем коммит, снова заходим на сервер, активировали venv.... 
Зачем вся эта рутина с деплоем? Может есть способ проще? Мы же IT-шники, давайте напишем скрипт. &lt;/p&gt;
&lt;p&gt;Здесь то на помощь и приходит &lt;code&gt;fabric&lt;/code&gt; - инструмент командной строки. 
&lt;code&gt;fabric&lt;/code&gt; предоставляет обертку над командной строкой. Вы пишите fab файл с вашим сценарием деплоя. Например.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;host_type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;uname -s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А затем запускаете на нескольких (или одной) удаленной машине&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;fab -H localhost,linuxbox host_type
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; run: uname -s
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; out: Darwin
&lt;span class="o"&gt;[&lt;/span&gt;linuxbox&lt;span class="o"&gt;]&lt;/span&gt; run: uname -s
&lt;span class="o"&gt;[&lt;/span&gt;linuxbox&lt;span class="o"&gt;]&lt;/span&gt; out: Linux

Done.
Disconnecting from localhost... &lt;span class="k"&gt;done&lt;/span&gt;.
Disconnecting from linuxbox... &lt;span class="k"&gt;done&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Все очень просто&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.fabfile.org/"&gt;http://www.fabfile.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 13 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-13:posts/2015/Oct/13/poleznye-instrumenty-fabric-avtomatiziruem-rutinu/</guid><category>fabric</category><category>автоматизация</category><category>инструмент</category></item><item><title>Полезные инструменты: tox как средство тестирования</title><link>http://pynsk.ru/posts/2015/Oct/06/poleznye-instrumenty-tox-kak-sredstvo-testirovaniia/</link><description>&lt;p&gt;Если вы автор Python-библиотеки, то скорее всего вам необходимо поддерживать несколько версий Python.
Стандартный набор - 2.6, 2.7, 3.3, 3.4 и сейчас уже 3.5. Поддерживать несколько версий Python помогают тесты. &lt;/p&gt;
&lt;p&gt;Не секрет, что тесты помогают допускать меньше ошибок во время поддержки проекта. Например, вы можете смелее делать рефакторинг и быть уверены, что функционал который проверяют тесты работает. &lt;/p&gt;
&lt;p&gt;Пускай написали тесты для озвученных версий Python, как их запускать? Постоянно менять venv и тыкать python run_test.py?
Есть удобнее инструмент - &lt;code&gt;tox&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;tox - это средство автоматизации, которое позволяет свести запуск тестирования до одной команды (а можно и до 0).
В конфиг файле tox.ini вы можете указать:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Что установить&lt;/li&gt;
&lt;li&gt;Какие версии Python использовать&lt;/li&gt;
&lt;li&gt;Что сделать перед запуском тестов&lt;/li&gt;
&lt;li&gt;Как запускать тесты&lt;/li&gt;
&lt;li&gt;Что делать после запуска тестов (например, сделать отчет с помощью coverage, послать отчет на email)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Конфиг файл может выглядеть так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py26,py27&lt;/span&gt;
&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pytest       # install pytest in the venvs&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;py.test  # or &amp;#39;nosetests&amp;#39; or ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылка на документацию: &lt;a href="https://tox.readthedocs.org/en/latest/"&gt;https://tox.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Tue, 06 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-06:posts/2015/Oct/06/poleznye-instrumenty-tox-kak-sredstvo-testirovaniia/</guid><category>tox</category><category>test</category><category>тест</category><category>автоматизация</category></item><item><title>Полезные инструменты: pythontutor.com</title><link>http://pynsk.ru/posts/2015/Oct/01/poleznye-instrumenty-pythontutorcom/</link><description>&lt;p&gt;Полезные инструменты: pythontutor.com&lt;/p&gt;
&lt;p&gt;Представим ситуацию, вы читаете лекцию, пускай студентам. Хочется все по шагам и подробно рассказать о данном куске кода.
Можно вести славеса пол часа, а можно продемонстрировать с помощью http://www.pythontutor.com/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 01 Oct 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-01:posts/2015/Oct/01/poleznye-instrumenty-pythontutorcom/</guid></item><item><title>Полезные инструменты: pylint - в поисках ошибок</title><link>http://pynsk.ru/posts/2015/Sep/30/poleznye-instrumenty-pylint-v-poiskakh-oshibok/</link><description>&lt;p&gt;Статический анализ кода — анализ кода без реального исполнения кода.
Под словом "анализ" можно понимать многое - что код соответствует PEP8, что код безопасный (все типы верно приведены), что код не содержит логических ошибок.&lt;/p&gt;
&lt;p&gt;Самым придирчивым анализатором является pylint.&lt;/p&gt;
&lt;p&gt;Pylint анализирует исходный код, выводит небольшую статистику по нему и делает около 150 проверок на разного рода ошибки. Все найденные ошибки выводятся в списке.&lt;/p&gt;
&lt;p&gt;Все сообщения об ошибках делятся на 4 типа:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ошибки;&lt;/li&gt;
&lt;li&gt;потенциальные ошибки;&lt;/li&gt;
&lt;li&gt;следование стилистике и соглашениям (PEP8 и прочее);&lt;/li&gt;
&lt;li&gt;предложения по рефакторингу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Узнать мощь инструмента можно по ссылкам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pylint.org/"&gt;http://www.pylint.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tiendil.livejournal.com/23215.html"&gt;http://tiendil.livejournal.com/23215.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dmalinovsky.blogspot.ru/2011/03/python.html"&gt;http://dmalinovsky.blogspot.ru/2011/03/python.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rtfm.co.ua/python-pylint-analiz-oshibok-i-kachestva-koda/"&gt;http://rtfm.co.ua/python-pylint-analiz-oshibok-i-kachestva-koda/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/114745/"&gt;http://habrahabr.ru/post/114745/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 30 Sep 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-30:posts/2015/Sep/30/poleznye-instrumenty-pylint-v-poiskakh-oshibok/</guid><category>pylint</category><category>анализатор</category><category>ошибка</category><category>поиск ошибок</category><category>статический анализ</category><category>статический анализатор</category></item><item><title>Полезные инструменты: django-debug-toolbar</title><link>http://pynsk.ru/posts/2015/Sep/02/poleznye-instrumenty-django-debug-toolbar/</link><description>&lt;p&gt;Разработка программ сопряжена с сложностями. Произвольно или нет лезут различные баги. Для поиска ошибок применяют различные инструменты, например дебаг. Дебаг бывает кустарным - print'ами, а есть более каноничный подход - дебаггерами.&lt;/p&gt;
&lt;p&gt;С десктоп программами все ясно - сиди тыкай точки остановки и изучай состояние программы, а что делать с web?&lt;/p&gt;
&lt;p&gt;А делать вот что - ставить debug toolbar: &lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;https://github.com/django-debug-toolbar/django-debug-toolbar&lt;/a&gt;  Именно этот для Django, но такие есть и для других фреймворков.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 02 Sep 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-02:posts/2015/Sep/02/poleznye-instrumenty-django-debug-toolbar/</guid><category>django</category><category>debug</category><category>toolbar</category><category>django-debug-toolbar</category></item><item><title>Полезные инструменты: pycallgraph</title><link>http://pynsk.ru/posts/2015/Aug/29/poleznye-instrumenty-pycallgraph/</link><description>&lt;p&gt;Идеальный программист не пишет тесты, потому что у него не бывает ошибок. А сверх идеальный программист даже код не пишет. &lt;/p&gt;
&lt;p&gt;А так как идеальных нет, поэтому бывают медленные куски программы. Точнее как, обычно это называем "тормозит". Чтобы понять какое место тормозит можно воспользоваться модулем pycallgraph - https://github.com/gak/pycallgraph&lt;/p&gt;
&lt;p&gt;Данный модуль строит красивые графики-графы, в которых цветом выделяет медленные места программы. Очень удобно.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 29 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-29:posts/2015/Aug/29/poleznye-instrumenty-pycallgraph/</guid><category>pycallgraph</category></item><item><title>Полезные инструменты: IPython</title><link>http://pynsk.ru/posts/2015/Aug/28/poleznye-instrumenty-ipython/</link><description>&lt;p&gt;IPython - интерактивная оболочка для языка программирования Python, которая предоставляет расширенную интроспекцию, дополнительный командный синтаксис, подсветку кода и автоматическое дополнение.&lt;/p&gt;
&lt;p&gt;IPython весьма удобен для демонстраций и экспериментов. В отличие от стандартного REPL, IPython может запоминать введенные команды. А IPython Notebook позволяет сохранить все свои эксперименты в файл, после чего залить на сервис для просмотра другими. Даже github поддерживает отображение этих "книг".&lt;/p&gt;
&lt;p&gt;IPython хорошо себя зарекомендовал из-за расширений. С помощью расширений можно подключать самые различные модули. И что немного "странно" - использовать другие языки совместно с Python. Например, вы можете написать часть своего эксперимента на R, а часть на Python - и они будут работать совместно.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/9iwfJvSh004?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 28 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-28:posts/2015/Aug/28/poleznye-instrumenty-ipython/</guid><category>IPython</category><category>видео</category></item><item><title>Полезные инструменты: gunicorn</title><link>http://pynsk.ru/posts/2015/Aug/19/poleznye-instrumenty-gunicorn/</link><description>&lt;p&gt;Вот вы написали web-проект, теперь надо его опубликовать на хостинге (или у себя на машине) (задеплоить). Начинаете жадно мучать гугл странными запросами. &lt;/p&gt;
&lt;p&gt;И вот наконец-то доходите до слов - uwsgi и gunicorn. Это серверы, которые с одной стороны предоставляют пользователям доступ к вашему проекту(сайтику), а с другой - общаются с вашим Python кодом. &lt;/p&gt;
&lt;p&gt;Стоит сказать, что gunicorn это WSGI HTTP сервер, написанный на питоне и легкий в настройке. Среди заявленных возможностей:&lt;/p&gt;
&lt;p&gt;поддержка WSGI, Django и Paster
async, sync worker
балансировка нагрузки через pre-fork и shared socket
разные хуки для расширение возможностей
Этот инструмент простой для понимания. Рекомендуем его использовать.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gunicorn.org/"&gt;http://gunicorn.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 19 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-19:posts/2015/Aug/19/poleznye-instrumenty-gunicorn/</guid><category>gunicorn</category></item><item><title>Полезные инструменты: Pycharm</title><link>http://pynsk.ru/posts/2015/Aug/17/poleznye-instrumenty-pycharm/</link><description>&lt;p&gt;Pycharm - это IDE специализированная под Python разработку.&lt;/p&gt;
&lt;p&gt;Возможности этого редактора кода захватывают:
- Статический анализ кода, подсветка синтаксиса и ошибок.
- Рефакторинг: переименование, извлечение метода, введение переменной, введение константы, подъём и спуск метода и т. д.
- Инструменты для веб-разработки с использованием фреймворка Django
- Встроенный отладчик для Python
- Встроенные инструменты для юнит-тестирования
- Поддержка систем контроля версий (Git, svn и другие)
- По-мимо этого, Pycharm поддержку множество модулей, например, IPython встроен в редактор. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;https://www.jetbrains.com/pycharm/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Mon, 17 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-17:posts/2015/Aug/17/poleznye-instrumenty-pycharm/</guid><category>ide</category><category>pycharm</category></item><item><title>Утилиты написанные на Python: youtube-dl</title><link>http://pynsk.ru/posts/2015/Aug/07/utility-napisannye-na-python-youtube-dl/</link><description>&lt;p&gt;youtube-dl (https://github.com/rg3/youtube-dl/)
- это очень популярный скрипт для выгрузки видео с сервиса Youtube (, Vimeo и других). Данная утилита позволяет очень легко выдернуть видео со страницы ютьюб. 
Множество настроек позволяют в том числе выдернуть субтитры, узнать длительность видео и многие другие параметры.&lt;/p&gt;
&lt;p&gt;Данную утилиту можно применить следующим образом: если у вас есть ряд каналов, которые вы смотрите регулярно, то часто задаетесь вопросом "Вышло новое видео или нет?".
Чтобы не тыкаться по 10 раз на дню на сайт (плюс к этому, "котики" могут отвлечь на несколько часов), вы можете соединить несколько сервисов вместе и новые видео будут автоматически попадать к вам на компьютер. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 07 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-07:posts/2015/Aug/07/utility-napisannye-na-python-youtube-dl/</guid></item></channel></rss>