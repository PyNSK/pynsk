<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/poleznye-instrumenty.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-12-31T10:00:00+06:00</updated><entry><title>Полезные инструменты: генерируем снежинки</title><link href="http://pynsk.ru/posts/2015/Dec/31/poleznye-instrumenty-generiruem-snezhinki/" rel="alternate"></link><updated>2015-12-31T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-12-31:posts/2015/Dec/31/poleznye-instrumenty-generiruem-snezhinki/</id><summary type="html">&lt;p&gt;Хочется представить небольшой проект, который хорошо подходит под новогоднюю тематику - &lt;a href="https://github.com/vishnubob/snowflake"&gt;https://github.com/vishnubob/snowflake&lt;/a&gt;
Это инструмент с помощью которого можно генерировать самые различные снежинки&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="https://raw.githubusercontent.com/vishnubob/snowflake/master/media/example.png" /&gt;
&lt;img alt="Image" src="https://raw.githubusercontent.com/vishnubob/snowflake/master/media/collage_medium.jpg" /&gt;&lt;/p&gt;</summary></entry><entry><title>Полезные инструменты: virtualenv + pip</title><link href="http://pynsk.ru/posts/2015/Dec/25/poleznye-instrumenty-virtualenv-pip/" rel="alternate"></link><updated>2015-12-25T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-12-25:posts/2015/Dec/25/poleznye-instrumenty-virtualenv-pip/</id><summary type="html">&lt;p&gt;Опыт показывает, что каждый проект обладает своими зависимостями (библиотеками), а если и одинаковыми, то версии не совпадают.
Чтобы упростить запуск и настройку проекта разработчики пишут &lt;code&gt;INSTALL.md&lt;/code&gt;, &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;make-файлы&lt;/code&gt; и что более важно - &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Файл &lt;code&gt;requirements.txt&lt;/code&gt; - это правило хорошего тона для Python проектов.
Файл содержит список необходимых библиотек для запуска с указанием версий:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# requrements.txt
requests==2.7.0
Django==1.8.3
jsonfield==1.0.3
django-hstore==1.4
django-filebrowser==3.5.7
django-object-actions==0.5.1
sorl-thumbnail==12.3
django-ajax==0.2.0
git+https://github.com/maraujop/django-crispy-forms.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Предположим, файл есть, инструкция по запуска есть. Да вот только таких проектов надо запускать много и у каждого свои зависимости.
Причем не получится все установить в систему, версии же могут конфликтовать.&lt;/p&gt;
&lt;p&gt;Для решения этой проблемы был придуман &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; - это инструмент, который позволяет установить отдельный Python, со своими модулями, зависимостями и пр.
Что интересно, на одной машине может стоят несколько версий Python с разным набором библиотек.
Такой инструмент позволяет устанавливать, изменять и удалять пакеты, и это не повлияет на другие ваши проекты или системное окружение.&lt;/p&gt;
&lt;p&gt;Погружаемся в тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://proft.me/2010/04/3/python-i-okruzhenie-virtualenv/"&gt;http://proft.me/2010/04/3/python-i-okruzhenie-virtualenv/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И смотрим доклад на тему "Pip install — почему так медленно?"
- &lt;a href="https://events.yandex.ru/lib/talks/3070/"&gt;https://events.yandex.ru/lib/talks/3070/&lt;/a&gt;&lt;/p&gt;</summary><category term="pip"></category><category term="virtualenv"></category><category term="модуль"></category><category term="установка"></category><category term="настройка"></category><category term="пакет"></category></entry><entry><title>Полезные инструменты: clonedigger - поиск дубликатов кода</title><link href="http://pynsk.ru/posts/2015/Dec/18/poleznye-instrumenty-clonedigger-poisk-dublikatov-koda/" rel="alternate"></link><updated>2015-12-18T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-12-18:posts/2015/Dec/18/poleznye-instrumenty-clonedigger-poisk-dublikatov-koda/</id><summary type="html">&lt;p&gt;Количество кода - это некоторый критерий для ПО. Практика показывает, что чем больше кода - тем сложнее поддерживать и развивать продукт.
А если в этом коде много copy-past'ы, то совсем плохо.&lt;/p&gt;
&lt;p&gt;Для выявления повторяющихся кусков кода существуют различные инструменты. Один из них CloneDigger.
Это старая разработка (еще в 2008 году автор выступал на EuroPython), однако, работает хорошо и на данный момент.&lt;/p&gt;
&lt;p&gt;CloneDigger принимает на вход набор файлов, или целую папку. С помощью алгоритма (&lt;a href="http://clonedigger.sourceforge.net/documentation.html"&gt;http://clonedigger.sourceforge.net/documentation.html&lt;/a&gt;) находит повторяющиеся куски кода и создает HTML отчет.&lt;/p&gt;
&lt;p&gt;Пример отчета можно найти по ссылке - &lt;a href="http://clonedigger.sourceforge.net/examples/bio_python_selection.html"&gt;http://clonedigger.sourceforge.net/examples/bio_python_selection.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А вы оцениваете свой код с помощью метрик?&lt;/p&gt;</summary><category term="clonedigger"></category><category term="дубликат"></category><category term="дубликат кода"></category><category term="copy paste"></category></entry><entry><title>Полезные инструменты: sandman - админка над базой + REST за пару секунд</title><link href="http://pynsk.ru/posts/2015/Nov/30/poleznye-instrumenty-sandman-adminka-nad-bazoi-rest-za-paru-sekund/" rel="alternate"></link><updated>2015-11-30T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-11-30:posts/2015/Nov/30/poleznye-instrumenty-sandman-adminka-nad-bazoi-rest-za-paru-sekund/</id><summary type="html">&lt;p&gt;Сейчас редкий проект обходится без базы данных. Это может быть реляционная БД, или NoSQL, да может просто текстовые файлы. И каждый раз возникает необходимость посмотреть данные в ней, а иногда и другим показать. &lt;/p&gt;
&lt;p&gt;В этом случае подойдет инструмент - &lt;code&gt;sandman&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Sandman&lt;/code&gt; - позволяет за пару секунд сделать web-интерфейс для популярных БД. &lt;/p&gt;
&lt;p&gt;Выполняем команду:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sandmanctl sqlite:////tmp/my_database.db
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получаем&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="https://www.jeffknupp.com/images/admin_tracks_improved.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Инструмент почти не требует настройки и работает стабильно.  И в дополнение дает REST&lt;/p&gt;
&lt;p&gt;Ссылки для изучения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jeffknupp/sandman"&gt;https://github.com/jeffknupp/sandman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="инструмент"></category><category term="бд"></category><category term="база данных"></category><category term="database"></category><category term="интерфейс"></category><category term="rest"></category></entry><entry><title>Полезные инструменты: fabric - автоматизируем рутину</title><link href="http://pynsk.ru/posts/2015/Oct/13/poleznye-instrumenty-fabric-avtomatiziruem-rutinu/" rel="alternate"></link><updated>2015-10-13T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-10-13:posts/2015/Oct/13/poleznye-instrumenty-fabric-avtomatiziruem-rutinu/</id><summary type="html">&lt;p&gt;Ситуация: написали web-проект, свой, домашний, а может и на работе. Надо его опубликовать в Интернет - задеплоить. 
Зашли на сервер, активировали venv, скачали новые исходники из репозитория, накатили миграции, обновили static-файлы, перезапустили, предположим, celery, перезапустили uwsgi.&lt;/p&gt;
&lt;p&gt;И тут, поняли что забыли раскоментировать строчку в коде. Делаем коммит, снова заходим на сервер, активировали venv.... 
Зачем вся эта рутина с деплоем? Может есть способ проще? Мы же IT-шники, давайте напишем скрипт. &lt;/p&gt;
&lt;p&gt;Здесь то на помощь и приходит &lt;code&gt;fabric&lt;/code&gt; - инструмент командной строки. 
&lt;code&gt;fabric&lt;/code&gt; предоставляет обертку над командной строкой. Вы пишите fab файл с вашим сценарием деплоя. Например.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;host_type&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uname -s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А затем запускаете на нескольких (или одной) удаленной машине&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fab -H localhost,linuxbox host_type
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; run: uname -s
&lt;span class="o"&gt;[&lt;/span&gt;localhost&lt;span class="o"&gt;]&lt;/span&gt; out: Darwin
&lt;span class="o"&gt;[&lt;/span&gt;linuxbox&lt;span class="o"&gt;]&lt;/span&gt; run: uname -s
&lt;span class="o"&gt;[&lt;/span&gt;linuxbox&lt;span class="o"&gt;]&lt;/span&gt; out: Linux

Done.
Disconnecting from localhost... &lt;span class="k"&gt;done&lt;/span&gt;.
Disconnecting from linuxbox... &lt;span class="k"&gt;done&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Все очень просто&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.fabfile.org/"&gt;http://www.fabfile.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="fabric"></category><category term="автоматизация"></category><category term="инструмент"></category></entry><entry><title>Полезные инструменты: tox как средство тестирования</title><link href="http://pynsk.ru/posts/2015/Oct/06/poleznye-instrumenty-tox-kak-sredstvo-testirovaniia/" rel="alternate"></link><updated>2015-10-06T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-10-06:posts/2015/Oct/06/poleznye-instrumenty-tox-kak-sredstvo-testirovaniia/</id><summary type="html">&lt;p&gt;Если вы автор Python-библиотеки, то скорее всего вам необходимо поддерживать несколько версий Python.
Стандартный набор - 2.6, 2.7, 3.3, 3.4 и сейчас уже 3.5. Поддерживать несколько версий Python помогают тесты. &lt;/p&gt;
&lt;p&gt;Не секрет, что тесты помогают допускать меньше ошибок во время поддержки проекта. Например, вы можете смелее делать рефакторинг и быть уверены, что функционал который проверяют тесты работает. &lt;/p&gt;
&lt;p&gt;Пускай написали тесты для озвученных версий Python, как их запускать? Постоянно менять venv и тыкать python run_test.py?
Есть удобнее инструмент - &lt;code&gt;tox&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;tox - это средство автоматизации, которое позволяет свести запуск тестирования до одной команды (а можно и до 0).
В конфиг файле tox.ini вы можете указать:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Что установить&lt;/li&gt;
&lt;li&gt;Какие версии Python использовать&lt;/li&gt;
&lt;li&gt;Что сделать перед запуском тестов&lt;/li&gt;
&lt;li&gt;Как запускать тесты&lt;/li&gt;
&lt;li&gt;Что делать после запуска тестов (например, сделать отчет с помощью coverage, послать отчет на email)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Конфиг файл может выглядеть так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py26,py27&lt;/span&gt;
&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pytest       # install pytest in the venvs&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;py.test  # or &amp;#39;nosetests&amp;#39; or ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылка на документацию: &lt;a href="https://tox.readthedocs.org/en/latest/"&gt;https://tox.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;</summary><category term="tox"></category><category term="test"></category><category term="тест"></category><category term="автоматизация"></category></entry><entry><title>Полезные инструменты: pythontutor.com</title><link href="http://pynsk.ru/posts/2015/Oct/01/poleznye-instrumenty-pythontutorcom/" rel="alternate"></link><updated>2015-10-01T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-10-01:posts/2015/Oct/01/poleznye-instrumenty-pythontutorcom/</id><summary type="html">&lt;p&gt;Полезные инструменты: pythontutor.com&lt;/p&gt;
&lt;p&gt;Представим ситуацию, вы читаете лекцию, пускай студентам. Хочется все по шагам и подробно рассказать о данном куске кода.
Можно вести славеса пол часа, а можно продемонстрировать с помощью http://www.pythontutor.com/&lt;/p&gt;</summary></entry><entry><title>Полезные инструменты: pylint - в поисках ошибок</title><link href="http://pynsk.ru/posts/2015/Sep/30/poleznye-instrumenty-pylint-v-poiskakh-oshibok/" rel="alternate"></link><updated>2015-09-30T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-30:posts/2015/Sep/30/poleznye-instrumenty-pylint-v-poiskakh-oshibok/</id><summary type="html">&lt;p&gt;Статический анализ кода — анализ кода без реального исполнения кода.
Под словом "анализ" можно понимать многое - что код соответствует PEP8, что код безопасный (все типы верно приведены), что код не содержит логических ошибок.&lt;/p&gt;
&lt;p&gt;Самым придирчивым анализатором является pylint.&lt;/p&gt;
&lt;p&gt;Pylint анализирует исходный код, выводит небольшую статистику по нему и делает около 150 проверок на разного рода ошибки. Все найденные ошибки выводятся в списке.&lt;/p&gt;
&lt;p&gt;Все сообщения об ошибках делятся на 4 типа:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ошибки;&lt;/li&gt;
&lt;li&gt;потенциальные ошибки;&lt;/li&gt;
&lt;li&gt;следование стилистике и соглашениям (PEP8 и прочее);&lt;/li&gt;
&lt;li&gt;предложения по рефакторингу.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Узнать мощь инструмента можно по ссылкам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pylint.org/"&gt;http://www.pylint.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tiendil.livejournal.com/23215.html"&gt;http://tiendil.livejournal.com/23215.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dmalinovsky.blogspot.ru/2011/03/python.html"&gt;http://dmalinovsky.blogspot.ru/2011/03/python.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rtfm.co.ua/python-pylint-analiz-oshibok-i-kachestva-koda/"&gt;http://rtfm.co.ua/python-pylint-analiz-oshibok-i-kachestva-koda/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/114745/"&gt;http://habrahabr.ru/post/114745/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pylint"></category><category term="анализатор"></category><category term="ошибка"></category><category term="поиск ошибок"></category><category term="статический анализ"></category><category term="статический анализатор"></category></entry><entry><title>Полезные инструменты: django-debug-toolbar</title><link href="http://pynsk.ru/posts/2015/Sep/02/poleznye-instrumenty-django-debug-toolbar/" rel="alternate"></link><updated>2015-09-02T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-02:posts/2015/Sep/02/poleznye-instrumenty-django-debug-toolbar/</id><summary type="html">&lt;p&gt;Разработка программ сопряжена с сложностями. Произвольно или нет лезут различные баги. Для поиска ошибок применяют различные инструменты, например дебаг. Дебаг бывает кустарным - print'ами, а есть более каноничный подход - дебаггерами.&lt;/p&gt;
&lt;p&gt;С десктоп программами все ясно - сиди тыкай точки остановки и изучай состояние программы, а что делать с web?&lt;/p&gt;
&lt;p&gt;А делать вот что - ставить debug toolbar: &lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;https://github.com/django-debug-toolbar/django-debug-toolbar&lt;/a&gt;  Именно этот для Django, но такие есть и для других фреймворков.&lt;/p&gt;</summary><category term="django"></category><category term="debug"></category><category term="toolbar"></category><category term="django-debug-toolbar"></category></entry><entry><title>Полезные инструменты: pycallgraph</title><link href="http://pynsk.ru/posts/2015/Aug/29/poleznye-instrumenty-pycallgraph/" rel="alternate"></link><updated>2015-08-29T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-29:posts/2015/Aug/29/poleznye-instrumenty-pycallgraph/</id><summary type="html">&lt;p&gt;Идеальный программист не пишет тесты, потому что у него не бывает ошибок. А сверх идеальный программист даже код не пишет. &lt;/p&gt;
&lt;p&gt;А так как идеальных нет, поэтому бывают медленные куски программы. Точнее как, обычно это называем "тормозит". Чтобы понять какое место тормозит можно воспользоваться модулем pycallgraph - https://github.com/gak/pycallgraph&lt;/p&gt;
&lt;p&gt;Данный модуль строит красивые графики-графы, в которых цветом выделяет медленные места программы. Очень удобно.&lt;/p&gt;</summary><category term="pycallgraph"></category></entry><entry><title>Полезные инструменты: IPython</title><link href="http://pynsk.ru/posts/2015/Aug/28/poleznye-instrumenty-ipython/" rel="alternate"></link><updated>2015-08-28T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-28:posts/2015/Aug/28/poleznye-instrumenty-ipython/</id><summary type="html">&lt;p&gt;IPython - интерактивная оболочка для языка программирования Python, которая предоставляет расширенную интроспекцию, дополнительный командный синтаксис, подсветку кода и автоматическое дополнение.&lt;/p&gt;
&lt;p&gt;IPython весьма удобен для демонстраций и экспериментов. В отличие от стандартного REPL, IPython может запоминать введенные команды. А IPython Notebook позволяет сохранить все свои эксперименты в файл, после чего залить на сервис для просмотра другими. Даже github поддерживает отображение этих "книг".&lt;/p&gt;
&lt;p&gt;IPython хорошо себя зарекомендовал из-за расширений. С помощью расширений можно подключать самые различные модули. И что немного "странно" - использовать другие языки совместно с Python. Например, вы можете написать часть своего эксперимента на R, а часть на Python - и они будут работать совместно.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/9iwfJvSh004?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="IPython"></category><category term="видео"></category></entry><entry><title>Полезные инструменты: gunicorn</title><link href="http://pynsk.ru/posts/2015/Aug/19/poleznye-instrumenty-gunicorn/" rel="alternate"></link><updated>2015-08-19T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-19:posts/2015/Aug/19/poleznye-instrumenty-gunicorn/</id><summary type="html">&lt;p&gt;Вот вы написали web-проект, теперь надо его опубликовать на хостинге (или у себя на машине) (задеплоить). Начинаете жадно мучать гугл странными запросами. &lt;/p&gt;
&lt;p&gt;И вот наконец-то доходите до слов - uwsgi и gunicorn. Это серверы, которые с одной стороны предоставляют пользователям доступ к вашему проекту(сайтику), а с другой - общаются с вашим Python кодом. &lt;/p&gt;
&lt;p&gt;Стоит сказать, что gunicorn это WSGI HTTP сервер, написанный на питоне и легкий в настройке. Среди заявленных возможностей:&lt;/p&gt;
&lt;p&gt;поддержка WSGI, Django и Paster
async, sync worker
балансировка нагрузки через pre-fork и shared socket
разные хуки для расширение возможностей
Этот инструмент простой для понимания. Рекомендуем его использовать.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gunicorn.org/"&gt;http://gunicorn.org/&lt;/a&gt;&lt;/p&gt;</summary><category term="gunicorn"></category></entry><entry><title>Полезные инструменты: Pycharm</title><link href="http://pynsk.ru/posts/2015/Aug/17/poleznye-instrumenty-pycharm/" rel="alternate"></link><updated>2015-08-17T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-17:posts/2015/Aug/17/poleznye-instrumenty-pycharm/</id><summary type="html">&lt;p&gt;Pycharm - это IDE специализированная под Python разработку.&lt;/p&gt;
&lt;p&gt;Возможности этого редактора кода захватывают:
- Статический анализ кода, подсветка синтаксиса и ошибок.
- Рефакторинг: переименование, извлечение метода, введение переменной, введение константы, подъём и спуск метода и т. д.
- Инструменты для веб-разработки с использованием фреймворка Django
- Встроенный отладчик для Python
- Встроенные инструменты для юнит-тестирования
- Поддержка систем контроля версий (Git, svn и другие)
- По-мимо этого, Pycharm поддержку множество модулей, например, IPython встроен в редактор. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;https://www.jetbrains.com/pycharm/&lt;/a&gt;&lt;/p&gt;</summary><category term="ide"></category><category term="pycharm"></category></entry><entry><title>Утилиты написанные на Python: youtube-dl</title><link href="http://pynsk.ru/posts/2015/Aug/07/utility-napisannye-na-python-youtube-dl/" rel="alternate"></link><updated>2015-08-07T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-07:posts/2015/Aug/07/utility-napisannye-na-python-youtube-dl/</id><summary type="html">&lt;p&gt;youtube-dl (https://github.com/rg3/youtube-dl/)
- это очень популярный скрипт для выгрузки видео с сервиса Youtube (, Vimeo и других). Данная утилита позволяет очень легко выдернуть видео со страницы ютьюб. 
Множество настроек позволяют в том числе выдернуть субтитры, узнать длительность видео и многие другие параметры.&lt;/p&gt;
&lt;p&gt;Данную утилиту можно применить следующим образом: если у вас есть ряд каналов, которые вы смотрите регулярно, то часто задаетесь вопросом "Вышло новое видео или нет?".
Чтобы не тыкаться по 10 раз на дню на сайт (плюс к этому, "котики" могут отвлечь на несколько часов), вы можете соединить несколько сервисов вместе и новые видео будут автоматически попадать к вам на компьютер. &lt;/p&gt;</summary></entry></feed>