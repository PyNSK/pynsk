<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/funktsionalnyi-python.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-09-23T18:00:00+06:00</updated><entry><title>Функциональный Python: fn.py</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./23/funktsionalnyi-python-fnpy/" rel="alternate"></link><updated>2015-09-23T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-23:posts/2015/сент./23/funktsionalnyi-python-fnpy/</id><summary type="html">&lt;p&gt;Функциональные аспекты, такие как чистота, иммутабельные данные весьма жизнеспособны. Какие-то из них Python хорошо поддерживает, какие-то нет (например, рекурсия).
Сегодня хочется упомянуть библиотеку fn.py. Эта библиотека добавляет синтаксический сахар в виде scala-лямбд, персистентных структур данных, стримом, а также другие элементы, которые встречаются в ФП.&lt;/p&gt;
&lt;p&gt;Рассказ о библиотеке:&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/k3az1g_Q4xE?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Исходники библиотеки: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kachayev/fn.py"&gt;https://github.com/kachayev/fn.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="fp"></category><category term="функциональное программирование"></category><category term="фп"></category><category term="видео"></category></entry><entry><title>Функциональный Python: Python — это не Haskell</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./19/funktsionalnyi-python-python-eto-ne-haskell/" rel="alternate"></link><updated>2015-09-19T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-19:posts/2015/сент./19/funktsionalnyi-python-python-eto-ne-haskell/</id><summary type="html">&lt;p&gt;Идеи функционального программирования довольно популярны, в том числе и в среде программистов на Python, который не является функциональным языком.
В докладе речь пойдёт об особенностях функционального стиля в Python, об его отличиях от типичных функциональных языков типа Haskell.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/ajCLLdJYRUs?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="функциональное программирование"></category><category term="видео"></category><category term="haskell"></category></entry><entry><title>Функциональный Python: пробуем функциональщину</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./27/funktsionalnyi-python-probuem-funktsionalshchinu/" rel="alternate"></link><updated>2015-08-27T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-27:posts/2015/авг./27/funktsionalnyi-python-probuem-funktsionalshchinu/</id><summary type="html">&lt;p&gt;Существует два основных подхода в программировании - декларативный и императивный. 
Каждый из них имеет свои достоинства и недостатки. Крайнее время декларативный подход, а в частности функциональное программирование стало весьма популярным. Давайте ознакомимся с ним:
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/DblOFqPE1Pk?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</summary><category term="fp"></category><category term="функциональное программирование"></category><category term="видео"></category></entry></feed>