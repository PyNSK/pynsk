<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/hardcore-python.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 08 Oct 2015 18:00:00 +0600</lastBuildDate><item><title>Hardcore Python: переопределяем механизм импорта</title><link>http://pynsk.ru/posts/2015/%D0%BE%D0%BA%D1%82./08/hardcore-python-pereopredeliaem-mekhanizm-importa/</link><description>&lt;p&gt;В стандартной Python начиная с 2.3 существует механизм импорт-хуков. 
Зачем они нужны? 
Все очень просто - захотелось добавить поддержку импорта из .zip архивов. Ява такое может (.jar) - чем Питон хуже?
Но открывать редактор только ради .zip не очень... Поэтому Python умеет загружать модули из базы данных или с соседнего сервера.&lt;/p&gt;
&lt;p&gt;Механизм механизм импорт-хуков реализован с помощью:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sys.meta_path&lt;/li&gt;
&lt;li&gt;sys.path_hooks&lt;/li&gt;
&lt;li&gt;sys.path_import_cache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Как ими пользоваться отлично описано в статье Андрея Светлова (1 ссылка в приложении), поэтому здесь повторять не буду.&lt;/p&gt;
&lt;p&gt;Ссылки чтобы сломать мозг:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://asvetlov.blogspot.ru/2010/05/3.html"&gt;http://asvetlov.blogspot.ru/2010/05/3.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0302/"&gt;https://www.python.org/dev/peps/pep-0302/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/sys.html"&gt;https://docs.python.org/3/library/sys.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://xion.org.pl/2012/05/06/hacking-python-imports/"&gt;http://xion.org.pl/2012/05/06/hacking-python-imports/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 08 Oct 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-10-08:posts/2015/окт./08/hardcore-python-pereopredeliaem-mekhanizm-importa/</guid><category>sys</category><category>стандартная библиотека</category></item><item><title>Hardcore Python: Конкурентность в Питоне с нуля. Вживую</title><link>http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./10/hardcore-python-konkurentnost-v-pitone-s-nulia-vzhivuiu/</link><description>&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/ys8lW8eQaJQ?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 10 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-10:posts/2015/сент./10/hardcore-python-konkurentnost-v-pitone-s-nulia-vzhivuiu/</guid><category>видео</category><category>конкурентность</category><category>многопоточность</category></item><item><title>Hardcore Python: запускаем С код с помощью cffi</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./23/hardcore-python-zapuskaem-s-kod-s-pomoshchiu-cffi/</link><description>&lt;p&gt;Самый популярный Python это CPython. Он настолько популярен, что когда говорят Python имеют ввиду именно каноническую реализацию - CPython.&lt;/p&gt;
&lt;p&gt;CPython, как можно понять из названия, имеет какое-то отношение к языку C.
Из Python вы можете с помощью ctypes дергать С-шные функции.&lt;br /&gt;
Однако, этот механизм несколько медленный и не всегда удобный - бывает надо просто дернуть один кусок C-кода. Или надо только часть от h-файла, или только кусок структуры.
Вот в этом случае помогает - cffi.&lt;/p&gt;
&lt;p&gt;Пример кода с использованием этой библиотеки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cffi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FFI&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cdef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;.......int printf(const char *format, ...);   // copy-pasted from the man page&lt;/span&gt;
&lt;span class="s"&gt;.......&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="c"&gt;# loads the entire C namespace&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ffi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;char[]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c"&gt;# equivalent to C code: char arg[] = &amp;quot;world&amp;quot;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hi there, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c"&gt;# call printf&lt;/span&gt;
&lt;span class="n"&gt;hi&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;                                           &lt;span class="c"&gt;# this is the return value&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Эти многоточия в cdef это &lt;em&gt;реальный&lt;/em&gt; код, который надо писать.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cffi.readthedocs.org/en/latest/"&gt;https://cffi.readthedocs.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/cffi"&gt;https://pypi.python.org/pypi/cffi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sun, 23 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-23:posts/2015/авг./23/hardcore-python-zapuskaem-s-kod-s-pomoshchiu-cffi/</guid><category>cffi</category></item><item><title>Hardcore Python: Cython</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./16/hardcore-python-cython/</link><description>&lt;p&gt;Cython — язык программирования, упрощающий написание модулей С/С++ кода для Python. Кроме стандартного синтаксиса Python, поддерживаются:&lt;/p&gt;
&lt;p&gt;Прямой вызов функций и методов С/С++ из кода на Cython;
Строгая типизация переменных, классов, атрибутов классов.&lt;/p&gt;
&lt;p&gt;Код Cython преобразуется в С/С++ код для последующей компиляции и впоследствии может использоваться как расширение стандартного Python или как независимое приложение со встроенной библиотекой выполнения Cython.&lt;/p&gt;
&lt;p&gt;Программирование на Cyhton не очень отличается от Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cdef ackermann(int m, int n):
    if m == 0:
        return n + 1
    elif n == 0:
        return ackermann(m - 1, 1)
    else:
        return ackermann(m - 1, ackermann(m, n - 1))

print(&amp;quot;Ackermann:&amp;quot;)
print(ackermann(0, 3))
print(ackermann(1, 4))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В этом коде указаны типы, что делать не обязательно (тогда и прироста не будет толком)
Типы в Cython - Си-шные, т.е. каких-то сложных Python-типов вы не найдете.&lt;/p&gt;
&lt;p&gt;Хорошее применение языка - связка с C/C++ кодом - оно происходит в разы быстрее, чем в CPython и PyPi. Скорость исполнения программы также выше (может достигать сотен раз).  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cython.org/"&gt;http://cython.org/&lt;/a&gt;
&lt;a href="https://www.wikiwand.com/ru/Cython"&gt;https://www.wikiwand.com/ru/Cython&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sun, 16 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-16:posts/2015/авг./16/hardcore-python-cython/</guid><category>cython</category><category>оптимизация</category></item><item><title>Python оптимизации: сверхоптимизация кода на Python</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./13/python-optimizatsii-sverkhoptimizatsiia-koda-na-python/</link><description>&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/K3qL3NqZDcE?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 13 Aug 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-13:posts/2015/авг./13/python-optimizatsii-sverkhoptimizatsiia-koda-na-python/</guid><category>hardcore</category><category>оптимизация</category><category>видео</category></item><item><title>Python и real-time?</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/30/python-i-real-time/</link><description>&lt;p&gt;Возможно!&lt;br /&gt;
Рассказ "Управление памятью в real-time приложениях Python"  Антона Патрушева покажет как можно писать Python приложения с максимально быстрым откликом.
&lt;a href="https://events.yandex.ru/lib/talks/2075/"&gt;https://events.yandex.ru/lib/talks/2075/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 30 Jul 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-30:posts/2015/июля/30/python-i-real-time/</guid><category>интерпретатор</category><category>real-time</category></item></channel></rss>