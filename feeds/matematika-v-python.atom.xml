<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/matematika-v-python.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-11-09T18:00:00+06:00</updated><entry><title>Математика в Python: Преобразование фурье</title><link href="http://pynsk.ru/posts/2015/%D0%BD%D0%BE%D1%8F%D0%B1./09/matematika-v-python-preobrazovanie-fure/" rel="alternate"></link><updated>2015-11-09T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-11-09:posts/2015/нояб./09/matematika-v-python-preobrazovanie-fure/</id><summary type="html">&lt;p&gt;Осторожно, МАТАН!!!&lt;/p&gt;
&lt;p&gt;По-простому, &lt;strong&gt;преобразование Фурье&lt;/strong&gt; — разложение некоторого сигнала на гармонические (синусы или косинусы) колебания (спектр). &lt;/p&gt;
&lt;p&gt;Если вы осознанно употребляете слово "частота", вы уже хотя бы интуитивно представляете, что такое преобразование Фурье. Даже в наших ушах есть хардверный анализатор Фурье (улитка) (а также продвинутые драйвера в мозгу), благодаря которому мы различаем голоса, ноты, тембры... Призма раскладывает белый свет на цвета радуги — это тоже Фурье-анализатор. Форматы mp3 и jpeg в своих алгоритмах содержат преобразование Фурье (одномерное и двухмерное, соответственно) для сжатия информации. В природе и технике есть тысячи примеров... Также есть обратное преобразование Фурье, переводящее "частоты" и "амплитуды" в "сигнал", математически очень похожее на прямое.&lt;/p&gt;
&lt;p&gt;Преобразование Фурье является &lt;strong&gt;интегральным преобразованием&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Если речь идёт о дискретном сигнале, то интеграл обращается в сумму (и становится &lt;code&gt;дискретным преобразованием Фурье, ДПФ&lt;/code&gt;). Беда в том, что, чтобы посчитать такую сумму &lt;code&gt;N&lt;/code&gt; элементов, надо совершить &lt;code&gt;N^2&lt;/code&gt; операций с комплексными числами. Но кто-то очень умный давно (&lt;code&gt;Cooley, Tukey, 1965 г&lt;/code&gt;, а ещё сам &lt;code&gt;Гаусс в 1805 г.&lt;/code&gt;) придумал алгоритм, вычисляющий &lt;code&gt;ДПФ&lt;/code&gt; &lt;code&gt;N&lt;/code&gt; элементов в &lt;code&gt;N*log(N)&lt;/code&gt; операций (большая часть из которых над действительными числами), что существенно экономит вычислительное время — быстрое преобразование Фурье, БПФ (&lt;code&gt;Fast Fourier Transform, FFT&lt;/code&gt;). Именно так реализовано ДПФ в современных компьютерных программах.&lt;/p&gt;
&lt;p&gt;В библиотеке &lt;code&gt;numpy&lt;/code&gt; содержится всё что нужно для дискретного преобразования Фурье. Всё это лежит в &lt;code&gt;numpy.fft&lt;/code&gt;. Вот эти функции.&lt;/p&gt;
&lt;p&gt;Общий случай: сигнал может быть как из действительных чисел, так и из комплексных.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fft(a, n=None, axis=-1) — прямое одномерное ДПФ.
ifft(a, n=None, axis=-1) — обратное одномерное ДПФ.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;a&lt;/code&gt; — "сигнал", входной массив (массив &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt; или даже питоновский &lt;code&gt;список&lt;/code&gt; или &lt;code&gt;кортеж&lt;/code&gt;, если в нём только числа). Массив может быть и многомерным, тогда будет вычисляться много &lt;code&gt;ОДНОМЕРНЫХ ПФ&lt;/code&gt; по строкам (по умолчанию) или столбцам, в зависимости от параметра axis. Например, &lt;code&gt;a&lt;/code&gt; — двухмерный, &lt;code&gt;a[n][m]&lt;/code&gt;: при &lt;code&gt;axis=1&lt;/code&gt; или &lt;code&gt;-1&lt;/code&gt; будет такое (под &lt;code&gt;fourier(a...)&lt;/code&gt; понимается результат действия ПФ на &lt;code&gt;a&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[fourier(a[0][j]), fourier(a[1][j]), ... foirier(a[n][j])]&lt;/span&gt;
&lt;span class="na"&gt;При axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0 такое:&lt;/span&gt;
&lt;span class="k"&gt;[fourier(a[i][0]), fourier(a[i][1]), ... foirier(a[i][m])]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;n&lt;/code&gt; — сколько элементов массива брать. Если меньше длины массива, то обрезать, если больше, то дополнить нулями, по умолчанию &lt;code&gt;len(a)&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;fft2(a, s=None, axes=(-2, -1)) — прямое двухмерное ПФ.
ifft2(a, s=None, axes=(-2, -1)) — обратное двухмерное ПФ.
fftn(a, s=None, axes=None) — прямое многомерное ПФ.
ifftn(a, s=None, axes=None) — обратное многомерное ПФ.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Всё так же, как и для одномерных, но s и axes теперь кортежи для каждой размерности. О размерности &lt;code&gt;fftn&lt;/code&gt;, &lt;code&gt;ifftn&lt;/code&gt; догадаются по размерности входных массивов или &lt;code&gt;s&lt;/code&gt; и &lt;code&gt;axes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Когда сигнал действительный (&lt;code&gt;real&lt;/code&gt;) (пожалуй, самый распространённый случай).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rfft(a, n=None, axis=-1) — прямое одномерное ДПФ (для действительных чисел).
irfft(a, n=None, axis=-1) — обратное одномерное ДПФ.
rfft2(a, s=None, axes=(-2, -1)) — прямое двухмерное ДПФ.
irfft2(a, s=None, axes=(-2, -1)) — обратное двухмерное ДПФ.
rfftn(a, s=None, axes=None) — прямое многомерное ДПФ.
irfftn(a, s=None, axes=None) — обратное многомерное ДПФ.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Всё так же, как и для общего случая.&lt;/p&gt;
&lt;p&gt;Все эти функции возвращают массив соответствующей размерности, в котором записан результат &lt;code&gt;ДПФ&lt;/code&gt;. &lt;em&gt;Разница такая&lt;/em&gt;. Если длина входного массива (или какой-либо его размерности) &lt;code&gt;N&lt;/code&gt;, то в общем случае (с комплексным сигналом) длина выходного массива &lt;code&gt;N&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Там содержатся сначала положительные частоты от нуля до частоты Котельникова (Найквиста), потом отрицательные в порядке возрастания.&lt;/p&gt;
&lt;p&gt;В случае действительного сигнала отрицательные частоты полностью симметричны положительным, и тогда нет нужды их записывать: длина выходного массива &lt;code&gt;N/2+1&lt;/code&gt;, частоты от нуля до частоты Котельникова.&lt;/p&gt;
&lt;p&gt;Если спектр сигнала действительный (а сигнал обладает "эрмитовой симметрией": его половины симметричны относительно центра по модулю и являются комплексно сопряжёнными друг другу), то можно применить такие функции:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;hfft(a, n=None, axis=-1) — прямое одномерное ДПФ.
ihfft(a, n=None, axis=-1) — обратное одномерное ДПФ.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Длина входного массива &lt;code&gt;N&lt;/code&gt;, а выходного &lt;code&gt;2*N+1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Кроме того, есть вспомогательные функции (будет понятнее из примера):
fftfreq(n, d=1.0) — возвращает частоты для выходных массивов функций fft&lt;em&gt;.
rfftfreq(n, d=1.0) — возвращает частоты для выходных массивов функций rfft&lt;/em&gt;.
n — длина входного массива, d — период дискретизации (обратная частота дискретизации).
fftshift(x, axes=None) — преобразует массив (с результатом ДПФ, от функций fft*) так, чтобы нулевая частота была в центре.
ifftshift(x, axes=None) — делает обратную операцию.&lt;/p&gt;
&lt;p&gt;Приведём такой пример. Допустим, записали мы микрофоном какой-то шум, и надо определить, есть ли там какой-нибудь тон.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;#coding=utf8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np_abs&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.fft&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rfft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rfftfreq&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;uniform&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="c"&gt;# а можно импортировать numpy и писать: numpy.fft.rfft&lt;/span&gt;
&lt;span class="n"&gt;FD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22050&lt;/span&gt; &lt;span class="c"&gt;# частота дискретизации, отсчётов в секунду&lt;/span&gt;
&lt;span class="c"&gt;# а это значит, что в дискретном сигнале представлены частоты от нуля до 11025 Гц (это и есть теорема Котельникова)&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="c"&gt;# длина входного массива, 0.091 секунд при такой частоте дискретизации&lt;/span&gt;
&lt;span class="c"&gt;# сгенерируем сигнал с частотой 440 Гц длиной N&lt;/span&gt;
&lt;span class="n"&gt;pure_sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;6.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;440.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;FD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="c"&gt;# сгенерируем шум, тоже длиной N (это важно!)&lt;/span&gt;
&lt;span class="n"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;50.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;50.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# суммируем их и добавим постоянную составляющую 2 мВ (допустим, не очень хороший микрофон попался. Или звуковая карта или АЦП)&lt;/span&gt;
&lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pure_sig&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="c"&gt;# в numpy так перегружена функция сложения&lt;/span&gt;
&lt;span class="c"&gt;# вычисляем преобразование Фурье. Сигнал действительный, поэтому надо использовать rfft, это быстрее, чем fft&lt;/span&gt;
&lt;span class="n"&gt;spectrum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rfft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# нарисуем всё это, используя matplotlib&lt;/span&gt;
&lt;span class="c"&gt;# Сначала сигнал зашумлённый и тон отдельно&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FD&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# по оси времени секунды!&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FD&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pure_sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# чистый сигнал будет нарисован красным&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Время, c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# это всё запускалось в Python 2.7, поэтому юникодовские строки&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Напряжение, мВ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Зашумлённый сигнал и тон 440 Гц&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;# когда закроется этот график, откроется следующий&lt;/span&gt;
&lt;span class="c"&gt;# Потом спектр&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rfftfreq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;FD&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np_abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spectrum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# rfftfreq сделает всю работу по преобразованию номеров элементов массива в герцы&lt;/span&gt;
&lt;span class="c"&gt;# нас интересует только спектр амплитуд, поэтому используем abs из numpy (действует на массивы поэлементно)&lt;/span&gt;
&lt;span class="c"&gt;# делим на число элементов, чтобы амплитуды были в милливольтах, а не в суммах Фурье. Проверить просто — постоянные составляющие должны совпадать в сгенерированном сигнале и в спектре&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Частота, Гц&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Напряжение, мВ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;Спектр&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылки для изучения:
- &lt;a href="https://ru.wikipedia.org/wiki/Преобразование_Фурье"&gt;Преобразование Фурье&lt;/a&gt;
- &lt;a href="https://ru.wikipedia.org/wiki/Быстрое_преобразование_Фурье"&gt;Быстрое преобразование Фурье&lt;/a&gt;
- &lt;a href="https://ru.wikipedia.org/wiki/Дискретное_преобразование_Фурье"&gt;Дискретное преобразование Фурье&lt;/a&gt;
- &lt;a href="https://ru.wikipedia.org/wiki/Теорема_Котельникова"&gt;Теорема Котельникова&lt;/a&gt;
- &lt;a href="http://habrahabr.ru/post/196374/"&gt;Простыми словами о преобразовании Фурье&lt;/a&gt;
- &lt;a href="http://habrahabr.ru/post/269991/"&gt;Практическое применение преобразования Фурье для анализа сигналов. Введение для начинающих&lt;/a&gt;&lt;/p&gt;</summary><category term="матан"></category></entry><entry><title>Математика в Python: Матрицы в NumPy</title><link href="http://pynsk.ru/posts/2015/%D0%BE%D0%BA%D1%82./25/matematika-v-python-matritsy-v-numpy/" rel="alternate"></link><updated>2015-10-25T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-10-25:posts/2015/окт./25/matematika-v-python-matritsy-v-numpy/</id><summary type="html">&lt;p&gt;Списки - встроенный тип Python, могут содержать любые элементы: целые, дробные числа, строки, объекты. Это великая сила Python, но в то же время и слабость — в отношении скорости работы. &lt;/p&gt;
&lt;p&gt;В стандартные дистрибутивы Python входит модуль array, реализующий аналог массивов C/C++, он может пригодиться для простейших расчётов с многомерными массивами, матрицами.&lt;/p&gt;
&lt;p&gt;NumPy — мощнейшая библиотека для научных вычислений. Написать здесь операции с матрицами так же просто, как и с обычными числами. &lt;/p&gt;
&lt;p&gt;Матрица в NumPy — это объект numpy.array, массив чисел одного типа, какой угодно размерности: 0 (одно число, скаляр), 1 (вектор), 2 (матрица), 3 (тензор третьего ранга)... &lt;/p&gt;
&lt;p&gt;Матрицы во многом похожи на списки и массивы модуля array: поддерживают индексацию с таким же синтаксисом и легко преобразуются в них.&lt;/p&gt;
&lt;p&gt;Перейдём к делу. Например, нужно посчитать произведение и сумму матриц, скаляров и векторов. Мы бы на бумаге записали так:&lt;/p&gt;
&lt;p&gt;A&lt;em&gt;B&lt;/em&gt;C*D + E,
где B,C — матрицы 2x2, D,E — вектор-столбцы, A — скаляр (число).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="c"&gt;# обычное число&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;# а можно и так&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;1.32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.78&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# треугольная, матрица, делаем диагональную матрицу&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.12&lt;/span&gt; &lt;span class="c"&gt;# потом дописываем элемент B_12 (обозначение, как мы привыкли в институтах)&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# сначала делаем вектор-строку и заполняем нулями,&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt; &lt;span class="c"&gt;# добавляем внизу вектор-строку (3, 2)&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.97&lt;/span&gt; &lt;span class="c"&gt;# и для интереса сделаем элемент (1,1) ненулевым&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="c"&gt;# а теперь транспонируем, тоже для интереса&lt;/span&gt;

&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# просто делаем вектор-столбец с дробными числами,&lt;/span&gt;
&lt;span class="c"&gt;# а точки писать лень (но и без dtype вычисления будут дробные, так как дробные числа уже есть)&lt;/span&gt;

&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# вектор-столбец из единиц&lt;/span&gt;
&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt; &lt;span class="c"&gt;# домножим для интереса&lt;/span&gt;

&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="c"&gt;# проще пареной репы!!!&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Результат:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.32&lt;/span&gt; &lt;span class="mf"&gt;3.12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="mf"&gt;0.78&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.97&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;10.&lt;/span&gt; &lt;span class="mf"&gt;12.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;21.506&lt;/span&gt; &lt;span class="mf"&gt;170.78&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt; &lt;span class="mf"&gt;30.38&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Мораль: &lt;/p&gt;
&lt;p&gt;производить действия с матрицами в NumPy так же просто, как и при рисовании их символов в тетради на парах линейной алгебры. 
Пусть этот пример выглядит наивным, но он показывает, что есть множество инструментов для конструирования матриц, не говоря уже о банальной инициализации известными элементами. &lt;/p&gt;
&lt;p&gt;А если речь идёт о матрицах 10x10? Трёхмерных, четырёхмерных? С комплексными числами? И даже с произвольными объектами вместо чисел (если определить арифметические действия над ними)? &lt;/p&gt;
&lt;p&gt;NumPy Вам в помощь.&lt;/p&gt;</summary><category term="numpy"></category></entry></feed>