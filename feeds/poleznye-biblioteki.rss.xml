<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://old.pynsk.ru/</link><description></description><atom:link href="http://old.pynsk.ru/feeds/poleznye-biblioteki.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 02 Jan 2016 15:00:00 +0600</lastBuildDate><item><title>Полезные библиотеки: freezegun - замораживаем время</title><link>http://old.pynsk.ru/posts/2016/Jan/02/poleznye-biblioteki-freezegun-zamorazhivaem-vremia/</link><description>&lt;p&gt;В модуле &lt;code&gt;datetime&lt;/code&gt; есть &lt;code&gt;now()&lt;/code&gt; - метод, который возвращает текущее время. Применяется метод часто, например, создаем новую запись в базе данных - в лог пишем запись от текущего времени.&lt;/p&gt;
&lt;p&gt;Вот только такой код оттестировать не всегда просто - иногда надо чтобы &lt;code&gt;now()&lt;/code&gt; возвращал конкретное время.
Для этого случая есть &lt;code&gt;freezegun&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;freezegun&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;freeze_time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="nd"&gt;@freeze_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2012-01-14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Or a unittest TestCase - freezes for every test, from the start of setUpClass to the end of tearDownClass&lt;/span&gt;

&lt;span class="nd"&gt;@freeze_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1955-11-12&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_the_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1955&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Or any other class - freezes around each callable (may not work in every case)&lt;/span&gt;

&lt;span class="nd"&gt;@freeze_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2012-01-14&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tester&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_the_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылка на репозиторий: &lt;a href="https://github.com/spulec/freezegun"&gt;https://github.com/spulec/freezegun&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 02 Jan 2016 15:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2016-01-02:posts/2016/Jan/02/poleznye-biblioteki-freezegun-zamorazhivaem-vremia/</guid><category>time</category><category>время</category><category>mock</category><category>test</category><category>now</category><category>datetime</category></item><item><title>Полезные библиотеки: где брать модули для django?</title><link>http://old.pynsk.ru/posts/2015/Dec/30/poleznye-biblioteki-gde-brat-moduli-dlia-django/</link><description>&lt;p&gt;Django - самый популярный web-фреймворк для Python. Этому доказательство - количество библиотек расширяющих возможности.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;От этого множество авторов пишут статьи с названиями "Мой топ 10 django-модулей", мы не исключение и будем такие писать.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Представим ситуацию, начали проект, придумали функционал, а затем начинаете гуглить готовый модуль. Вот чтобы не гуглить, есть сайт/список &lt;code&gt;awesome-django&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://awesome-django.com/"&gt;http://awesome-django.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;На этом сайте представлен удачный список django-модулей. Все модули разбиты на категории. Стоит отметить, что в списке указываются не все модули и не всегда "живые".&lt;/p&gt;
&lt;p&gt;Нашли модуль, а он не живой. Чтобы найти аналог можно воспользоваться сайтом&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.djangopackages.com/"&gt;https://www.djangopackages.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Данный сайт представляет статистику по модулям. Позволяет сравнивать модули, и что самое главное - собирает модули со схожим функционалом вместе.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 30 Dec 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-12-30:posts/2015/Dec/30/poleznye-biblioteki-gde-brat-moduli-dlia-django/</guid><category>django</category><category>package</category><category>module</category><category>модуль</category><category>пакет</category></item><item><title>Полезные библиотеки: RPC и nameko</title><link>http://old.pynsk.ru/posts/2015/Dec/16/poleznye-biblioteki-rpc-i-nameko/</link><description>&lt;p&gt;Всем привычно, когда управление и данные внутри программы перемещаются на одной машине. Все хорошо и ясно (в какой-то мере), но что делать если данных становится много и возникает желание распределить вычисления?&lt;/p&gt;
&lt;p&gt;Берем 2 компьютера, а дальше... А дальше нам надо как-то из программы на одном компьютере запустить метод на другом, да еще и данные перекинуть.
Вот здесь на помощь и приходит &lt;code&gt;RPC&lt;/code&gt; (Remote Procedure Call) вызов удалённых процедур.&lt;/p&gt;
&lt;p&gt;Этот механизм берет на себя все проблемы соединения компьютеров, а таких много: адресные пространства компьютеров могут не совпадать, как передать данные, а если архитектуры различны? и этих "а если" очень много&lt;/p&gt;
&lt;p&gt;Хорошо про RPC написано по ссылке -&amp;gt; &lt;a href="http://citforum.ru/operating_systems/sos/glava_12.shtml"&gt;http://citforum.ru/operating_systems/sos/glava_12.shtml&lt;/a&gt;
Там вы найдете способ работы RPC, какие проблемы с RPC есть.&lt;/p&gt;
&lt;p&gt;А мы продолжаем. У нас задача - запустить код на одной машине из кода на другой машине.&lt;/p&gt;
&lt;p&gt;В Python есть несколько готовых инструментов для этой задачи. Один из них - nameko&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Nameko&lt;/code&gt; - это фреймворк, который направлен на создание различных микросервисов.
Данный фреймворк обладает простым строением и позволяет работать в режимах RPC, Pub-Sub - чего достаточно для небольших проектов.&lt;/p&gt;
&lt;p&gt;Создание микросервиса элементарное:&lt;/p&gt;
&lt;p&gt;Немного кода:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nameko.rpc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rpc&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GreetingService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;greeting_service&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@rpc&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, {}!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Запуск:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ nameko run helloworld
starting services: greeting_service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Готово! Можно использовать (для примера, используем RPC из консоли):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ nameko shell
&amp;gt;&amp;gt;&amp;gt; n.rpc.greeting_service.hello&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Matt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
u&lt;span class="s1"&gt;&amp;#39;Hello, Matt!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Таким образом можно реализовать распределенную систему.
Пример задачи, где это может потребоваться - электронная библиотека. На одной машине клиент может выгружать и редактировать книги, а на второй машине данные хранятся и проводится их индексация.&lt;/p&gt;
&lt;p&gt;Пара ссылок:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/onefinestay/nameko"&gt;https://github.com/onefinestay/nameko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2015/4/8/microservices-with-nameko/"&gt;http://lucumr.pocoo.org/2015/4/8/microservices-with-nameko/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 16 Dec 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-12-16:posts/2015/Dec/16/poleznye-biblioteki-rpc-i-nameko/</guid><category>rpc</category><category>nameko</category><category>удаленный вызов процедур</category></item><item><title>Полезные библиотеки: bokeh - библиотека визуализации данных</title><link>http://old.pynsk.ru/posts/2015/Nov/28/poleznye-biblioteki-bokeh-biblioteka-vizualizatsii-dannykh/</link><description>&lt;p&gt;Bokeh- это библиотека для интерактивной визуализации адаптированная под отображение в браузере. В этом и суть этой библиотеки.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="https://i1.wp.com/www.analyticsvidhya.com/wp-content/uploads/2015/08/Bokeh_Intro.png?resize=398%2C339" /&gt;&lt;/p&gt;
&lt;p&gt;bokeh имеет биндинги к самым различным языкам - R, Lua, Python, Julia.
Вы пишите код визуализации на своем языке, а затем с помощью BokehJS отображаете в браузере. Возможности у инструмента огромные, прям как D3.js&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image" src="https://i2.wp.com/www.analyticsvidhya.com/wp-content/uploads/2015/08/Bokeh_Introduction.png?resize=704%2C304" /&gt;&lt;/p&gt;
&lt;p&gt;Ссылки для изучения: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.analyticsvidhya.com/blog/2015/08/interactive-data-visualization-library-python-bokeh/"&gt;http://www.analyticsvidhya.com/blog/2015/08/interactive-data-visualization-library-python-bokeh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;http://bokeh.pydata.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bokeh.pydata.org/en/latest/docs/quickstart.html#quickstart"&gt;http://bokeh.pydata.org/en/latest/docs/quickstart.html#quickstart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. Библиотека интересная и мощная, поэтому будут еще посты про нее&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 28 Nov 2015 15:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-11-28:posts/2015/Nov/28/poleznye-biblioteki-bokeh-biblioteka-vizualizatsii-dannykh/</guid><category>график</category><category>визуализация</category><category>браузер</category><category>данные</category><category>plot</category></item><item><title>Полезные библиотеки: swig - запускаем C-код из Python</title><link>http://old.pynsk.ru/posts/2015/Nov/26/poleznye-biblioteki-swig-zapuskaem-c-kod-iz-python/</link><description>&lt;p&gt;Для работы с С-библиотеками есть несколько способов:
- Писать программу на С/C++ и подключать DLL (.so) файлы
- Попытаться напрямую запустить C код из нужного языка. &lt;/p&gt;
&lt;p&gt;Перед тем как продолжить - зачем нужно запускать C/C++ код?
Все просто - например, работаем с железом, а значит и с драйверами (а их пишут на C). Вот здесь и появляется необходимость взаимодействовать с С кодом.&lt;/p&gt;
&lt;p&gt;В Python есть несколько вариантов запуска С/C++ кода (без модификации исходного кода) - ctypes, cliff или даже swig.&lt;/p&gt;
&lt;p&gt;Сейчас про SWIG. SWIG (simplified wrapper and interface generator) - это инструмент создания биндингов к различным языкам. &lt;/p&gt;
&lt;p&gt;Работа со SWIG  проста и сложна одновременно. SWIG генерирует большинство кода за программиста. Поэтому необходимо сделать 2 основных шага:&lt;/p&gt;
&lt;p&gt;1) Создать .i файл, в котором описать структуру C/C++-проекта (заголовочные файлы, файлы исходников, необходимые библиотеки)
2) Скомпилировать&lt;/p&gt;
&lt;p&gt;Файл .i выглядит так (пример):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;WDMTNKv2&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;typemap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;PyInt_AsLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;typemap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromLong&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;carrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;array_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;short&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WordBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WDMTMKv2.h&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А шаг компиляции может выглядеть так:&lt;/p&gt;
&lt;p&gt;run.bat:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python setup.py build_ext --inplace -cmingw32
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;setup.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;distutils&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MIL-STD-1553B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4.08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;_WDMTMKv2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WDMTMKv2.i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WDMTMKv2.cpp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;swig_opts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-py3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-c++&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WDMTMKv2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В результате получится &lt;code&gt;.pyd&lt;/code&gt; файл, который используется как обычный python модуль:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from WDMTMKv2 import *&lt;/code&gt;&lt;/p&gt;
&lt;iframe width="459" height="344" src="https://www.youtube.com/embed/mv0kfiepn3s?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.swig.org/"&gt;http://www.swig.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 26 Nov 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-11-26:posts/2015/Nov/26/poleznye-biblioteki-swig-zapuskaem-c-kod-iz-python/</guid><category>видео</category><category>swig</category><category>cython</category><category>c</category></item><item><title>Полезные библиотеки: langid.py</title><link>http://old.pynsk.ru/posts/2015/Sep/30/poleznye-biblioteki-langidpy/</link><description>&lt;p&gt;Представим ситуацию: есть блог, в котором публикуются посты на двух языках (а может и на 10). Необходимо рассортировать посты по языкам в разные RSS. (постов очень много, пускай 1000)&lt;/p&gt;
&lt;p&gt;Вопрос к аудитории - как вы решили бы такую задачу?&lt;/p&gt;
&lt;p&gt;Чтобы решить подобную задачу можно воспользоваться библиотекой &lt;code&gt;langid.py&lt;/code&gt;. 
Это небольшой инструмент, который без доступа в Интернет(!!!) может определить язык текста (и слова).&lt;/p&gt;
&lt;p&gt;Инструмент работает и из консоли, и как web сервис, а также как обычный Python-модуль:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;langid&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;langid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.99999999099035441&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылка на божественный инструмент:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/saffsd/langid.py"&gt;https://github.com/saffsd/langid.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 30 Sep 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-09-30:posts/2015/Sep/30/poleznye-biblioteki-langidpy/</guid><category>язык</category><category>language</category><category>модуль</category><category>пакет</category></item><item><title>Полезные библиотеки: gensim - библиотека для моделирования над текстами</title><link>http://old.pynsk.ru/posts/2015/Sep/17/poleznye-biblioteki-gensim-biblioteka-dlia-modelirovaniia-nad-tekstami/</link><description>&lt;p&gt;Gensim - библиотека Python для моделирования, тематическое моделирование документов и извлечения подобия с больших корпусов.&lt;/p&gt;
&lt;p&gt;Целевая аудитория является обработка естественного языка (НЛП) и IR сообщество.&lt;/p&gt;
&lt;p&gt;В Gensim реализованы популярные алгоритмы НЛП. Например, word2vec. Большинство реализаций алгоритмов умеет использовать несколько ядер.&lt;/p&gt;
&lt;p&gt;https://github.com/piskvorky/gensim/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 17 Sep 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-09-17:posts/2015/Sep/17/poleznye-biblioteki-gensim-biblioteka-dlia-modelirovaniia-nad-tekstami/</guid><category>машинное обучение</category><category>обработка текста</category><category>gensim</category></item><item><title>Полезные библиотеки: funcy - набор конструкций, которые упрощают код</title><link>http://old.pynsk.ru/posts/2015/Sep/09/poleznye-biblioteki-funcy-nabor-konstruktsii-kotorye-uproshchaiut-kod/</link><description>&lt;p&gt;Полезные библиотеки: funcy - набор конструкций, которые упрощают код&lt;/p&gt;
&lt;p&gt;Есть ряд модулей, которые стоит ставить первыми. Этот набор у каждого свой. 
В моем наборе есть место для funcy. 
funcy - это набор мелких полезностей при работе с данными. &lt;/p&gt;
&lt;p&gt;Например, можно создать бесконечный список, объединить список списков, объединение словарей, можно превращать вложенные структуры в плоские и наоборот.&lt;/p&gt;
&lt;p&gt;Это не весь список возможностей - а он и вправду огромный. Посмотрите хотя бы README - &lt;a href="https://github.com/Suor/funcy"&gt;https://github.com/Suor/funcy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://habrahabr.ru/post/174619/"&gt;http://habrahabr.ru/post/174619/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P.S. funcy - написана разработчиком из Красноярска&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 09 Sep 2015 18:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-09-09:posts/2015/Sep/09/poleznye-biblioteki-funcy-nabor-konstruktsii-kotorye-uproshchaiut-kod/</guid><category>функциональное программирование</category><category>funcy</category><category>синтаксис</category></item><item><title>Полезные библиотеки: генерация html с помощью Yattag</title><link>http://old.pynsk.ru/posts/2015/Aug/26/poleznye-biblioteki-generatsiia-html-s-pomoshchiu-yattag/</link><description>&lt;p&gt;В PyPi репозитории не один шаблонизатор HTML. Но далеко не всегда хочется тащить его за собой.
В этом случае нам поможет модуль Yattag - это библиотека (DSL по сути), которая позволяет в Python-way формате писать HTML/XML файлы&lt;/p&gt;
&lt;p&gt;Ознакомьтесь с туториалом:
&lt;a href="http://www.yattag.org/#tutorial"&gt;http://www.yattag.org/#tutorial&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 26 Aug 2015 08:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-26:posts/2015/Aug/26/poleznye-biblioteki-generatsiia-html-s-pomoshchiu-yattag/</guid><category>html</category><category>yattag</category></item><item><title>Полезные библиотеки: plot.ly (plotly)</title><link>http://old.pynsk.ru/posts/2015/Aug/22/poleznye-biblioteki-plotly-plotly/</link><description>&lt;p&gt;Понятное представление информации - это вечная задача. Причем она свойственна всем.&lt;/p&gt;
&lt;p&gt;Хочется упомянуть графики. Вот собрали мы данные, задача была не простая, а теперь надо их представить. Графики бывают разных типов, их очень много. Даже если какой-то график сделали, а как поделиться? Можно скинуть картинку, да только придется потом с "линейкой" вычислять значения, а можно пойти по другому пути - https://plot.ly/python/. &lt;/p&gt;
&lt;p&gt;ploy.ly предоставляет возможно создать динамический график, например, &lt;a href="https://plot.ly/python/dashboard/"&gt;https://plot.ly/python/dashboard/&lt;/a&gt;&lt;br /&gt;
plot.ly позволяет создавать самые разные графики, которые будут выглядеть как живые - можно будет методом тыка узнать значение графика в точке, покрутить, повертеть график.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 22 Aug 2015 18:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-22:posts/2015/Aug/22/poleznye-biblioteki-plotly-plotly/</guid><category>график</category><category>plotly</category></item><item><title>Полезные библиотеки: numpy</title><link>http://old.pynsk.ru/posts/2015/Aug/22/poleznye-biblioteki-numpy/</link><description>&lt;p&gt;NumPy — это библиотека языка Python, добавляющая поддержку больших многомерных массивов и матриц, вместе с большой библиотекой высокоуровневых (и очень быстрых) математических функций для операций с этими массивами.&lt;/p&gt;
&lt;p&gt;В чем же "фишка" NumPy вы можете спросить. &lt;/p&gt;
&lt;p&gt;Основным объектом NumPy является однородный многомерный массив (в numpy называется numpy.ndarray). Это многомерный массив элементов (обычно чисел), одного типа.&lt;/p&gt;
&lt;p&gt;Здесь можно подчеркнуть &lt;em&gt;одного типа&lt;/em&gt;. Эта существенная деталь позволяет заметно ускорить работу с такими объектами. Зная, что данный объект имеет только, скажем, целые числа, то не будут производится проверки типов. Плюс к этому - уменьшается общий объем памяти для хранения таких объектов.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonworld.ru/numpy/1.html"&gt;http://pythonworld.ru/numpy/1.html&lt;/a&gt;
&lt;a href="http://www.numpy.org/"&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 22 Aug 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-22:posts/2015/Aug/22/poleznye-biblioteki-numpy/</guid><category>numpy</category></item><item><title>Python и асинхронные задачи</title><link>http://old.pynsk.ru/posts/2015/Aug/16/python-i-asinkhronnye-zadachi/</link><description>&lt;p&gt;Celery — распределенная очередь заданий
И так, что же умеет Celery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Выполнять задания асинхронно или синхронно&lt;/li&gt;
&lt;li&gt;Выполнять периодические задания(умная замена crond)&lt;/li&gt;
&lt;li&gt;Выполнять отложенные задания&lt;/li&gt;
&lt;li&gt;Распределенное выполнение (может быть запущен на N серверах)&lt;/li&gt;
&lt;li&gt;В пределах одного worker'а возможно конкурентное выполнение нескольких задач(одновременно)&lt;/li&gt;
&lt;li&gt;Выполнять задание повторно, если вылез exception&lt;/li&gt;
&lt;li&gt;Ограничивать количество заданий в единицу времени(rate limit, для задания или глобально)&lt;/li&gt;
&lt;li&gt;Routing заданий(какому worker'у что делать)&lt;/li&gt;
&lt;li&gt;Несложно мониторить выполнение заданий&lt;/li&gt;
&lt;li&gt;Выполнять подзадания&lt;/li&gt;
&lt;li&gt;Присылать отчеты об exception'ах на email&lt;/li&gt;
&lt;li&gt;Проверять выполнилось ли задание(удобно для построения Ajax приложений, где юзер ждет факта завершения)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Применение очередей задач широкое - если у вас есть задачи, которые можно выполнить не прям сейчас, а чуть позже - то стоит использовать. Примеры таких задач - парсинг RSS, отправка Email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sun, 16 Aug 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-16:posts/2015/Aug/16/python-i-asinkhronnye-zadachi/</guid><category>celery</category></item><item><title>Рисование графиков на Python</title><link>http://old.pynsk.ru/posts/2015/Aug/15/risovanie-grafikov-na-python/</link><description>&lt;p&gt;Графики бывают совсем разные. Де-факто стандартом в питоне для построения графиков является matplotlib. Это такой комбайн, который умеет очень много, даже 3Д графики. &lt;/p&gt;
&lt;p&gt;Matplotlib написан и поддерживался в основном Джоном Хантером (англ. John Hunter) и распространяется на условиях BSD-подобной лицензии. Генерируемые в различных форматах изображения могут быть использованы в интерактивной графике, в научных публикациях, графическом интерфейсе пользователя, веб-приложениях, где требуется построение диаграмм.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://matplotlib.org/"&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 15 Aug 2015 18:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-15:posts/2015/Aug/15/risovanie-grafikov-na-python/</guid><category>график</category><category>matplotlib</category></item><item><title>Python + GUI == PyQt</title><link>http://old.pynsk.ru/posts/2015/Aug/08/python-gui-pyqt/</link><description>&lt;p&gt;Qt - это инструментарий для разработки на C++, который предоставляет огромный спектр возможностей: от рисования GUI, до написания низкоуровневых серверов. 
Часто Qt применяют для создания GUI, в том числе в интерактивном режиме - можно перемещать виджеты на формы.
Qt имеет отличную докумементацию, а также имеет привязку для Python - PyQt и PySide. (вторая еще с Qt5 не умеет работать)&lt;/p&gt;
&lt;p&gt;Используя PyQt можно нарисовать формочку в редакторе, а затем буквально одной строчкой начать писать логику.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PyQt"&gt;https://wiki.python.org/moin/PyQt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.su/Документации/ВведениеВСредуPyQt4"&gt;http://wiki.python.su/Документации/ВведениеВСредуPyQt4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 08 Aug 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-08:posts/2015/Aug/08/python-gui-pyqt/</guid></item><item><title>Python + winapi</title><link>http://old.pynsk.ru/posts/2015/Aug/01/python-winapi/</link><description>&lt;p&gt;Пишите под windows, да еще и с Win API? Python здесь тоже может помочь, ведь для него есть библиотека pywin32 (http://sourceforge.net/projects/pywin32/). Данная библиотека предоставляет все базовые примитивы для работы с WinAPI.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 01 Aug 2015 18:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-08-01:posts/2015/Aug/01/python-winapi/</guid><category>winapi</category></item><item><title>JSON DSL - JSL</title><link>http://old.pynsk.ru/posts/2015/Jul/31/json-dsl-jsl/</link><description>&lt;p&gt;Если вы широко используете JSON в своем проекте, то вам будет интересен DSL - JSL.
JSL позволяет описывать модели, почти в какой-нибудь ORM, создавать объекты по этим моделям и как-то с ними работать.
Интересный проект.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aromanovich/jsl"&gt;https://github.com/aromanovich/jsl&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 31 Jul 2015 17:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-07-31:posts/2015/Jul/31/json-dsl-jsl/</guid><category>dsl</category><category>json</category></item><item><title>Tkinter</title><link>http://old.pynsk.ru/posts/2015/Jul/25/tkinter/</link><description>&lt;p&gt;Родным модулем для построения GUI интерфейсов для Python программ является Tkinter.
Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы.&lt;/p&gt;
&lt;p&gt;Данный курс - &lt;a href="http://younglinux.info/tkinter.php"&gt;http://younglinux.info/tkinter.php&lt;/a&gt; - "Создание GUI на Python с помощью библиотеки Tkinter" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 25 Jul 2015 18:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-07-25:posts/2015/Jul/25/tkinter/</guid><category>GUI</category><category>интерфейс</category><category>tkinter</category></item><item><title>Набор GUI библиотек для Python</title><link>http://old.pynsk.ru/posts/2015/Jul/25/nabor-gui-bibliotek-dlia-python/</link><description>&lt;p&gt;На странице Python-wiki представлен огромный список пакетов для создания GUI на Python
&lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;https://wiki.python.org/moin/GuiProgramming&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 25 Jul 2015 10:00:00 +0600</pubDate><guid>tag:old.pynsk.ru,2015-07-25:posts/2015/Jul/25/nabor-gui-bibliotek-dlia-python/</guid><category>GUI</category><category>интерфейс</category></item></channel></rss>