<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyNSK - Новосибирское Python сообщество</title><link>http://pynsk.ru/</link><description></description><atom:link href="http://pynsk.ru/feeds/poleznye-biblioteki.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 30 Sep 2015 10:00:00 +0600</lastBuildDate><item><title>Полезные библиотеки: langid.py</title><link>http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./30/poleznye-biblioteki-langidpy/</link><description>&lt;p&gt;Представим ситуацию: есть блог, в котором публикуются посты на двух языках (а может и на 10). Необходимо рассортировать посты по языкам в разные RSS. (постов очень много, пускай 1000)&lt;/p&gt;
&lt;p&gt;Вопрос к аудитории - как вы решили бы такую задачу?&lt;/p&gt;
&lt;p&gt;Чтобы решить подобную задачу можно воспользоваться библиотекой &lt;code&gt;langid.py&lt;/code&gt;. 
Это небольшой инструмент, который без доступа в Интернет(!!!) может определить язык текста (и слова).&lt;/p&gt;
&lt;p&gt;Инструмент работает и из консоли, и как web сервис, а также как обычный Python-модуль:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;langid&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;langid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.99999999099035441&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылка на божественный инструмент:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/saffsd/langid.py"&gt;https://github.com/saffsd/langid.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 30 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-30:posts/2015/сент./30/poleznye-biblioteki-langidpy/</guid><category>язык</category><category>language</category><category>модуль</category><category>пакет</category></item><item><title>Полезные библиотеки: gensim - библиотека для моделирования над текстами</title><link>http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./17/poleznye-biblioteki-gensim-biblioteka-dlia-modelirovaniia-nad-tekstami/</link><description>&lt;p&gt;Gensim - библиотека Python для моделирования, тематическое моделирование документов и извлечения подобия с больших корпусов.&lt;/p&gt;
&lt;p&gt;Целевая аудитория является обработка естественного языка (НЛП) и IR сообщество.&lt;/p&gt;
&lt;p&gt;В Gensim реализованы популярные алгоритмы НЛП. Например, word2vec. Большинство реализаций алгоритмов умеет использовать несколько ядер.&lt;/p&gt;
&lt;p&gt;https://github.com/piskvorky/gensim/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Thu, 17 Sep 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-17:posts/2015/сент./17/poleznye-biblioteki-gensim-biblioteka-dlia-modelirovaniia-nad-tekstami/</guid><category>машинное обучение</category><category>обработка текста</category><category>gensim</category></item><item><title>Полезные библиотеки: funcy - набор конструкций, которые упрощают код</title><link>http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./09/poleznye-biblioteki-funcy-nabor-konstruktsii-kotorye-uproshchaiut-kod/</link><description>&lt;p&gt;Полезные библиотеки: funcy - набор конструкций, которые упрощают код&lt;/p&gt;
&lt;p&gt;Есть ряд модулей, которые стоит ставить первыми. Этот набор у каждого свой. 
В моем наборе есть место для funcy. 
funcy - это набор мелких полезностей при работе с данными. &lt;/p&gt;
&lt;p&gt;Например, можно создать бесконечный список, объединить список списков, объединение словарей, можно превращать вложенные структуры в плоские и наоборот.&lt;/p&gt;
&lt;p&gt;Это не весь список возможностей - а он и вправду огромный. Посмотрите хотя бы README - &lt;a href="https://github.com/Suor/funcy"&gt;https://github.com/Suor/funcy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://habrahabr.ru/post/174619/"&gt;http://habrahabr.ru/post/174619/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;P.S. funcy - написана разработчиком из Красноярска&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 09 Sep 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-09-09:posts/2015/сент./09/poleznye-biblioteki-funcy-nabor-konstruktsii-kotorye-uproshchaiut-kod/</guid><category>функциональное программирование</category><category>funcy</category><category>синтаксис</category></item><item><title>Полезные библиотеки: генерация html с помощью Yattag</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./26/poleznye-biblioteki-generatsiia-html-s-pomoshchiu-yattag/</link><description>&lt;p&gt;В PyPi репозитории не один шаблонизатор HTML. Но далеко не всегда хочется тащить его за собой.
В этом случае нам поможет модуль Yattag - это библиотека (DSL по сути), которая позволяет в Python-way формате писать HTML/XML файлы&lt;/p&gt;
&lt;p&gt;Ознакомьтесь с туториалом:
&lt;a href="http://www.yattag.org/#tutorial"&gt;http://www.yattag.org/#tutorial&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Wed, 26 Aug 2015 08:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-26:posts/2015/авг./26/poleznye-biblioteki-generatsiia-html-s-pomoshchiu-yattag/</guid><category>html</category><category>yattag</category></item><item><title>Полезные библиотеки: plot.ly (plotly)</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./22/poleznye-biblioteki-plotly-plotly/</link><description>&lt;p&gt;Понятное представление информации - это вечная задача. Причем она свойственна всем.&lt;/p&gt;
&lt;p&gt;Хочется упомянуть графики. Вот собрали мы данные, задача была не простая, а теперь надо их представить. Графики бывают разных типов, их очень много. Даже если какой-то график сделали, а как поделиться? Можно скинуть картинку, да только придется потом с "линейкой" вычислять значения, а можно пойти по другому пути - https://plot.ly/python/. &lt;/p&gt;
&lt;p&gt;ploy.ly предоставляет возможно создать динамический график, например, &lt;a href="https://plot.ly/python/dashboard/"&gt;https://plot.ly/python/dashboard/&lt;/a&gt;&lt;br /&gt;
plot.ly позволяет создавать самые разные графики, которые будут выглядеть как живые - можно будет методом тыка узнать значение графика в точке, покрутить, повертеть график.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 22 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-22:posts/2015/авг./22/poleznye-biblioteki-plotly-plotly/</guid><category>график</category><category>plotly</category></item><item><title>Полезные библиотеки: numpy</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./22/poleznye-biblioteki-numpy/</link><description>&lt;p&gt;NumPy — это библиотека языка Python, добавляющая поддержку больших многомерных массивов и матриц, вместе с большой библиотекой высокоуровневых (и очень быстрых) математических функций для операций с этими массивами.&lt;/p&gt;
&lt;p&gt;В чем же "фишка" NumPy вы можете спросить. &lt;/p&gt;
&lt;p&gt;Основным объектом NumPy является однородный многомерный массив (в numpy называется numpy.ndarray). Это многомерный массив элементов (обычно чисел), одного типа.&lt;/p&gt;
&lt;p&gt;Здесь можно подчеркнуть &lt;em&gt;одного типа&lt;/em&gt;. Эта существенная деталь позволяет заметно ускорить работу с такими объектами. Зная, что данный объект имеет только, скажем, целые числа, то не будут производится проверки типов. Плюс к этому - уменьшается общий объем памяти для хранения таких объектов.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonworld.ru/numpy/1.html"&gt;http://pythonworld.ru/numpy/1.html&lt;/a&gt;
&lt;a href="http://www.numpy.org/"&gt;http://www.numpy.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 22 Aug 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-22:posts/2015/авг./22/poleznye-biblioteki-numpy/</guid><category>numpy</category></item><item><title>Python и асинхронные задачи</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./16/python-i-asinkhronnye-zadachi/</link><description>&lt;p&gt;Celery — распределенная очередь заданий
И так, что же умеет Celery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Выполнять задания асинхронно или синхронно&lt;/li&gt;
&lt;li&gt;Выполнять периодические задания(умная замена crond)&lt;/li&gt;
&lt;li&gt;Выполнять отложенные задания&lt;/li&gt;
&lt;li&gt;Распределенное выполнение (может быть запущен на N серверах)&lt;/li&gt;
&lt;li&gt;В пределах одного worker'а возможно конкурентное выполнение нескольких задач(одновременно)&lt;/li&gt;
&lt;li&gt;Выполнять задание повторно, если вылез exception&lt;/li&gt;
&lt;li&gt;Ограничивать количество заданий в единицу времени(rate limit, для задания или глобально)&lt;/li&gt;
&lt;li&gt;Routing заданий(какому worker'у что делать)&lt;/li&gt;
&lt;li&gt;Несложно мониторить выполнение заданий&lt;/li&gt;
&lt;li&gt;Выполнять подзадания&lt;/li&gt;
&lt;li&gt;Присылать отчеты об exception'ах на email&lt;/li&gt;
&lt;li&gt;Проверять выполнилось ли задание(удобно для построения Ajax приложений, где юзер ждет факта завершения)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Применение очередей задач широкое - если у вас есть задачи, которые можно выполнить не прям сейчас, а чуть позже - то стоит использовать. Примеры таких задач - парсинг RSS, отправка Email.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sun, 16 Aug 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-16:posts/2015/авг./16/python-i-asinkhronnye-zadachi/</guid><category>celery</category></item><item><title>Рисование графиков на Python</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./15/risovanie-grafikov-na-python/</link><description>&lt;p&gt;Графики бывают совсем разные. Де-факто стандартом в питоне для построения графиков является matplotlib. Это такой комбайн, который умеет очень много, даже 3Д графики. &lt;/p&gt;
&lt;p&gt;Matplotlib написан и поддерживался в основном Джоном Хантером (англ. John Hunter) и распространяется на условиях BSD-подобной лицензии. Генерируемые в различных форматах изображения могут быть использованы в интерактивной графике, в научных публикациях, графическом интерфейсе пользователя, веб-приложениях, где требуется построение диаграмм.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://matplotlib.org/"&gt;http://matplotlib.org/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 15 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-15:posts/2015/авг./15/risovanie-grafikov-na-python/</guid><category>график</category><category>matplotlib</category></item><item><title>Python + GUI == PyQt</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./08/python-gui-pyqt/</link><description>&lt;p&gt;Qt - это инструментарий для разработки на C++, который предоставляет огромный спектр возможностей: от рисования GUI, до написания низкоуровневых серверов. 
Часто Qt применяют для создания GUI, в том числе в интерактивном режиме - можно перемещать виджеты на формы.
Qt имеет отличную докумементацию, а также имеет привязку для Python - PyQt и PySide. (вторая еще с Qt5 не умеет работать)&lt;/p&gt;
&lt;p&gt;Используя PyQt можно нарисовать формочку в редакторе, а затем буквально одной строчкой начать писать логику.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.python.org/moin/PyQt"&gt;https://wiki.python.org/moin/PyQt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.su/Документации/ВведениеВСредуPyQt4"&gt;http://wiki.python.su/Документации/ВведениеВСредуPyQt4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 08 Aug 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-08:posts/2015/авг./08/python-gui-pyqt/</guid></item><item><title>Python + winapi</title><link>http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./01/python-winapi/</link><description>&lt;p&gt;Пишите под windows, да еще и с Win API? Python здесь тоже может помочь, ведь для него есть библиотека pywin32 (http://sourceforge.net/projects/pywin32/). Данная библиотека предоставляет все базовые примитивы для работы с WinAPI.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 01 Aug 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-08-01:posts/2015/авг./01/python-winapi/</guid><category>winapi</category></item><item><title>JSON DSL - JSL</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/31/json-dsl-jsl/</link><description>&lt;p&gt;Если вы широко используете JSON в своем проекте, то вам будет интересен DSL - JSL.
JSL позволяет описывать модели, почти в какой-нибудь ORM, создавать объекты по этим моделям и как-то с ними работать.
Интересный проект.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aromanovich/jsl"&gt;https://github.com/aromanovich/jsl&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Fri, 31 Jul 2015 17:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-31:posts/2015/июля/31/json-dsl-jsl/</guid><category>dsl</category><category>json</category></item><item><title>Tkinter</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/tkinter/</link><description>&lt;p&gt;Родным модулем для построения GUI интерфейсов для Python программ является Tkinter.
Данная библиотека позволяет построить несложные интерфейсы. Tkinter есть на всех платформах где есть Python. В Python ветки 2.x.x при импорте модуля Tkinter, он пишется в большой буквы (иначе возникает ошибка). При импорте tkinter в версиях 3.x.x Питона имя модуля пишется с маленькой буквы.&lt;/p&gt;
&lt;p&gt;Данный курс - &lt;a href="http://younglinux.info/tkinter.php"&gt;http://younglinux.info/tkinter.php&lt;/a&gt; - "Создание GUI на Python с помощью библиотеки Tkinter" знакомит с особенностями разработки графического интерфейса пользователя на основе языка программирования Python(создание виджет и обработчиков событий, связывание с событиями и др.).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 25 Jul 2015 18:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/tkinter/</guid><category>GUI</category><category>интерфейс</category><category>tkinter</category></item><item><title>Набор GUI библиотек для Python</title><link>http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/nabor-gui-bibliotek-dlia-python/</link><description>&lt;p&gt;На странице Python-wiki представлен огромный список пакетов для создания GUI на Python
&lt;a href="https://wiki.python.org/moin/GuiProgramming"&gt;https://wiki.python.org/moin/GuiProgramming&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Sapronov</dc:creator><pubDate>Sat, 25 Jul 2015 10:00:00 +0600</pubDate><guid>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/nabor-gui-bibliotek-dlia-python/</guid><category>GUI</category><category>интерфейс</category></item></channel></rss>