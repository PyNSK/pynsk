<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/tainstvo-standartnoi-biblioteki.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-08-30T18:00:00+06:00</updated><entry><title>Таинство стандартной библиотеки: abc</title><link href="http://pynsk.ru/tainstvo-standartnoi-biblioteki-abc.html" rel="alternate"></link><updated>2015-08-30T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-30:tainstvo-standartnoi-biblioteki-abc.html</id><summary type="html">&lt;p&gt;Абстрактные базовые классы и интерфейсы — близкие по назначению и смыслу сущности. Как первые, так и вторые представляют собой своеобразный способ документирования кода и помогают ограничить (decouple) взаимодействие отдельных абстракций в программе (классов).&lt;/p&gt;
&lt;p&gt;Питон — очень гибкий язык. Одна из граней этой гибкости — возможности, предоставляемые метапрограммированием. И хотя в ядре языка абстрактные классы и интерфейсы не представлены, первые были реализованы в стандартном модуле abc, вторые — в проекте Zope (модуль zope.interfaces).&lt;/p&gt;
&lt;p&gt;Начиная с версии языка 2.6 в стандартную библиотеку включается модуль abc, добавляющий в язык абстрактные базовые классы (далее АБК).&lt;/p&gt;
&lt;p&gt;АБК позволяют определить класс, указав при этом, какие методы или свойства обязательно переопределить в классах-наследниках&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/72757/"&gt;http://habrahabr.ru/post/72757/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/abc.html"&gt;https://docs.python.org/3/library/abc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="память"></category></entry><entry><title>Таинство стандартной библиотеки: functools.singledispatch</title><link href="http://pynsk.ru/tainstvo-standartnoi-biblioteki-functoolssingledispatch.html" rel="alternate"></link><updated>2015-08-23T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-23:tainstvo-standartnoi-biblioteki-functoolssingledispatch.html</id><summary type="html">&lt;p&gt;Стандартная поставка Python полна возможностями. 
Хочется упомянуть обобщенные функции. Если простыми словами, то это такие функции, где мы не думаем о типах аргументов, а просто пишем логику.  Например, (натянутый пример) оператор "+" - мы не думаем о аргументах, мы просто складывает два объекта.&lt;/p&gt;
&lt;p&gt;Для реализации обобщенных функций в Python 3 (начиная с 3.4) появился метод singledispatch в модуле functools.&lt;/p&gt;
&lt;p&gt;Подробней о этом механизме по ссылке - &lt;a href="https://www.python.org/dev/peps/pep-0443/"&gt;https://www.python.org/dev/peps/pep-0443/&lt;/a&gt;&lt;/p&gt;</summary><category term="functools"></category></entry><entry><title>Таинство стандартной библиотеки: functools.partial</title><link href="http://pynsk.ru/tainstvo-standartnoi-biblioteki-functoolspartial.html" rel="alternate"></link><updated>2015-08-20T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-20:tainstvo-standartnoi-biblioteki-functoolspartial.html</id><summary type="html">&lt;p&gt;Представим, написали мы функцию:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...........&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;run_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Но вот беда, первый аргумент - имя сервера у вас уже есть. А второй, ip сервера, вы получите от пользователя, а функцию уже надо вызвать. Можно, конечно, дождаться когда будет два аргумента, тогда и запустить. А можно пойти по другому пути - воспользоваться механизмом каррирования - такое страшное слово. &lt;/p&gt;
&lt;p&gt;Каррирование - преобразование функции от (предположим) двух аргументов в функцию от первого аргумента, возвращающую функцию, результат вызова которой со вторым агрументом эквивалентен вызову первоначальной функции с упомянутыми аргументами.&lt;/p&gt;
&lt;p&gt;Мощный механизм, который нам и поможет. Пишем&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;my_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My super server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3.4/library/functools.html"&gt;https://docs.python.org/3.4/library/functools.html&lt;/a&gt;&lt;/p&gt;</summary><category term="functools"></category></entry><entry><title>Таинство стандартной библиотеки: примеры для asyncio - aiohttp</title><link href="http://pynsk.ru/tainstvo-standartnoi-biblioteki-primery-dlia-asyncio-aiohttp.html" rel="alternate"></link><updated>2015-08-12T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-12:tainstvo-standartnoi-biblioteki-primery-dlia-asyncio-aiohttp.html</id><summary type="html">&lt;p&gt;Asyncio - это модуль содержащий инфраструктуру пригодную для написания асинхронных сетевых приложений. Благодаря концепции сопрограмм (coroutines), код асинхронного приложения прост для понимания и поддержки. &lt;/p&gt;
&lt;p&gt;Экосистема развивается не по дням, а по часам. Стоит обратить внимание на развитие этого направления современного Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sysdev.me/python-asyncio/"&gt;http://sysdev.me/python-asyncio/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio-dev.html"&gt;https://docs.python.org/3/library/asyncio-dev.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="asyncio"></category><category term="aiohttp"></category></entry><entry><title>Магические методы в Python</title><link href="http://pynsk.ru/magicheskie-metody-v-python.html" rel="alternate"></link><updated>2015-08-10T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-10:magicheskie-metody-v-python.html</id><summary type="html">&lt;p&gt;Статья от  Rafe Kettler.&lt;/p&gt;
&lt;p&gt;Что такое магические методы? Они всё в объектно-ориентированном Питоне. Это специальные методы, с помощью которых вы можете добавить в ваши классы «магию». Они всегда обрамлены двумя нижними подчеркиваниями (например, &lt;strong&gt;init&lt;/strong&gt; или &lt;strong&gt;lt&lt;/strong&gt;). Ещё, они не так хорошо документированны, как хотелось бы. Все магические методы описаны в документации, но весьма беспорядочно и почти безо всякой организации. Поэтому, чтобы исправить то, что я воспринимаю как недостаток документации Питона, я собираюсь предоставить больше информации о магических методах, написанной на понятном языке и обильно снабжённой примерами. Надеюсь, это руководство вам понравится. Используйте его как обучающий материал, памятку или полное описание.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://habrahabr.ru/post/186608/"&gt;http://habrahabr.ru/post/186608/&lt;/a&gt;&lt;/p&gt;</summary><category term="стандартная библиотека"></category></entry><entry><title>Таинство стандартной библиотеки: collections</title><link href="http://pynsk.ru/tainstvo-standartnoi-biblioteki-collections.html" rel="alternate"></link><updated>2015-08-09T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-09:tainstvo-standartnoi-biblioteki-collections.html</id><summary type="html">&lt;p&gt;Модуль collections - предоставляет специализированные типы данных, на основе словарей, кортежей, множеств, списков. Этот модуль хорошо себя показывает при частой работе со словарями и списками. 
Например, данный модуль предоставляет возможность посчитать n наиболее часто встречающихся элементов, в порядке убывания встречаемости. Есть в этом модуле и словарь, который помнит порядок ключей. А еще есть структура, которая позволяет создать объект ведущий себя как кортеж, с тем дополнением, что каждому элементу присваивается имя, по которому можно в дальнейшем получать доступ.&lt;/p&gt;
&lt;p&gt;Заинтересовал? 
Вот ссылки для дальнейшего погружения в тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/collections.html"&gt;https://docs.python.org/3.5/library/collections.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-collections.html"&gt;http://pythonworld.ru/moduli/modul-collections.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Таинство стандартной библиотеки: datetime и calendar</title><link href="http://pynsk.ru/tainstvo-standartnoi-biblioteki-datetime-i-calendar.html" rel="alternate"></link><updated>2015-08-09T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-09:tainstvo-standartnoi-biblioteki-datetime-i-calendar.html</id><summary type="html">&lt;p&gt;Стандартная поставка Python содержит множество инструментов для решения задач. Например, для работы с датами отлично себя показывают datetime и calendar&lt;/p&gt;
&lt;p&gt;Модуль datetime предоставляет классы для обработки времени и даты разными способами. Поддерживается и стандартный способ представления времени, однако больший упор сделан на простоту манипулирования датой, временем и их частями.&lt;/p&gt;
&lt;p&gt;Модуль calendar позволяет напечатать себе календарик (а также содержит некоторые другие полезные функции для работы с календарями). &lt;/p&gt;
&lt;p&gt;Возможности этих модулей обширны. Стоит их рассмотреть внимательно.
Для этого приведем ссылки:&lt;/p&gt;
&lt;p&gt;datetime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/datetime.html"&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-datetime.html"&gt;http://pythonworld.ru/moduli/modul-datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/datetime/"&gt;http://pymotw.com/2/datetime/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;calendar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/calendar.html"&gt;https://docs.python.org/2/library/calendar.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/calendar/"&gt;http://pymotw.com/2/calendar/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Статистический модуль в стандартной библиотеке</title><link href="http://pynsk.ru/statisticheskii-modul-v-standartnoi-biblioteke.html" rel="alternate"></link><updated>2015-08-02T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-02:statisticheskii-modul-v-standartnoi-biblioteke.html</id><summary type="html">&lt;p&gt;Статистический модуль теперь есть в стандартной библиотеке.
Начиная с версии 3.4 в стандартной поставке Python появилось более продвинутое средство для работы с данными. Теперь нет необходимости писать руками методы average, median (вычисление среднего и медианы)  и других. Ознакомьтесь с возможностями стандартного модуля:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/statistics.html"&gt;https://docs.python.org/3/library/statistics.html&lt;/a&gt;&lt;/p&gt;</summary><category term="статистика"></category></entry><entry><title>Регулярные выражения</title><link href="http://pynsk.ru/reguliarnye-vyrazheniia.html" rel="alternate"></link><updated>2015-07-27T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-27:reguliarnye-vyrazheniia.html</id><summary type="html">&lt;p&gt;Предположим, у нас есть задача - выдрать из крупного текстового файла (файла с логами) все IPv4 (адреса клиентов, например). Как это можно сделать?&lt;/p&gt;
&lt;p&gt;Хорошим инструментом для решения этой задачи являются регулярные выражения. Регулярное выражение — это последовательность символов, используемая для поиска и замены текста в строке или файле.&lt;br /&gt;
Возможно, вы уже встречались с записями типа:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;([a-z]+)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Большая вероятность, что это было регулярное выражение.
Регулярные выражения - это мощный инструмент, который стоит изучить и осознать. Не надо запоминать все конструкции, достаточно понять принцип.&lt;/p&gt;
&lt;p&gt;Для погружения в эту тему, рекомендуем эти материалы:
&lt;a href="http://tproger.ru/translations/regular-expression-python/"&gt;http://tproger.ru/translations/regular-expression-python/&lt;/a&gt;
&lt;a href="http://qntm.org/files/re/re.html"&gt;http://qntm.org/files/re/re.html&lt;/a&gt;
&lt;a href="http://habrahabr.ru/post/115825/"&gt;http://habrahabr.ru/post/115825/&lt;/a&gt;
&lt;a href="http://pep8.ru/doc/dive-into-python-3/7.html"&gt;http://pep8.ru/doc/dive-into-python-3/7.html&lt;/a&gt;&lt;/p&gt;</summary><category term="регулярные выражения"></category><category term="regex"></category><category term="regexp"></category></entry><entry><title>Встроенные функции Python</title><link href="http://pynsk.ru/vstroennye-funktsii-python.html" rel="alternate"></link><updated>2015-07-27T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-27:vstroennye-funktsii-python.html</id><summary type="html">&lt;p&gt;Стандартная библиотека Python отличается хорошей документацией и широким ассортиментом готовых решений.
Python предоставляет без малого 68 встроенных функций: это получение модуля числа, бинарное и hex представления числа, различные преобразование типов, сложение, возведение в степень и многие другие.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/functions.html"&gt;https://docs.python.org/3.5/library/functions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А вы знали, что в Python всё является объектом? Даже число&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__abs__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__and__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;denominator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;imag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numerator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;real&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="библиотека"></category></entry><entry><title>PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir.</title><link href="http://pynsk.ru/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir.html" rel="alternate"></link><updated>2015-07-25T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir.html</id><summary type="html">&lt;p&gt;PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir. &lt;/p&gt;
&lt;p&gt;Функция scandir возвращает генератор, который содержит директории по пути.
Польза scandir состоит в производительности. Теперь os.listdir и os.walk будут работать в 2-20 раз быстрее.&lt;/p&gt;
&lt;p&gt;Пример: функция, которая возвращает генератор с директориями начинающиеся с точки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subdirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yield directory names not starting with &amp;#39;.&amp;#39; under given path.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scandir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pep"></category><category term="фича"></category><category term="scandir"></category></entry></feed>