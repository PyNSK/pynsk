<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/tainstvo-standartnoi-biblioteki.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-10-03T15:00:00+06:00</updated><entry><title>Таинство стандартной библиотеки: logging</title><link href="http://pynsk.ru/posts/2015/%D0%BE%D0%BA%D1%82./03/tainstvo-standartnoi-biblioteki-logging/" rel="alternate"></link><updated>2015-10-03T15:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-10-03:posts/2015/окт./03/tainstvo-standartnoi-biblioteki-logging/</id><summary type="html">&lt;p&gt;&lt;code&gt;Logging&lt;/code&gt; — библиотека для удобного ведения логов в Python &lt;/p&gt;
&lt;p&gt;В любой разработке приходится рано или поздно вести логи, ведь не отдашь же заказчику программу где отладочные сообщения выводятся с помощью print, да и в дальнейшем если у заказчика что то пойдет не так то можно просто попросит показать лог и понять в чем проблема(в большинстве случаев).&lt;/p&gt;
&lt;p&gt;В чем же мощь logging:
Легко можно поместить указатель времени в каждое сообщение
Вы можете использовать разные уровни срочности ваших сообщений и фильтровать их по этому уровню
Когда Вы захотите позже найти / изменить лог-сообщения Вы не перепутаете их с другим выводом команды &lt;code&gt;print&lt;/code&gt;
Если Вы хотите вывести лог в файл, то очень легко будет игнорировать вывод лог-сообщений&lt;/p&gt;
&lt;p&gt;Чтобы начать использовать logging почти ничего делать не надо:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="c"&gt;# Сообщение отладочное&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;This is a debug message&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Сообщение информационное&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;This is an info message&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Сообщение предупреждение&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;This is a warning&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Сообщение ошибки&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;This is an error message&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Сообщение критическое&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;critical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;FATAL!!!&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Это только базовая возможность &lt;code&gt;logging&lt;/code&gt;, обо всех возможностях по ссылкам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/logging.html"&gt;https://docs.python.org/3.5/library/logging.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-lab.blogspot.ru/2012/08/print-logging-python.html"&gt;http://python-lab.blogspot.ru/2012/08/print-logging-python.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/144566/"&gt;http://habrahabr.ru/post/144566/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="log"></category><category term="logging"></category><category term="print"></category></entry><entry><title>Таинство стандартной библиотеки: мета-классы, что это и зачем</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./26/tainstvo-standartnoi-biblioteki-meta-klassy-chto-eto-i-zachem/" rel="alternate"></link><updated>2015-09-26T15:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-26:posts/2015/сент./26/tainstvo-standartnoi-biblioteki-meta-klassy-chto-eto-i-zachem/</id><summary type="html">&lt;p&gt;В Python все является объектом. Даже класс. Не объект класса, а сам класс.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tuple&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если из класса (считай "шаблон") мы создает объекты ("по шаблону делаем экземпляры"), то что делать как назвать
ситуацию, когда кто-то делает классы?
Стоит сказать зачем это может быть нужно:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;изменять типы создаваемых классов. &lt;/li&gt;
&lt;li&gt;Например, подмешивать миксины(примиси)&lt;/li&gt;
&lt;li&gt;автоматически вызывать некоторый код каждый раз, когда где-то создается класс, дочерний от данного.&lt;/li&gt;
&lt;li&gt;Например, дергать метод, который будет логгировать время запуска функции&lt;/li&gt;
&lt;li&gt;изменять параметры создаваемого дочернего класса. &lt;/li&gt;
&lt;li&gt;Например, на все функции класса повесить декоратор. (какую-то валидацию)&lt;/li&gt;
&lt;li&gt;для написания ORM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Это все позволяют реализовать мета-классы.&lt;/p&gt;
&lt;p&gt;Ссылки для чтения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hlabs.org/development/python/pro_python.html"&gt;http://hlabs.org/development/python/pro_python.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/ru/library/l-pymeta/"&gt;http://www.ibm.com/developerworks/ru/library/l-pymeta/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/145835/"&gt;http://habrahabr.ru/post/145835/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/65625/"&gt;http://habrahabr.ru/post/65625/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.iso.ru/print/rus/document5953.phtml"&gt;http://www.iso.ru/print/rus/document5953.phtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;http://blog.jetfix.ru/post/metaklassy-razrushenie-mifov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Таинство стандартной библиотеки: модуль operator</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./20/tainstvo-standartnoi-biblioteki-modul-operator/" rel="alternate"></link><updated>2015-09-20T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-20:posts/2015/сент./20/tainstvo-standartnoi-biblioteki-modul-operator/</id><summary type="html">&lt;p&gt;Таинство стандартной библиотеки: модуль operator&lt;/p&gt;
&lt;p&gt;Модуль operator содержит набор функций, соответствующих операторам Python.&lt;/p&gt;
&lt;p&gt;Вот некоторые функции:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# суммирует два значения&lt;/span&gt;
&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# то же, что и a!=b&lt;/span&gt;
&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrgetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# возвращает ссылку, по которой можно получить атрибут &amp;quot;id&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Казалось бы, зачем нужны они? А ответ довольно прост - функциональное программирование с использованием итераторов иногда требует создания небольших функций для простых выражений. Иногда они могут быть выражены как лямбда-функции, но некоторые операции не обязательно реализовывать самостоятельно:&lt;/p&gt;
&lt;p&gt;Код для Python 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылки для изучения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/2/operator/"&gt;https://pymotw.com/2/operator/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/operator.html"&gt;https://docs.python.org/3.5/library/operator.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="operator"></category><category term="стандартная библиотека"></category></entry><entry><title>Таинство стандартной библиотеки: слабые ссылки - weakref</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./19/tainstvo-standartnoi-biblioteki-slabye-ssylki-weakref/" rel="alternate"></link><updated>2015-09-19T15:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-19:posts/2015/сент./19/tainstvo-standartnoi-biblioteki-slabye-ssylki-weakref/</id><summary type="html">&lt;p&gt;Python имеет автоматическое управление памятью: подсчёт ссылок для большинства объектов и сборка мусора для удаления циклов. Память освобождается сразу после того, как была удалена последняя ссылка на объект.&lt;/p&gt;
&lt;p&gt;Этот подход отлично работает для большинства приложений, но иногда возникает необходимость вести учёт объектов только когда они используются где-нибудь ещё. К сожалению, само слежение за объектами уже создает ссылку и тем самым объекты остаются в памяти. Модуль weakref (от англ. weak reference - слабая ссылка) даёт средство для учёта объектов без создания ссылок на них. Когда объект больше не нужен, он автоматически удаляется из таблицы слабых ссылок и производится обратный вызов weakref-объектов. Типичное применение модуля - кэширование объектов, которые затратно воспроизвести снова.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;weakref&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;gc&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;             &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c"&gt;# создаёт ссылку&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weakref&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WeakValueDictionary&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c"&gt;# словарь, использующий слабые ссылки&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;primary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;            &lt;span class="c"&gt;# не создаёт ссылки&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;primary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                &lt;span class="c"&gt;# достать объект, если он все ещё &amp;quot;жив&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;                       &lt;span class="c"&gt;# удалить одну ссылку&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                &lt;span class="c"&gt;# произвести сборку мусора&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;primary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                &lt;span class="c"&gt;# запись была автоматически удалена&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;primary&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C:/python31/lib/weakref.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;__getitem__&lt;/span&gt;
    &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;primary&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылки на тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/weakref.html"&gt;https://docs.python.org/3/library/weakref.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pep8.ru/doc/tutorial-3.1/11.html"&gt;http://pep8.ru/doc/tutorial-3.1/11.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ilnurgi1.ru/docs/python/modules/weakref.html"&gt;http://www.ilnurgi1.ru/docs/python/modules/weakref.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="weakref"></category><category term="стандартная библиотека"></category><category term="слабая ссылка"></category></entry><entry><title>Таинство стандартной библиотеки: textwrap для сокращения текста</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./13/tainstvo-standartnoi-biblioteki-textwrap-dlia-sokrashcheniia-teksta/" rel="alternate"></link><updated>2015-09-13T15:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-13:posts/2015/сент./13/tainstvo-standartnoi-biblioteki-textwrap-dlia-sokrashcheniia-teksta/</id><summary type="html">&lt;p&gt;Таинство стандартной библиотеки: textwrap для укорочения текстов&lt;/p&gt;
&lt;p&gt;При работе над Python Дайджестом - &lt;a href="http://pythondigest.ru/"&gt;http://pythondigest.ru/&lt;/a&gt; а именно при работе над "Колонкой автора" возникла такая задачка - уменьшить длину описания.  Описание ссылок берется из RSS этой группы и оно иногда длинное. &lt;/p&gt;
&lt;p&gt;Как же наиболее просто решить эту задачу? Самое простое - взять строку описания и взять, скажем первые 300 символов. Просто? Только вот проблема - слово может оборваться на середине. Чтобы не обрабатывать эту ситуацию самостоятельно, можно воспользоваться модулем textwrap. &lt;/p&gt;
&lt;p&gt;textwrap это стандартный модуль, который позволяет всячески укорачивать текст. Например, можно ограничить длину строки (будет текст выводится в несколько строк).&lt;/p&gt;
&lt;p&gt;Озвученную задачу можно решить так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;textwrap&lt;/span&gt;
&lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textwrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shorten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ссылки на тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dotnetperls.com/textwrap"&gt;http://www.dotnetperls.com/textwrap&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/textwrap.html"&gt;https://docs.python.org/3.5/library/textwrap.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/2/textwrap/"&gt;https://pymotw.com/2/textwrap/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="стандартная библиотека"></category><category term="обработка текста"></category></entry><entry><title>Таинство стандартной библиотеки: itertools</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./06/tainstvo-standartnoi-biblioteki-itertools/" rel="alternate"></link><updated>2015-09-06T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-06:posts/2015/сент./06/tainstvo-standartnoi-biblioteki-itertools/</id><summary type="html">&lt;p&gt;Еще один стандартный модуль в Python - itertools.
Модуль itertools - сборник полезных итераторов.&lt;/p&gt;
&lt;p&gt;В нем содержатся множество операций над итераторами, да и сами интераторы. 
Например есть бесконечная арифметическая прогрессия, можно объединять, разъединять итераторы, всячески извлекать значения как из одного так и групп итераторов, повторять итератор, группировать значения итератора и многое другое. А что именно - по ссылкам.&lt;/p&gt;
&lt;p&gt;Ссылки по теме:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/itertools.html"&gt;https://docs.python.org/3.5/library/itertools.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pymotw.com/2/itertools/"&gt;https://pymotw.com/2/itertools/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-itertools.html"&gt;http://pythonworld.ru/moduli/modul-itertools.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="itertools"></category></entry><entry><title>Таинство стандартной библиотеки: docstring</title><link href="http://pynsk.ru/posts/2015/%D1%81%D0%B5%D0%BD%D1%82./06/tainstvo-standartnoi-biblioteki-docstring/" rel="alternate"></link><updated>2015-09-06T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-06:posts/2015/сент./06/tainstvo-standartnoi-biblioteki-docstring/</id><summary type="html">&lt;p&gt;Docstring - (сокращение от documentation string, строка документации) встроенное средство документирования модулей, функций, классов и методов. Делается очень просто - сразу после определения указывается строковое значение, которое и будет docstring'ом.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;This is the test&amp;#39;s docstring&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;opa&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получить доступ к docstring можно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;This is the test&amp;#39;s docstring&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Либо так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s docstring&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Существуют инструменты, которые позволяют извлекать docstring не по одиночке, а для целого модуля/пакета. О них и пойдет речь.&lt;/p&gt;
&lt;p&gt;Изучаем дальше: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0257/"&gt;https://www.python.org/dev/peps/pep-0257/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyobject.ru/blog/2006/09/08/document-it/"&gt;http://pyobject.ru/blog/2006/09/08/document-it/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/149371/"&gt;http://habrahabr.ru/post/149371/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="docstring"></category><category term="документация"></category></entry><entry><title>Таинство стандартной библиотеки: abc</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./30/tainstvo-standartnoi-biblioteki-abc/" rel="alternate"></link><updated>2015-08-30T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-30:posts/2015/авг./30/tainstvo-standartnoi-biblioteki-abc/</id><summary type="html">&lt;p&gt;Абстрактные базовые классы и интерфейсы — близкие по назначению и смыслу сущности. Как первые, так и вторые представляют собой своеобразный способ документирования кода и помогают ограничить (decouple) взаимодействие отдельных абстракций в программе (классов).&lt;/p&gt;
&lt;p&gt;Питон — очень гибкий язык. Одна из граней этой гибкости — возможности, предоставляемые метапрограммированием. И хотя в ядре языка абстрактные классы и интерфейсы не представлены, первые были реализованы в стандартном модуле abc, вторые — в проекте Zope (модуль zope.interfaces).&lt;/p&gt;
&lt;p&gt;Начиная с версии языка 2.6 в стандартную библиотеку включается модуль abc, добавляющий в язык абстрактные базовые классы (далее АБК).&lt;/p&gt;
&lt;p&gt;АБК позволяют определить класс, указав при этом, какие методы или свойства обязательно переопределить в классах-наследниках&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/72757/"&gt;http://habrahabr.ru/post/72757/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/abc.html"&gt;https://docs.python.org/3/library/abc.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="память"></category></entry><entry><title>Таинство стандартной библиотеки: functools.singledispatch</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./23/tainstvo-standartnoi-biblioteki-functoolssingledispatch/" rel="alternate"></link><updated>2015-08-23T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-23:posts/2015/авг./23/tainstvo-standartnoi-biblioteki-functoolssingledispatch/</id><summary type="html">&lt;p&gt;Стандартная поставка Python полна возможностями. 
Хочется упомянуть обобщенные функции. Если простыми словами, то это такие функции, где мы не думаем о типах аргументов, а просто пишем логику.  Например, (натянутый пример) оператор "+" - мы не думаем о аргументах, мы просто складывает два объекта.&lt;/p&gt;
&lt;p&gt;Для реализации обобщенных функций в Python 3 (начиная с 3.4) появился метод singledispatch в модуле functools.&lt;/p&gt;
&lt;p&gt;Подробней о этом механизме по ссылке - &lt;a href="https://www.python.org/dev/peps/pep-0443/"&gt;https://www.python.org/dev/peps/pep-0443/&lt;/a&gt;&lt;/p&gt;</summary><category term="functools"></category></entry><entry><title>Таинство стандартной библиотеки: functools.partial</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./20/tainstvo-standartnoi-biblioteki-functoolspartial/" rel="alternate"></link><updated>2015-08-20T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-20:posts/2015/авг./20/tainstvo-standartnoi-biblioteki-functoolspartial/</id><summary type="html">&lt;p&gt;Представим, написали мы функцию:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...........&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="n"&gt;run_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Но вот беда, первый аргумент - имя сервера у вас уже есть. А второй, ip сервера, вы получите от пользователя, а функцию уже надо вызвать. Можно, конечно, дождаться когда будет два аргумента, тогда и запустить. А можно пойти по другому пути - воспользоваться механизмом каррирования - такое страшное слово. &lt;/p&gt;
&lt;p&gt;Каррирование - преобразование функции от (предположим) двух аргументов в функцию от первого аргумента, возвращающую функцию, результат вызова которой со вторым агрументом эквивалентен вызову первоначальной функции с упомянутыми аргументами.&lt;/p&gt;
&lt;p&gt;Мощный механизм, который нам и поможет. Пишем&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;

&lt;span class="n"&gt;my_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;super_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My super server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="o"&gt;....&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3.4/library/functools.html"&gt;https://docs.python.org/3.4/library/functools.html&lt;/a&gt;&lt;/p&gt;</summary><category term="functools"></category></entry><entry><title>Таинство стандартной библиотеки: примеры для asyncio - aiohttp</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./12/tainstvo-standartnoi-biblioteki-primery-dlia-asyncio-aiohttp/" rel="alternate"></link><updated>2015-08-12T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-12:posts/2015/авг./12/tainstvo-standartnoi-biblioteki-primery-dlia-asyncio-aiohttp/</id><summary type="html">&lt;p&gt;Asyncio - это модуль содержащий инфраструктуру пригодную для написания асинхронных сетевых приложений. Благодаря концепции сопрограмм (coroutines), код асинхронного приложения прост для понимания и поддержки. &lt;/p&gt;
&lt;p&gt;Экосистема развивается не по дням, а по часам. Стоит обратить внимание на развитие этого направления современного Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sysdev.me/python-asyncio/"&gt;http://sysdev.me/python-asyncio/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/asyncio-dev.html"&gt;https://docs.python.org/3/library/asyncio-dev.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="asyncio"></category><category term="aiohttp"></category></entry><entry><title>Магические методы в Python</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./10/magicheskie-metody-v-python/" rel="alternate"></link><updated>2015-08-10T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-10:posts/2015/авг./10/magicheskie-metody-v-python/</id><summary type="html">&lt;p&gt;Статья от  Rafe Kettler.&lt;/p&gt;
&lt;p&gt;Что такое магические методы? Они всё в объектно-ориентированном Питоне. Это специальные методы, с помощью которых вы можете добавить в ваши классы «магию». Они всегда обрамлены двумя нижними подчеркиваниями (например, &lt;strong&gt;init&lt;/strong&gt; или &lt;strong&gt;lt&lt;/strong&gt;). Ещё, они не так хорошо документированны, как хотелось бы. Все магические методы описаны в документации, но весьма беспорядочно и почти безо всякой организации. Поэтому, чтобы исправить то, что я воспринимаю как недостаток документации Питона, я собираюсь предоставить больше информации о магических методах, написанной на понятном языке и обильно снабжённой примерами. Надеюсь, это руководство вам понравится. Используйте его как обучающий материал, памятку или полное описание.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://habrahabr.ru/post/186608/"&gt;http://habrahabr.ru/post/186608/&lt;/a&gt;&lt;/p&gt;</summary><category term="стандартная библиотека"></category></entry><entry><title>Таинство стандартной библиотеки: collections</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./09/tainstvo-standartnoi-biblioteki-collections/" rel="alternate"></link><updated>2015-08-09T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-09:posts/2015/авг./09/tainstvo-standartnoi-biblioteki-collections/</id><summary type="html">&lt;p&gt;Модуль collections - предоставляет специализированные типы данных, на основе словарей, кортежей, множеств, списков. Этот модуль хорошо себя показывает при частой работе со словарями и списками. 
Например, данный модуль предоставляет возможность посчитать n наиболее часто встречающихся элементов, в порядке убывания встречаемости. Есть в этом модуле и словарь, который помнит порядок ключей. А еще есть структура, которая позволяет создать объект ведущий себя как кортеж, с тем дополнением, что каждому элементу присваивается имя, по которому можно в дальнейшем получать доступ.&lt;/p&gt;
&lt;p&gt;Заинтересовал? 
Вот ссылки для дальнейшего погружения в тему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3.5/library/collections.html"&gt;https://docs.python.org/3.5/library/collections.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-collections.html"&gt;http://pythonworld.ru/moduli/modul-collections.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Таинство стандартной библиотеки: datetime и calendar</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./09/tainstvo-standartnoi-biblioteki-datetime-i-calendar/" rel="alternate"></link><updated>2015-08-09T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-09:posts/2015/авг./09/tainstvo-standartnoi-biblioteki-datetime-i-calendar/</id><summary type="html">&lt;p&gt;Стандартная поставка Python содержит множество инструментов для решения задач. Например, для работы с датами отлично себя показывают datetime и calendar&lt;/p&gt;
&lt;p&gt;Модуль datetime предоставляет классы для обработки времени и даты разными способами. Поддерживается и стандартный способ представления времени, однако больший упор сделан на простоту манипулирования датой, временем и их частями.&lt;/p&gt;
&lt;p&gt;Модуль calendar позволяет напечатать себе календарик (а также содержит некоторые другие полезные функции для работы с календарями). &lt;/p&gt;
&lt;p&gt;Возможности этих модулей обширны. Стоит их рассмотреть внимательно.
Для этого приведем ссылки:&lt;/p&gt;
&lt;p&gt;datetime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/datetime.html"&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonworld.ru/moduli/modul-datetime.html"&gt;http://pythonworld.ru/moduli/modul-datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/datetime/"&gt;http://pymotw.com/2/datetime/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;calendar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/2/library/calendar.html"&gt;https://docs.python.org/2/library/calendar.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pymotw.com/2/calendar/"&gt;http://pymotw.com/2/calendar/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Статистический модуль в стандартной библиотеке</title><link href="http://pynsk.ru/posts/2015/%D0%B0%D0%B2%D0%B3./02/statisticheskii-modul-v-standartnoi-biblioteke/" rel="alternate"></link><updated>2015-08-02T10:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-02:posts/2015/авг./02/statisticheskii-modul-v-standartnoi-biblioteke/</id><summary type="html">&lt;p&gt;Статистический модуль теперь есть в стандартной библиотеке.
Начиная с версии 3.4 в стандартной поставке Python появилось более продвинутое средство для работы с данными. Теперь нет необходимости писать руками методы average, median (вычисление среднего и медианы)  и других. Ознакомьтесь с возможностями стандартного модуля:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/statistics.html"&gt;https://docs.python.org/3/library/statistics.html&lt;/a&gt;&lt;/p&gt;</summary><category term="статистика"></category></entry><entry><title>Регулярные выражения</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/27/reguliarnye-vyrazheniia/" rel="alternate"></link><updated>2015-07-27T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-27:posts/2015/июля/27/reguliarnye-vyrazheniia/</id><summary type="html">&lt;p&gt;Предположим, у нас есть задача - выдрать из крупного текстового файла (файла с логами) все IPv4 (адреса клиентов, например). Как это можно сделать?&lt;/p&gt;
&lt;p&gt;Хорошим инструментом для решения этой задачи являются регулярные выражения. Регулярное выражение — это последовательность символов, используемая для поиска и замены текста в строке или файле.&lt;br /&gt;
Возможно, вы уже встречались с записями типа:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;([a-z]+)[^&amp;gt;]*(?&amp;lt;!/)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Большая вероятность, что это было регулярное выражение.
Регулярные выражения - это мощный инструмент, который стоит изучить и осознать. Не надо запоминать все конструкции, достаточно понять принцип.&lt;/p&gt;
&lt;p&gt;Для погружения в эту тему, рекомендуем эти материалы:
&lt;a href="http://tproger.ru/translations/regular-expression-python/"&gt;http://tproger.ru/translations/regular-expression-python/&lt;/a&gt;
&lt;a href="http://qntm.org/files/re/re.html"&gt;http://qntm.org/files/re/re.html&lt;/a&gt;
&lt;a href="http://habrahabr.ru/post/115825/"&gt;http://habrahabr.ru/post/115825/&lt;/a&gt;
&lt;a href="http://pep8.ru/doc/dive-into-python-3/7.html"&gt;http://pep8.ru/doc/dive-into-python-3/7.html&lt;/a&gt;&lt;/p&gt;</summary><category term="регулярные выражения"></category><category term="regex"></category><category term="regexp"></category></entry><entry><title>Встроенные функции Python</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/27/vstroennye-funktsii-python/" rel="alternate"></link><updated>2015-07-27T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-27:posts/2015/июля/27/vstroennye-funktsii-python/</id><summary type="html">&lt;p&gt;Стандартная библиотека Python отличается хорошей документацией и широким ассортиментом готовых решений.
Python предоставляет без малого 68 встроенных функций: это получение модуля числа, бинарное и hex представления числа, различные преобразование типов, сложение, возведение в степень и многие другие.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3.5/library/functions.html"&gt;https://docs.python.org/3.5/library/functions.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А вы знали, что в Python всё является объектом? Даже число&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__abs__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__add__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__and__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;....&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;denominator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;imag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numerator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;real&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="библиотека"></category></entry><entry><title>PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir.</title><link href="http://pynsk.ru/posts/2015/%D0%B8%D1%8E%D0%BB%D1%8F/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/" rel="alternate"></link><updated>2015-07-25T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-25:posts/2015/июля/25/pep-471-python-35-dobavil-v-modul-os-novuiu-funktsiiu-scandir/</id><summary type="html">&lt;p&gt;PEP 471 (Python 3.5) добавил в модуль os новую функцию - scandir. &lt;/p&gt;
&lt;p&gt;Функция scandir возвращает генератор, который содержит директории по пути.
Польза scandir состоит в производительности. Теперь os.listdir и os.walk будут работать в 2-20 раз быстрее.&lt;/p&gt;
&lt;p&gt;Пример: функция, которая возвращает генератор с директориями начинающиеся с точки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subdirs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Yield directory names not starting with &amp;#39;.&amp;#39; under given path.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scandir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pep"></category><category term="фича"></category><category term="scandir"></category></entry></feed>