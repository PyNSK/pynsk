<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyNSK - Новосибирское Python сообщество</title><link href="http://pynsk.ru/" rel="alternate"></link><link href="http://pynsk.ru/feeds/pishem-web-proekty.atom.xml" rel="self"></link><id>http://pynsk.ru/</id><updated>2015-10-07T18:00:00+06:00</updated><entry><title>Пишем web-проекты: полиморфные связи или Foreign Key на две Django модели</title><link href="http://pynsk.ru/posts/2015/Oct/07/pishem-web-proekty-polimorfnye-sviazi-ili-foreign-key-na-dve-django-modeli/" rel="alternate"></link><updated>2015-10-07T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-10-07:posts/2015/Oct/07/pishem-web-proekty-polimorfnye-sviazi-ili-foreign-key-na-dve-django-modeli/</id><summary type="html">&lt;p&gt;Представим ситуацию. 
Есть модель Текст (заголовок, тело, теги) и модели Новость, Продукт, Реклама, которые имеют свои уникальные параметры. 
Необходимо связать Текст и все остальные - вполне логичное желание. &lt;/p&gt;
&lt;p&gt;Как можно поступить:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Добавить Foreign Key в Текст (т.е. будет N=3 Foreign Key полей)&lt;/li&gt;
&lt;li&gt;Сделать отдельные модели для связи - будет 3 таблицы для связки. (вручную их сделаем)&lt;/li&gt;
&lt;li&gt;Сделать 2 поля, одно из которых будет говорить, какая модель имеется в виду, а второе – хранить ключ этой модели. + добавить свойство, которое будет возвращать запись из нужной модели (делать нужный query запрос) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Первый вариант не подходит, потому что каждая новая модель будет добавлять еще одну Foreign Key связь
Второй не очень, потому что N моделей - N дополнительных таблиц делать руками
А вот третий вариант неплохой. Он и реализован в Django и состоит из двух компонентов: Content Types Framework и Generic Relations.&lt;/p&gt;
&lt;p&gt;Вот простой пример: реализуем систему тэгов(ярлычков), которая могла бы выглядеть так&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.contenttypes.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GenericForeignKey&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.contenttypes.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaggedItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;object_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GenericForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;object_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;              &lt;span class="c"&gt;# __unicode__ on Python 2&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Обычное поле ForeignKey может “указывать” только на одну модель, что означает, - если в модели TaggedItem есть поле ForeignKey, его можно “связать” с одной и только одной моделью, для которой и будут сохраняться тэги. Приложение contenttypes предоставляет нам поле специального типа (GenericForeignKey), которое решает обозначенную выше проблему и позволяет создать связь с любой моделью&lt;/p&gt;
&lt;p&gt;Ссылки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/"&gt;https://docs.djangoproject.com/en/1.8/ref/contrib/contenttypes/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://djbook.ru/rel1.8/ref/contrib/contenttypes.html"&gt;http://djbook.ru/rel1.8/ref/contrib/contenttypes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://axiacore.com/blog/how-use-genericforeignkey-django/"&gt;http://axiacore.com/blog/how-use-genericforeignkey-django/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ikrvss.ru/2010/11/09/django-polymorphic-foreign-key/"&gt;http://www.ikrvss.ru/2010/11/09/django-polymorphic-foreign-key/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="django"></category><category term="generic"></category><category term="foreign key"></category></entry><entry><title>Пишем web-проекты: Django Admin Actions</title><link href="http://pynsk.ru/posts/2015/Sep/16/pishem-web-proekty-django-admin-actions/" rel="alternate"></link><updated>2015-09-16T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-16:posts/2015/Sep/16/pishem-web-proekty-django-admin-actions/</id><summary type="html">&lt;p&gt;Интерфейс администратора Django достается разработчику "даром" - прописываешь немного срочек и готово.
Появляется UI где можно изменять объекты моделей - просто так нам предоставляют GRUD возможности.&lt;/p&gt;
&lt;p&gt;Но что если нам надо сделать какие-то дополнительные возможности?
Для примера такие действия есть в Python Дайджест:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Python Дайджест" src="http://pynsk.ru/images/posts/django_actions.png" /&gt;&lt;/p&gt;
&lt;p&gt;Такие возможности реализуются с помощью Django admin actions. 
Для примера так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemModeratorAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;_action_make_moderated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_action_set_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;queue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;_action_set_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;В очередь&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Можно заметить, что добавлена функция, которая принимает request и queryset. queryset - в данном случае это набор выделенных объектов (у тех что галочки стоят). &lt;/p&gt;
&lt;p&gt;Подробная информация по ссылке:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/admin/actions/"&gt;https://docs.djangoproject.com/en/1.8/ref/contrib/admin/actions/&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="admin"></category><category term="action"></category></entry><entry><title>Пишем web-проекты: выжимаем максимум из PostgreSQL</title><link href="http://pynsk.ru/posts/2015/Sep/03/pishem-web-proekty-vyzhimaem-maksimum-iz-postgresql/" rel="alternate"></link><updated>2015-09-03T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-09-03:posts/2015/Sep/03/pishem-web-proekty-vyzhimaem-maksimum-iz-postgresql/</id><summary type="html">&lt;p&gt;Postgres предоставляет много встроенных возможностей для создания эфективных приложений,
использующих базы данных. А в версии 9.4 появляется еще и полноценное JSON поле,
при правильном использовании которого, отпадает необходимость использвания NoSQL баз данных.
В докладе мы рассмотрим, как использовать этот потенциал по максимуму в своих Python/Django
приложениях.&lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/wP6pCm2zvUg?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="web"></category><category term="db"></category><category term="postgresql"></category><category term="видео"></category></entry><entry><title>Пишем web-проекты: туториал по django</title><link href="http://pynsk.ru/posts/2015/Aug/26/pishem-web-proekty-tutorial-po-django/" rel="alternate"></link><updated>2015-08-26T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-26:posts/2015/Aug/26/pishem-web-proekty-tutorial-po-django/</id><summary type="html">&lt;p&gt;Django - это крупный web-фреймворк. Это отличный инструмент для создания web-приложений. Освоение этого инструмента занимает приличное количество времени.
А начать можно с туториала - &lt;a href="https://docs.djangoproject.com/en/stable/intro/tutorial01/"&gt;https://docs.djangoproject.com/en/stable/intro/tutorial01/&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category></entry><entry><title>Пишем web-проекты: обзор и сравнение методов реализации REST API в Django</title><link href="http://pynsk.ru/posts/2015/Aug/25/pishem-web-proekty-obzor-i-sravnenie-metodov-realizatsii-rest-api-v-django/" rel="alternate"></link><updated>2015-08-25T17:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-25:posts/2015/Aug/25/pishem-web-proekty-obzor-i-sravnenie-metodov-realizatsii-rest-api-v-django/</id><summary type="html">&lt;p&gt;Без API уже тяжело представить веб-проект. Для django существует несколько библиотек, которые позволяют создать REST API за пару строк. &lt;/p&gt;
&lt;iframe width="480" height="270" src="https://www.youtube.com/embed/nEl2ymv2QnA?feature=oembed" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="rest"></category><category term="api"></category><category term="django"></category><category term="видео"></category></entry><entry><title>Python и real-time web приложение</title><link href="http://pynsk.ru/posts/2015/Aug/08/python-i-real-time-web-prilozhenie/" rel="alternate"></link><updated>2015-08-08T18:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-08:posts/2015/Aug/08/python-i-real-time-web-prilozhenie/</id><summary type="html">&lt;p&gt;Далеко не всегда требуется тащить мощный Django или другой фреймворк. Бывает достаточно небольшого количества чистого Python кода и базы данных.
Посмотрим, как имея всего эти 2 элемента написать приложение.
&lt;a class='embedly-card' data-card-chrome='0' href='https://www.youtube.com/watch?v=PsorlkAF83s'&gt;&lt;/a&gt;
            &lt;script&gt;
            !function(a){
                var b="embedly-platform",c="script";
                if(!a.getElementById(b)){
                    var d=a.createElement(c);
                    d.id=b;
                    d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";
                    var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}
                }(document);
            &lt;/script&gt;
            &lt;/p&gt;</summary><category term="видео"></category><category term="hardcore"></category><category term="real-time"></category><category term="web"></category></entry><entry><title>Bottle с Python</title><link href="http://pynsk.ru/posts/2015/Aug/05/bottle-s-python/" rel="alternate"></link><updated>2015-08-05T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-08-05:posts/2015/Aug/05/bottle-s-python/</id><summary type="html">&lt;p&gt;bottle - это веб-фреймворк для Python. Отличительной особенностью этого фреймворка является простота - исходный код занимает один файл. Несмотря на свою минималистичность, Bottle предоставляет довольно широкие возможности, которых на 100% хватает для мелких и средних проектов.
Чтобы стартануть изучение достаточно написать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;

&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/hello/&amp;lt;name&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;lt;b&amp;gt;Hello {{name}}&amp;lt;/b&amp;gt;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Это запустит web-приложение на 8080 порту, а по ссылке &lt;code&gt;http://127.0.0.1/hello/Alexander&lt;/code&gt; вы увидите Hello Alexander.
Очень просто.&lt;/p&gt;
&lt;p&gt;Дальнейшее изучение можно продолжить по ссылкам:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;http://bottlepy.org/docs/dev/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/221659/"&gt;http://habrahabr.ru/post/221659/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://habrahabr.ru/post/250831/"&gt;http://habrahabr.ru/post/250831/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="bottle"></category><category term="web"></category></entry><entry><title>Django REST API</title><link href="http://pynsk.ru/posts/2015/Jul/29/django-rest-api/" rel="alternate"></link><updated>2015-07-29T08:00:00+06:00</updated><author><name>Alexander Sapronov</name></author><id>tag:pynsk.ru,2015-07-29:posts/2015/Jul/29/django-rest-api/</id><summary type="html">&lt;p&gt;Пишите web приложения? Тогда для вас не является новостью, что без API далеко не уедешь. &lt;/p&gt;
&lt;p&gt;Для фреймворка django существует несколько способов создать API за пару минут, да еще и с документацией.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;https://github.com/tomchristie/django-rest-framework&lt;/a&gt;
&lt;a href="https://github.com/marcgibbons/django-rest-swagger"&gt;https://github.com/marcgibbons/django-rest-swagger&lt;/a&gt;&lt;/p&gt;</summary><category term="django"></category><category term="rest"></category><category term="api"></category><category term="swagger"></category></entry></feed>